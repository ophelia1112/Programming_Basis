{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "307b4ee2-ba4c-44cf-8f2b-754f49ceeb1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点一、求解线性方程组\n",
    "# 线性方程组\n",
    "# a00*x0+a01*x1+a02*x2=b0   a10*x0+a11*x1+a12*x2=b1   a20*x0+a21*x1+a22*x2=b2 a与b系数已知，求解x\n",
    "# 式子可以写为矩阵的形式，a矩阵为三行三列矩阵，参考计量经济学，b为向量,x为向量\n",
    "# 在机器学习中运用：预测人的年龄，例如A（a矩阵）为样本数据，每个人的信息，每行一个样本，每列一个特征；b为样本标签，每个人的年龄，x为系数向量，求出其对于预测下一个人的年龄便利"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "94dbf424-6ebb-4824-a43c-e99346cf3118",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 线性方程ax=b\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "332cabb6-57c1-4637-b163-97f2104c009b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1, -2,  1],\n",
       "       [ 0,  2, -8],\n",
       "       [-4,  5,  9]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.array(\n",
    "    [\n",
    "        [1,-2,1],\n",
    "        [0,2,-8],\n",
    "        [-4,5,9]\n",
    "    ]\n",
    ")\n",
    "a # 线性方程"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9f9d904c-0c40-4c9d-be88-3b1d647bfdb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "b=np.array([0,8,-9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bff32f78-8ce1-4bef-b815-7561966d6756",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([29., 16.,  3.])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 调用solve直接求解\n",
    "x=np.linalg.solve(a,b)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44d5587b-63e7-4778-8bb5-37730a40360c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 求出来的就是x的向量值，x与a进行点乘，验证数值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bd9a33c5-d2c6-4ee4-9705-1f1725919107",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[1].dot(x) # 第二行点乘值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e7fabebb-9549-49df-b2e6-32dbfbac03b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.dot(x)==b # 布尔判断"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0ce8b28-08d5-4da5-a5f2-93eefa1fad93",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "61db4eac-6714-49ad-84b8-ae1a1a596242",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点二、实现矩阵分解\n",
    "# SVD矩阵分解\n",
    "# SVD奇异值分解（singular value decomposition），解析见笔记"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2359dcd7-4307-4e36-b94f-6d459ce2f436",
   "metadata": {},
   "outputs": [],
   "source": [
    "# numpy实现SVD的矩阵分解"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e0f4b22b-067e-4734-8efb-bde45b475fc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ac2a68da-efc6-40b9-92a0-3e3fedc391b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 2, 7, 6],\n",
       "       [1, 5, 2, 4],\n",
       "       [7, 8, 2, 1],\n",
       "       [7, 6, 8, 2],\n",
       "       [5, 2, 9, 2],\n",
       "       [5, 9, 8, 8],\n",
       "       [1, 2, 7, 5],\n",
       "       [3, 3, 2, 2]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.random.randint(1,10,(8,4))\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0037cf83-12f2-496a-b86c-72d1b24d8b9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 矩阵分解\n",
    "u,s,v=np.linalg.svd(a,full_matrices=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74964fae-5f0e-462f-af9e-fd70c1d82974",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((8, 4), (4,), (4, 4))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u.shape,s.shape,v.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "44680ffd-201a-4710-a93f-1ef58ab03ae4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.32172534,  0.43956832,  0.1132698 ,  0.59292226],\n",
       "       [-0.21673597, -0.08250399,  0.47889125, -0.38931085],\n",
       "       [-0.32361479, -0.70169024, -0.03991486,  0.2063745 ],\n",
       "       [-0.43972638, -0.17698966, -0.43834221, -0.30501534],\n",
       "       [-0.35554492,  0.23814561, -0.59812045, -0.05040936],\n",
       "       [-0.55480487, -0.01478441,  0.44468302, -0.07507591],\n",
       "       [-0.29081378,  0.44717856,  0.08539692, -0.26101543],\n",
       "       [-0.18066328, -0.13920376,  0.03622611,  0.53380606]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b65488da-99e6-4287-90b4-c09c584fc48a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([27.01131507,  9.17423508,  6.89150978,  1.31505202])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s # 是个对角矩阵，只有对角线上有值，进行了简写成为一维向量"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b4efb1fb-7c29-4f64-92cc-a789d5bb0de7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[27.01131507,  0.        ,  0.        ,  0.        ],\n",
       "       [ 0.        ,  9.17423508,  0.        ,  0.        ],\n",
       "       [ 0.        ,  0.        ,  6.89150978,  0.        ],\n",
       "       [ 0.        ,  0.        ,  0.        ,  1.31505202]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.diag(s) # 还原"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0b43595f-a3d1-4043-acd4-ebfc74354613",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.42901011, -0.51024388, -0.6251438 , -0.40595164],\n",
       "       [-0.45864896, -0.58739129,  0.5416855 ,  0.38883085],\n",
       "       [-0.46658579,  0.4000578 , -0.43405374,  0.65867201],\n",
       "       [ 0.62280748, -0.48433089, -0.3568885 ,  0.50016499]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "308c7067-e0b1-46c7-88d6-123bf26d2db0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 从分量还原矩阵"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "af03f272-90d2-4a1b-94b6-0a86b4760c48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2., 2., 7., 6.],\n",
       "       [1., 5., 2., 4.],\n",
       "       [7., 8., 2., 1.],\n",
       "       [7., 6., 8., 2.],\n",
       "       [5., 2., 9., 2.],\n",
       "       [5., 9., 8., 8.],\n",
       "       [1., 2., 7., 5.],\n",
       "       [3., 3., 2., 2.]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u@np.diag(s)@v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "715622f2-ed0d-45c0-89d8-b9ce9791d559",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "96babe24-5389-4809-a400-a24fd8984dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点三、多项式线性拟合\n",
    "# 多项式曲线拟合\n",
    "# 对于一堆数据点（x,y），根据数据找出函数，使得此函数的曲线尽量和原始数据相匹配\n",
    "# 原理：任何可微连续的函数，都可以用一个N次多项式来估计，而比N次幂更高阶的部分可以视为无穷小而忽略"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "29efc8ba-5b2e-4acc-9a3c-39ba8df8f10b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 构造原始数据\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7020199c-9986-4d2e-bd0c-1caebb616bbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.linspace(-5,5,50) # x为数组，在-5到5之间，等间距生成50个点"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0b679ff4-3fa3-4c5e-9c9a-7915b1379646",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 假设y，为sin(x),同时加上一系列噪声，模拟真实世界噪声\n",
    "y=np.sin(x)+np.random.rand(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7711a244-d326-46e0-ac20-850faadb9838",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((50,), (50,))"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape,y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bb368726-05d2-4df2-b217-2be5bf49464c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x2ad3755ad20>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1ac26f45-2371-424c-95da-7b8239967df9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.03166327, -0.00097859,  0.41723942,  0.50014104])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 使用numpy拟合\n",
    "# 使用三次方多项式拟合\n",
    "params=np.polyfit(x,y,3) # 三个参数\n",
    "params # 一维数组，即输入x的数据点之后，得到的拟合的参数，带入到拟合的曲线中，即-0.03166x**3-0.00097x**2+0.41723x+0.500141=y进行拟合，x有几阶根据数字指定"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cef42f30-d4d3-46e7-b9bc-e02c3518cc6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "poly1d([-0.03166327, -0.00097859,  0.41723942,  0.50014104])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 构造一个编阶多项式对象\n",
    "param_func=np.poly1d(params) # 原生语法传回一个函数。即拟合函数，这个拟合函数可以利用原始的x对象对y进行预测\n",
    "param_func"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "09807f05-5ab2-499c-9a0a-956fb4ae0038",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 根据原始的x,计算闭合的y的预测y_predict\n",
    "y_predict=param_func(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "87c179c7-c7c3-4e38-af7f-a9026c576322",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2ad378c43e0>]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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8kJERERWhckLERERWRWTJS//+te/MHLkSLi5ucHb21uvc+bMmQNBEJo8YmNjTRUiERERWSGTTditq6vD9OnTER0djc8++0zv82JjY/HFF180PpdKpaYIj4iIiKyUyZKXlStXAgDWrVtn0HlSqRRyudwEEREREZEtsLg5L3v37oWfnx/69OmDBQsWoKSkpM3ja2troVQqmzyIiIjIdllU8hIbG4v169cjMTERq1atwr59+3DfffdBpVK1ek58fDxkMlnjIzg42IwRExERkbkZlLwsW7as2YTaPz7S09PvOJjHH38cDz74IPr3749p06Zhx44dOH78OPbu3dvqOXFxcVAoFI2PnJycO/58IiIisnwGzXl5/vnnMWfOnDaP6dmzZ0fiafZeXbp0QUZGBiZMmNDiMVKplJN6iYiI7IhByYuvry98fX1NFUsz169fR0lJCQICAsz2mURERGTZTDbnJTs7GykpKcjOzoZKpUJKSgpSUlJQUVHReExYWBg2b94MAKioqMA///lPHDlyBFevXkViYiKmTp2KXr16YdKkSaYKk4iIiKyMyZZKL1++HF9++WXj80GDBgEA9uzZg3HjxgEALl68CIVCAQBwcHDA2bNn8eWXX6KsrAyBgYG499578dprr3FYiIiIiBoJGo1GI3YQxqRQKODt7Y2cnBx4eXmJHQ4RERHpQalUIjg4GGVlZZDJZG0ea7LKi1jKy8sBgEumiYiIrFB5eXm7yYvNVV7UajXy8vLg6ekJQRDEDkd0ukyWlSjT4vfZPPh9Nh9+r82D3+ffaTQalJeXIzAwEBJJ21Nyba7yIpFI0LVrV7HDsDheXl52/4thDvw+mwe/z+bD77V58Pus1V7FRceiOuwSERERtYfJCxEREVkVJi82TiqVYsWKFVxubmL8PpsHv8/mw++1efD7fGdsbsIuERER2TZWXoiIiMiqMHkhIiIiq8LkhYiIiKwKkxciIiKyKkxeiIiIyKowebFDtbW1iIyMhCAISElJETscm3L16lU8/fTTCAkJgaurK0JDQ7FixQrU1dWJHZpN+OCDD9CjRw+4uLggKioKx44dEzskmxIfH49hw4bB09MTfn5+mDZtGi5evCh2WDbvP//5DwRBwJIlS8QOxWowebFDL7zwAgIDA8UOwyalp6dDrVbjo48+wvnz5/HOO+9g7dq1eOmll8QOzep9++23WLp0KVasWIFTp05h4MCBmDRpEoqKisQOzWbs27cPCxcuxJEjR7Br1y7U19fj3nvvRWVlpdih2azjx4/jo48+woABA8QOxaqwz4ud+eWXX7B06VL8+OOP6NevH06fPo3IyEixw7Jpb7zxBtasWYMrV66IHYpVi4qKwrBhw/D+++8D0G7CGhwcjGeffRbLli0TOTrbVFxcDD8/P+zbtw9jxowROxybU1FRgcGDB+PDDz/E66+/jsjISKxevVrssKwCKy92pLCwEPPmzcNXX30FNzc3scOxGwqFAj4+PmKHYdXq6upw8uRJTJw4sfE1iUSCiRMnIjk5WcTIbJtCoQAA/vyayMKFCzF58uQmP9ekH5vbVZpaptFoMGfOHMyfPx9Dhw7F1atXxQ7JLmRkZOC9997Dm2++KXYoVu3GjRtQqVTw9/dv8rq/vz/S09NFisq2qdVqLFmyBKNGjUJERITY4dicTZs24dSpUzh+/LjYoVglVl6s3LJlyyAIQpuP9PR0vPfeeygvL0dcXJzYIVslfb/Pt8vNzUVsbCymT5+OefPmiRQ50Z1ZuHAhUlNTsWnTJrFDsTk5OTlYvHgxvv76a7i4uIgdjlXinBcrV1xcjJKSkjaP6dmzJx577DFs374dgiA0vq5SqeDg4IAnn3wSX375palDtWr6fp+dnZ0BAHl5eRg3bhxGjBiBdevWQSLh3wkdUVdXBzc3N/zwww+YNm1a4+tPPfUUysrKsHXrVvGCs0GLFi3C1q1bsX//foSEhIgdjs3ZsmULHnroITg4ODS+plKpIAgCJBIJamtrm3yNmmPyYieys7OhVCobn+fl5WHSpEn44YcfEBUVha5du4oYnW3Jzc3F3XffjSFDhmDDhg28CBlJVFQUhg8fjvfeew+AdlijW7duWLRoESfsGolGo8Gzzz6LzZs3Y+/evejdu7fYIdmk8vJyXLt2rclrc+fORVhYGF588UUO0+mBc17sRLdu3Zo89/DwAACEhoYycTGi3NxcjBs3Dt27d8ebb76J4uLixq/J5XIRI7N+S5cuxVNPPYWhQ4di+PDhWL16NSorKzF37lyxQ7MZCxcuxMaNG7F161Z4enqioKAAACCTyeDq6ipydLbD09OzWYLi7u6Ozp07M3HRE5MXIiPatWsXMjIykJGR0SwpZJGzY2bMmIHi4mIsX74cBQUFiIyMREJCQrNJvHTn1qxZAwAYN25ck9e/+OILzJkzx/wBEbWCw0ZERERkVTiLkIiIiKwKkxciIiKyKkxeiIiIyKoweSEiIiKrwuSFiIiIrAqTFyIiIrIqTF6IiIjIqjB5ISIiIqvC5IWIiIisCpMXIiIisipMXoiIiMiq/H9rob54uvKkeAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x,y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3f435c53-1d69-43f2-845d-3ce404774f48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-3.69495508e-06, -1.11141953e-05,  2.10460226e-04,  5.38379588e-04,\n",
       "       -4.19748256e-03, -4.95503047e-03,  3.49498905e-02, -8.32837538e-02,\n",
       "       -1.09718400e-01,  8.88826093e-01,  5.60304696e-01])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 可见并未完全拟合，故将拟合曲线的数阶提升\n",
    "param=np.polyfit(x,y,10)\n",
    "param"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "003d0416-7d45-4d51-8f1c-ac202b81e9ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "poly1d([-3.69495508e-06, -1.11141953e-05,  2.10460226e-04,  5.38379588e-04,\n",
       "       -4.19748256e-03, -4.95503047e-03,  3.49498905e-02, -8.32837538e-02,\n",
       "       -1.09718400e-01,  8.88826093e-01,  5.60304696e-01])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "param_newfunc=np.poly1d(param)\n",
    "param_newfunc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "44f757f4-d5d8-490e-8b8f-c0ec2814d6ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pre=param_newfunc(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "28665d31-c9ec-426b-a6ba-c50824c461ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2ad37a72b40>]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x,y_pre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bd17ca5b-fb53-4a40-b5c1-d913d351baee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 机器学习对数据进行高项拟合，预测值比较有价值，这也映射进社会科学中多元一维回归方程，计算拟合函数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffb0733c-d321-4468-9c54-eda4477ed091",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f914318-db20-4eb5-8437-c5a7ef8ac613",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5ced516b-05e6-47c6-9927-0b1cb0a24745",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点四、逆矩阵求解方程组\n",
    "# 计算逆矩阵求解线性方程组\n",
    "# 对于线性方程组x+y+z=6;2y+5z=-4;2x+5y-z=27可以表示矩阵为\n",
    "# [[1,1,1]\n",
    "#  [0,2,5]\n",
    "#  [2,5,-1]]\n",
    "# 乘以矩阵[x,y,z]（此处为列向量）\n",
    "# 等于[6,-4,27] 此处为列向量\n",
    "# 逆矩阵：设A为数域上一个n阶矩阵，若存在另一个n阶矩阵B，使得AB=BA=I，则B是A的逆矩阵，而A被称为可逆矩阵，I为单位矩阵（对角线元素都为1）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a62a7e80-59cb-415c-8ee2-3189adc0c2c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e9bad6b7-1e7b-4e5e-bb7c-a8ce190e0b35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  1,  1],\n",
       "       [ 0,  2,  5],\n",
       "       [ 2,  5, -1]])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 求解逆矩阵\n",
    "a=np.array([\n",
    "    [1,1,1],\n",
    "    [0,2,5],\n",
    "    [2,5,-1]\n",
    "])\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d0e946d8-560a-43e2-89d2-bdccd357407f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.28571429, -0.28571429, -0.14285714],\n",
       "       [-0.47619048,  0.14285714,  0.23809524],\n",
       "       [ 0.19047619,  0.14285714, -0.0952381 ]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 求b为a的逆矩阵\n",
    "B=np.linalg.inv(a) # inverse\n",
    "B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3127fb12-e05e-4921-a54b-3d84ad3623e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.00000000e+00, -5.55111512e-17,  0.00000000e+00],\n",
       "       [ 0.00000000e+00,  1.00000000e+00,  0.00000000e+00],\n",
       "       [-1.11022302e-16,  5.55111512e-17,  1.00000000e+00]])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 验证矩阵和逆矩阵的乘积是单位矩阵\n",
    "a@B # 实则为对角线为1的单位矩阵，只是对于其他浮点数进行展示"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ceb86ef4-7af7-4e4f-8f6a-cc40384f7a7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.00000000e+00, -5.55111512e-17,  0.00000000e+00],\n",
       "       [ 0.00000000e+00,  1.00000000e+00,  0.00000000e+00],\n",
       "       [-1.11022302e-16,  5.55111512e-17,  1.00000000e+00]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.matmul(a,B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "48eae263-e566-4afb-b0bd-0e062df4b710",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 验证线性方程组\n",
    "# 构造ax=b中的b\n",
    "b=np.array([6,-4,27])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a64e9055-ccf6-4e43-bee7-16106c8b93c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 5.,  3., -2.])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=B@b\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "563a0003-f0a9-49d1-8146-d5f95b46e49f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6., -4., 27.])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a@x #b值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49a7e87d-6b73-4762-97a1-06ffc7432087",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc8db489-3e7c-4216-8180-a93b61036a3f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "79e4d0fc-0b2f-4a9a-915f-1e24c61badaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点五、读取文件\n",
    "# 将数组读到文件中\n",
    "# numpy以内建二进制的方法将数组读取到文件，以及从文件加载数据，若是文本表格类数据一般用pandas\n",
    "# np.load(filename) 从.npy .npz文件中加载numpy数组，文件后缀是.npy返回单个数组，.npz返回多个数组的字典\n",
    "# np.save(filename,arr) 单个numpy数组存放在.npy文件中\n",
    "# np.savez(filename,arra=arra,arrb=arrb) 将多个numpy数组保存到.npz未压缩的文件格式中\n",
    "# np.savez_compressed(filename,arra=arra,arrb=arrb) 将多个numpy数组保存到.npz压缩的文件中\n",
    "# .npy .npz二进制文件，纯文本打开乱码"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4149516a-460e-4a44-af81-b5cf07f1708f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用save  load保存和加载单个数组"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7f2e134d-fa00-4ad5-936b-38a4defb824d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1ace0a23-9fef-4788-9376-f69ccced8543",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=np.arange(12).reshape(3,4)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "47dfc2a6-1873-4d92-b2d0-a780c1af7172",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.save('arr_a.npy',a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "f5201750-4bf8-4b58-828e-2ad6b556ddb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=np.load('arr_a.npy')\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0634e4fc-c85e-480b-b10b-ccf65c6ccb1f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ad627340-846e-40df-8a9d-2f024a49aa0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用np.savez np.load保存与加载多个数组"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2431be42-e4cc-4b1c-b075-3118a161fa80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "2b26f09d-cfee-4c71-aeac-e70199fb23a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.83742967, 0.49730365, 0.22732878],\n",
       "       [0.83371285, 0.32208597, 0.14352686]])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=np.random.rand(2,3)\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "a5d82323-409e-4728-8397-f76107eb6d91",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savez('arr_ab.npz',arra=a,arrb=b) # 多个数组保存到一个文件中"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "26eba20f-42bc-489f-a70a-cbe6514fe9ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NpzFile 'arr_ab.npz' with keys: arra, arrb"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=np.load('arr_ab.npz')\n",
    "c # 读取出来是字典形式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "a843f482-b9af-44a6-91d8-7ccd5446472f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c['arra']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "de27e6cb-a9d8-4936-82c7-2bbd57ea90b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.83742967, 0.49730365, 0.22732878],\n",
       "       [0.83371285, 0.32208597, 0.14352686]])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c['arrb']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ebd58ef-e43f-4039-b35b-373b513d0e00",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46c2bdd6-6c90-4147-9147-2ffd9531e15b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用np.savez_compressed np.load保存加载多个数组到压缩格式文件"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "aa1bd9a6-7a89-4c52-8b5b-9dfa79d07182",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "93603bb9-7dc7-4463-a6cd-1070d7d2bc51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.83742967, 0.49730365, 0.22732878],\n",
       "       [0.83371285, 0.32208597, 0.14352686]])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "733b4b28-1a80-4392-b199-d2e168476bd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savez_compressed('arr_ab_compressed.npz',arra=a,arrb=b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "275759e7-2a1f-4be3-b2f9-96ce85144b35",
   "metadata": {},
   "outputs": [],
   "source": [
    "c=np.load('arr_ab_compressed.npz')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "e77e4a8a-e55d-4cc9-bd58-f94f1f5e4a21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c['arra']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "6cbd3642-099b-4223-8423-add80d646b47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.83742967, 0.49730365, 0.22732878],\n",
       "       [0.83371285, 0.32208597, 0.14352686]])"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c['arrb']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "473dded7-427b-4871-838b-13b0479401a4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "11130d3f-eb06-4ce0-a193-8d009192bd04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点六、结构化数组\n",
    "# 一般情况下，numpy中数组为同样的数据类型，但是也记录异构数组，比如记录姓名身高体重结合的数据，此为结构化数组"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "f82260b8-93e6-4a84-a8cd-d46e57fede5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "f94fddbd-a562-4de0-8f0c-c27bcc9aa66b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 正常的numpy数组dtype值只有一个类型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "75f69c30-7bf0-4456-bf35-46532b4c5c47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), dtype('int32'))"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr=np.arange(10)\n",
    "arr,arr.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "c3edf77e-b866-4351-930c-c2031d6fa43b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[0.56170539, 0.06056137, 0.25514858, 0.50231665],\n",
       "        [0.13562889, 0.84244599, 0.00491425, 0.1194261 ],\n",
       "        [0.64275405, 0.27544086, 0.85924789, 0.66523   ]]),\n",
       " dtype('float64'))"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr=np.random.rand(3,4)\n",
    "arr,arr.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "388452f2-4296-4a7d-bb89-352782328331",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用numpy表达异构数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "a8b702f6-8236-4a22-ac01-9da43f35876e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype([('name', '<U10'), ('age', '<i4'), ('weight', '<f8')])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dtype可以单独定义复合结构\n",
    "my_dtype=np.dtype([('name','U10'),('age','i4'),('weight','f8')]) \n",
    "# U10字符串10个字节，i4整数四个字节，f8浮点数八个字节，固定字节\n",
    "my_dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "47a41535-fe1c-4470-a961-22e32543376a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([('xiaowang', 30, 80.5), ('xiaoli', 28, 70.3),\n",
       "       ('xiaotian', 29, 78.6)],\n",
       "      dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f8')])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 构造异构数组\n",
    "my_arr=np.array(\n",
    "    [\n",
    "        ('xiaowang',30,80.5),\n",
    "        ('xiaoli',28,70.3),\n",
    "        ('xiaotian',29,78.6)\n",
    "        \n",
    "    ],\n",
    "    dtype=my_dtype\n",
    ")\n",
    "my_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d41eb00-dc8f-4526-8d9f-186e1b2069fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 针对异构数组的查询与操作\n",
    "# 使用列表的方式查询一行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "7224eb9b-a767-4a76-9e4e-8e7918f78d68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('xiaowang', 30, 80.5)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "42e3c359-bc10-4fae-836d-659098c3cee8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('xiaotian', 29, 78.6)"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12b271d2-1acd-4670-9716-2d2603defc41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用字典的方式查询一列"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "48f3250f-bc93-415c-9e73-2b257a0aec1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['xiaowang', 'xiaoli', 'xiaotian'], dtype='<U10')"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr['name']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "a7ed8ffd-2e7e-435b-9add-f5faac19cb90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([30, 28, 29])"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr['age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "d6f05c2e-4ceb-4eb8-84f6-66af0346b6ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 按条件查询"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "a5ce4719-975b-44f1-bf16-7aada5e636fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([('xiaowang', 30, 80.5), ('xiaotian', 29, 78.6)],\n",
       "      dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f8')])"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr[my_arr['age']>=29]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "ddc37a1f-8daf-4504-a441-5027e63279d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 按照多个条件查询"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "0e409242-62a6-4a02-898e-f38763abd8ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([('xiaoli', 31, 70.3)],\n",
       "      dtype=[('name', '<U10'), ('age', '<i4'), ('weight', '<f8')])"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr[(my_arr['age']>15)&(my_arr['weight']<75)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "772d4680-221f-49f4-987b-4ccef720723e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 对单列做逐元素计算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "9b27d882-7a1c-4e8c-9cc2-d0d9a1a0ccc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([33, 31, 32])"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr['age'] # 做过处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "908c8256-d4b2-4e8e-9934-5596cc4fa992",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_arr['age']+=1 # 做计算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "a905c61a-c347-474d-ba03-b18dbf97e2ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([34, 32, 33])"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_arr['age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4553525c-fe8f-42a5-8415-6a457d6b1430",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
