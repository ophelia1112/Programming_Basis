{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e1b88642-d5ac-4e7a-8148-8e5b5401f66b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Numpy常用数学统计函数\n",
    "# np.sum求和  np.prod求乘积  np.cumsum元素累积加和  np.comprod元素累计乘积  np.min最小值  np.max最大值  np.percentile 0-100百分位数\n",
    "# np.quantile 0-1分位数  np.median中位数  np.average加权平均，参数可指定weights  np.mean平均值  np.std标准差  np.var方差"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3fe8c939-6829-464b-9a7b-1af42c3a25ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 按照不同的轴axis计算：以上函数都能指定计算轴为行还是列，不指定则计算所有元素结果\n",
    "# 实践中机器学习经常需要将数据标准化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4daf45e5-d487-496a-99f5-9f9734a27303",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 数学统计函数演示"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "af48591e-6099-4eff-b866-91d764c42d71",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e3b30e15-ffac-4039-a85c-63922399231f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr=np.arange(12).reshape(3,4)\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4e62c590-4579-41b9-b6b4-476204f37b1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "66"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(arr) # 未指定数组，则为一维数组进行计算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7d7eaea5-ac35-4fca-9259-444b24af8465",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.prod(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1600739a-8982-431a-af78-8f248c48c013",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  3,  6, 10, 15, 21, 28, 36, 45, 55, 66])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.cumsum(arr) # 可以算累计收入"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8784bb19-2697-46dc-aa9f-d64b255758bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.cumprod(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3a63db18-2c71-420b-b46a-a8d2658fbea9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.min(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8db48712-0cda-4093-a91e-eb1a9d3ba4ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.max(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f330309e-3b80-4114-a254-c6850dc8b1ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.75, 5.5 , 8.25])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.percentile(arr,[25,50,75])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "76e5a5f1-4799-4111-b2f4-e2019a51744a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.75, 5.5 , 8.25])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.quantile(arr,[0.25,0.5,0.75])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7e03636c-d3ed-4535-8976-cb663a6c723b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.5"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.median(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d78b59bb-4dc3-40a8-93de-e8b80e3103be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.5"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "37f99070-f14d-40d7-98c2-dc5afa3b920a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.452052529534663"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.std(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2c1752bb-1007-4187-ac52-fd6bcf06d238",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11.916666666666666"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cd49ce1e-12fb-40f2-b6d6-9a86c5e5d566",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.68219381792448"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 加权平均\n",
    "# weights的shape需要和arr一样\n",
    "weights=np.random.rand(*arr.shape)\n",
    "np.average(arr,weights=weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6fcbd7e8-8f35-41ff-b055-80a618a19422",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Numpy的axis参数  可以计算边际效应\n",
    "# axis=0代表行，axis=1代表列\n",
    "# 对于sum,mean,media等聚合函数，axis=0代表把行消融掉（直接按照列计算） axis=1把列消融掉（直接按照行计算）；或者axis=0代表跨行计算 axis=1是跨列计算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "29296e84-aff5-41e3-9d41-9c10469b4504",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6bf66cfd-3d03-4e7e-9499-980056e09a16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([12, 15, 18, 21])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3cd7dd61-2ef6-40ed-8411-e715e120711b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6, 22, 38])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7a5b6f8d-0222-4f01-b9e8-de9a00843e79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  6,  8, 10],\n",
       "       [12, 15, 18, 21]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.cumsum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c5473076-ad7d-4284-bf00-95dd93084c70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  3,  6],\n",
       "       [ 4,  9, 15, 22],\n",
       "       [ 8, 17, 27, 38]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.cumsum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38b685b3-945c-4429-8599-385dc4ad55d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实例：机器学习将数据标准化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7189f4f0-d1bc-4c7f-ae57-48676ec5d638",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3],\n",
       "       [ 4,  5,  6,  7],\n",
       "       [ 8,  9, 10, 11]])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 对应到实体数据即每行对应一个样本数据，每列代表样本的一个特征，社科为例，数据标准化即对于机器学习与神经网络来说，不同列的量纲应该相同，训练收敛更快\n",
    "# 例如商品价格0-100，销量1-10000，数据无可比性，先进行标准化\n",
    "# 不同的列代表不同特征，需要行消融做计算，即axis=0，向下垂直计算\n",
    "# 标准化一般使用标准化公式进行计算，A=(A-mean(A,axis=0/))/std(A,axis=0)\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "02eddd5c-8887-413a-9a26-a3a12cbdc8cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4., 5., 6., 7.])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 计算每列均值\n",
    "mean=np.mean(arr,axis=0)\n",
    "mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9e552f04-5f9a-438d-9f5c-3aa1e355aab5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.26598632, 3.26598632, 3.26598632, 3.26598632])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 计算每列方差\n",
    "std=np.std(arr,axis=0)\n",
    "std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f483a2f4-1d1b-4133-b06b-433e2e3827a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-4., -4., -4., -4.],\n",
       "       [ 0.,  0.,  0.,  0.],\n",
       "       [ 4.,  4.,  4.,  4.]])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 计算分子，每行分别减去[4.,5.,6.,7.]叫做numpy广播，分别复制几行进行减处理\n",
    "fenzi=arr-mean\n",
    "fenzi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "cb39f1b0-59e9-448d-8810-4e8086670205",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.22474487, -1.22474487, -1.22474487, -1.22474487],\n",
       "       [ 0.        ,  0.        ,  0.        ,  0.        ],\n",
       "       [ 1.22474487,  1.22474487,  1.22474487,  1.22474487]])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "standard_result=fenzi/std\n",
    "standard_result\n",
    "# 标准化后的数据，中间是0，是因为本身数据很均匀"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "5a30e7a7-fb47-4c0c-adc7-2ce1e9147af6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 用随机数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "5ae48a59-bdcc-4d3f-b8de-eaa1efd63fa5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[47, 79, 73, 20],\n",
       "       [49, 71, 29, 93],\n",
       "       [42,  5, 21,  2]])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr2=np.random.randint(1,100,size=(3,4))\n",
    "arr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "6395c621-bca0-41cd-b17b-cf1a34cd14cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.33968311,  0.82429755,  1.39970842, -0.46593441],\n",
       "       [ 1.01904933,  0.58303973, -0.52489066,  1.3893317 ],\n",
       "       [-1.35873244, -1.40733728, -0.87481777, -0.92339729]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result=(arr2-np.mean(arr2,axis=0))/np.std(arr2,axis=0)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6a2afcb-0026-4113-83a2-63eec780cc94",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "be2fb595-15d6-4897-bdc8-8f425f34be1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实现数组中满足条件的个数的计算"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e8991cb8-3d81-477c-8406-e961326179b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 有一亿个单位的数组，求出里面小于5000的数字的数目"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a7059ec5-e340-4902-a42c-b337b57f96a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "e761d65e-9fe8-417b-bd87-bf7b46aaa815",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr=np.random.randint(1,10000,size=int(1e8)) # 10的八次方"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "ebd13906-e81c-4d72-a67c-e762eb26b391",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8360, 1066, 2117,   20, 4760, 7362, 1963, 6403, 8131, 3048])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr[:10] # 前十个元素"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "6e52cf85-f4cc-4353-a134-5b387699ffcd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100000000"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr.size # 一亿个数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "3cb38e5a-036c-41e6-8aca-c0f72fa82d90",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用python原生语法实现"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "7a54b96a-a71d-46ee-bc41-f02c30cc13c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "parr=list(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "dac9f2df-5839-423d-8f6c-e1f0b2e9720b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49993194"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len([x for x in parr if x>5000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "174547ba-7ca3-49b1-b19f-c09d27e9a7d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.98 s ± 491 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "# 记一下运行时间\n",
    "%timeit len([x for x in parr if x>5000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "477f159d-e84a-4bc9-a4f9-a4fd39e99ec2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用numpy向量化操作实现"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "6dd7b09c-b152-439e-baed-0c70ab5eeca8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49993194"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr[arr>5000].size # 用numpy计算数组中大于5000的数据个数，数组[传一个条件].大小，布尔索引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "8b048e11-b7f1-4e2d-a91f-2e20f178b07a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True, False, False, False, False,  True, False,  True,  True,\n",
       "       False])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(arr>5000)[:10] # （条件）[前十个数据]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "5ddbdfca-f1d5-44b7-a5dc-758ad22cb190",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "680 ms ± 43.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%timeit arr[arr>5000].size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3a429f0-0802-41c6-a562-7f7f56be1339",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
