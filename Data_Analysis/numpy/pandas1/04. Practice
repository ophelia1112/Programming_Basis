{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 596,
   "id": "e4767199-1f95-4b91-baeb-bb3bf0a370e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实战一\n",
    "# 包含知识点：日期聚合统计，处理缺失日期索引，excel合并，调整列表元素顺序的python原生语法以实现排列列表，绘制折线图与其他图形，机器学习\n",
    "# 建模（计量经济学分析模型，根据数据特征选取不同模型与统计方法），原始网站日志处理，寻找最影响运行的特征值，降低存储提升速度，在网页上显示表格，哑变量处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 597,
   "id": "eff17426-4bd5-417d-acab-21b83173ce2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点一、pandas对日期的快速处理——实现周，月，季度日期聚合处理\n",
    "# 日期处理的作用：将2018-01-01，1/1/2018等不同格式的日期映射成统一格式的对象，并在该对象的基础上实现操作\n",
    "# pd.to_datetime:函数，将字符串，列表，series变成日期形式\n",
    "# Timestamp:表示日期的对象形式，比如10000秒\n",
    "# DatetimeIndex:表示日期的对象列表形式\n",
    "# DatetimeIndex是Timestamp的列表形式，pd.to_datetime对单个日期字符串处理得到Timestamp，对日期字符串列表处理得到DatetimeIndex\n",
    "# 例如日期字符串'2019-11-30' → pd.to_datetime → pandas Timestamp对象 → DatetimeIndex是Timestamp的列表 → pandas DatetimeIndex对象\n",
    "# 日期字符串列表['2019-11-29','2019-11-30','2019-11-31'] → pd.to_datetime → pandas DatetimeIndex对象"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 598,
   "id": "2b229b63-df2f-47ed-9ad6-da9b938b3233",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 需求：统计每周，每月，每个季度的最高温度"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 599,
   "id": "635fdda2-0a35-4acf-a13e-325746563854",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ymd</th>\n",
       "      <th>bWendu</th>\n",
       "      <th>yWendu</th>\n",
       "      <th>tianqi</th>\n",
       "      <th>fengxiang</th>\n",
       "      <th>fengli</th>\n",
       "      <th>aqi</th>\n",
       "      <th>aqiInfo</th>\n",
       "      <th>aqiLevel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>59</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-01-02</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>阴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>49</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-01-03</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>多云</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-01-04</td>\n",
       "      <td>0</td>\n",
       "      <td>-8</td>\n",
       "      <td>阴</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-01-05</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>50</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>-5</td>\n",
       "      <td>-12</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>48</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>-3</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>40</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>-3</td>\n",
       "      <td>-12</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>2级</td>\n",
       "      <td>29</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>-2</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>31</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>-2</td>\n",
       "      <td>-10</td>\n",
       "      <td>多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>56</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>365 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            ymd bWendu yWendu tianqi fengxiang fengli  aqi aqiInfo  aqiLevel\n",
       "0    2018-01-01      3     -6   晴~多云       东北风   1-2级   59       良         2\n",
       "1    2018-01-02      2     -5   阴~多云       东北风   1-2级   49       优         1\n",
       "2    2018-01-03      2     -5     多云        北风   1-2级   28       优         1\n",
       "3    2018-01-04      0     -8      阴       东北风   1-2级   28       优         1\n",
       "4    2018-01-05      3     -6   多云~晴       西北风   1-2级   50       优         1\n",
       "..          ...    ...    ...    ...       ...    ...  ...     ...       ...\n",
       "360  2018-12-27     -5    -12   多云~晴       西北风     3级   48       优         1\n",
       "361  2018-12-28     -3    -11      晴       西北风     3级   40       优         1\n",
       "362  2018-12-29     -3    -12      晴       西北风     2级   29       优         1\n",
       "363  2018-12-30     -2    -11   晴~多云       东北风     1级   31       优         1\n",
       "364  2018-12-31     -2    -10     多云       东北风     1级   56       良         2\n",
       "\n",
       "[365 rows x 9 columns]"
      ]
     },
     "execution_count": 599,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "df=pd.read_csv('./datas/beijing_tianqi/beijing_tianqi_2018.csv')\n",
    "df.loc[:,'bWendu']=df['bWendu'].astype(str).str.replace('℃','').astype('int32')\n",
    "df.loc[:,'yWendu']=df['yWendu'].astype(str).str.replace('℃','').astype('int32')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 600,
   "id": "b8d13098-fac2-4b4a-8980-774caf4adf85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将日期列2018-12-12这种形式的日期列转换成pandas日期"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 601,
   "id": "3d2b0142-5880-47d0-bc96-5729deab2380",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ymd</th>\n",
       "      <th>bWendu</th>\n",
       "      <th>yWendu</th>\n",
       "      <th>tianqi</th>\n",
       "      <th>fengxiang</th>\n",
       "      <th>fengli</th>\n",
       "      <th>aqi</th>\n",
       "      <th>aqiInfo</th>\n",
       "      <th>aqiLevel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ymd</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-01</th>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>59</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>2018-01-02</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>阴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>49</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>2018-01-03</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>多云</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>2018-01-04</td>\n",
       "      <td>0</td>\n",
       "      <td>-8</td>\n",
       "      <td>阴</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>2018-01-05</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>50</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-27</th>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>-5</td>\n",
       "      <td>-12</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>48</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-28</th>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>-3</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>40</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-29</th>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>-3</td>\n",
       "      <td>-12</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>2级</td>\n",
       "      <td>29</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-30</th>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>-2</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>31</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>-2</td>\n",
       "      <td>-10</td>\n",
       "      <td>多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>56</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>365 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ymd bWendu yWendu tianqi fengxiang fengli  aqi aqiInfo  \\\n",
       "ymd                                                                         \n",
       "2018-01-01  2018-01-01      3     -6   晴~多云       东北风   1-2级   59       良   \n",
       "2018-01-02  2018-01-02      2     -5   阴~多云       东北风   1-2级   49       优   \n",
       "2018-01-03  2018-01-03      2     -5     多云        北风   1-2级   28       优   \n",
       "2018-01-04  2018-01-04      0     -8      阴       东北风   1-2级   28       优   \n",
       "2018-01-05  2018-01-05      3     -6   多云~晴       西北风   1-2级   50       优   \n",
       "...                ...    ...    ...    ...       ...    ...  ...     ...   \n",
       "2018-12-27  2018-12-27     -5    -12   多云~晴       西北风     3级   48       优   \n",
       "2018-12-28  2018-12-28     -3    -11      晴       西北风     3级   40       优   \n",
       "2018-12-29  2018-12-29     -3    -12      晴       西北风     2级   29       优   \n",
       "2018-12-30  2018-12-30     -2    -11   晴~多云       东北风     1级   31       优   \n",
       "2018-12-31  2018-12-31     -2    -10     多云       东北风     1级   56       良   \n",
       "\n",
       "            aqiLevel  \n",
       "ymd                   \n",
       "2018-01-01         2  \n",
       "2018-01-02         1  \n",
       "2018-01-03         1  \n",
       "2018-01-04         1  \n",
       "2018-01-05         1  \n",
       "...              ...  \n",
       "2018-12-27         1  \n",
       "2018-12-28         1  \n",
       "2018-12-29         1  \n",
       "2018-12-30         1  \n",
       "2018-12-31         2  \n",
       "\n",
       "[365 rows x 9 columns]"
      ]
     },
     "execution_count": 601,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.set_index(pd.to_datetime(df['ymd']),inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 602,
   "id": "0e99d2b1-0557-4f6d-9fda-d009b81a1448",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04',\n",
       "               '2018-01-05', '2018-01-06', '2018-01-07', '2018-01-08',\n",
       "               '2018-01-09', '2018-01-10',\n",
       "               ...\n",
       "               '2018-12-22', '2018-12-23', '2018-12-24', '2018-12-25',\n",
       "               '2018-12-26', '2018-12-27', '2018-12-28', '2018-12-29',\n",
       "               '2018-12-30', '2018-12-31'],\n",
       "              dtype='datetime64[ns]', name='ymd', length=365, freq=None)"
      ]
     },
     "execution_count": 602,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.index # 本身是一个DatetimeIndex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 603,
   "id": "9b7c2baf-cdd1-4245-a7a1-1b7e9c76f54c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2018-01-03 00:00:00')"
      ]
     },
     "execution_count": 603,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DatetimeIndex是Timestamp的列表形式，从DatetimeIndex中取出一个元素就是Timestamp形式\n",
    "df.index[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c960105a-6d40-43df-8cea-29098348dc6a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 604,
   "id": "a94829ab-924c-4cc0-a67e-ec6516a78ea6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方便的对DatetimeIndex进行查询"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 605,
   "id": "28e76742-6063-43b3-aeb5-1ea21a625ef2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ymd          2018-01-05\n",
       "bWendu                3\n",
       "yWendu               -6\n",
       "tianqi             多云~晴\n",
       "fengxiang           西北风\n",
       "fengli             1-2级\n",
       "aqi                  50\n",
       "aqiInfo               优\n",
       "aqiLevel              1\n",
       "Name: 2018-01-05 00:00:00, dtype: object"
      ]
     },
     "execution_count": 605,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 筛选固定的某一天天气\n",
    "df.loc['2018-01-05']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 606,
   "id": "288c99e1-53f4-4d03-8672-095f3c8278dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ymd</th>\n",
       "      <th>bWendu</th>\n",
       "      <th>yWendu</th>\n",
       "      <th>tianqi</th>\n",
       "      <th>fengxiang</th>\n",
       "      <th>fengli</th>\n",
       "      <th>aqi</th>\n",
       "      <th>aqiInfo</th>\n",
       "      <th>aqiLevel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ymd</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-01</th>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>59</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>2018-01-02</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>阴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>49</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>2018-01-03</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>多云</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>2018-01-04</td>\n",
       "      <td>0</td>\n",
       "      <td>-8</td>\n",
       "      <td>阴</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>2018-01-05</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>50</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ymd bWendu yWendu tianqi fengxiang fengli  aqi aqiInfo  \\\n",
       "ymd                                                                         \n",
       "2018-01-01  2018-01-01      3     -6   晴~多云       东北风   1-2级   59       良   \n",
       "2018-01-02  2018-01-02      2     -5   阴~多云       东北风   1-2级   49       优   \n",
       "2018-01-03  2018-01-03      2     -5     多云        北风   1-2级   28       优   \n",
       "2018-01-04  2018-01-04      0     -8      阴       东北风   1-2级   28       优   \n",
       "2018-01-05  2018-01-05      3     -6   多云~晴       西北风   1-2级   50       优   \n",
       "\n",
       "            aqiLevel  \n",
       "ymd                   \n",
       "2018-01-01         2  \n",
       "2018-01-02         1  \n",
       "2018-01-03         1  \n",
       "2018-01-04         1  \n",
       "2018-01-05         1  "
      ]
     },
     "execution_count": 606,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 日期区间\n",
    "df.loc['2018-01-01':'2018-01-05']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 607,
   "id": "37ce770a-880a-4de4-a984-f676479b5981",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ymd</th>\n",
       "      <th>bWendu</th>\n",
       "      <th>yWendu</th>\n",
       "      <th>tianqi</th>\n",
       "      <th>fengxiang</th>\n",
       "      <th>fengli</th>\n",
       "      <th>aqi</th>\n",
       "      <th>aqiInfo</th>\n",
       "      <th>aqiLevel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ymd</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-03-01</th>\n",
       "      <td>2018-03-01</td>\n",
       "      <td>8</td>\n",
       "      <td>-3</td>\n",
       "      <td>多云</td>\n",
       "      <td>西南风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>46</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-02</th>\n",
       "      <td>2018-03-02</td>\n",
       "      <td>9</td>\n",
       "      <td>-1</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>95</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-03</th>\n",
       "      <td>2018-03-03</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>多云~阴</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>214</td>\n",
       "      <td>重度污染</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-04</th>\n",
       "      <td>2018-03-04</td>\n",
       "      <td>7</td>\n",
       "      <td>-2</td>\n",
       "      <td>阴~多云</td>\n",
       "      <td>东南风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>144</td>\n",
       "      <td>轻度污染</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-05</th>\n",
       "      <td>2018-03-05</td>\n",
       "      <td>8</td>\n",
       "      <td>-3</td>\n",
       "      <td>晴</td>\n",
       "      <td>南风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>94</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ymd bWendu yWendu tianqi fengxiang fengli  aqi aqiInfo  \\\n",
       "ymd                                                                         \n",
       "2018-03-01  2018-03-01      8     -3     多云       西南风   1-2级   46       优   \n",
       "2018-03-02  2018-03-02      9     -1   晴~多云        北风   1-2级   95       良   \n",
       "2018-03-03  2018-03-03     13      3   多云~阴        北风   1-2级  214    重度污染   \n",
       "2018-03-04  2018-03-04      7     -2   阴~多云       东南风   1-2级  144    轻度污染   \n",
       "2018-03-05  2018-03-05      8     -3      晴        南风   1-2级   94       良   \n",
       "\n",
       "            aqiLevel  \n",
       "ymd                   \n",
       "2018-03-01         1  \n",
       "2018-03-02         2  \n",
       "2018-03-03         5  \n",
       "2018-03-04         3  \n",
       "2018-03-05         2  "
      ]
     },
     "execution_count": 607,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 月份前缀筛选\n",
    "df.loc['2018-03'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 608,
   "id": "59d0bc75-d9b2-4d34-8162-de005f2c028d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ymd</th>\n",
       "      <th>bWendu</th>\n",
       "      <th>yWendu</th>\n",
       "      <th>tianqi</th>\n",
       "      <th>fengxiang</th>\n",
       "      <th>fengli</th>\n",
       "      <th>aqi</th>\n",
       "      <th>aqiInfo</th>\n",
       "      <th>aqiLevel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ymd</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-03-01</th>\n",
       "      <td>2018-03-01</td>\n",
       "      <td>8</td>\n",
       "      <td>-3</td>\n",
       "      <td>多云</td>\n",
       "      <td>西南风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>46</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-02</th>\n",
       "      <td>2018-03-02</td>\n",
       "      <td>9</td>\n",
       "      <td>-1</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>95</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-03</th>\n",
       "      <td>2018-03-03</td>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>多云~阴</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>214</td>\n",
       "      <td>重度污染</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-04</th>\n",
       "      <td>2018-03-04</td>\n",
       "      <td>7</td>\n",
       "      <td>-2</td>\n",
       "      <td>阴~多云</td>\n",
       "      <td>东南风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>144</td>\n",
       "      <td>轻度污染</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-03-05</th>\n",
       "      <td>2018-03-05</td>\n",
       "      <td>8</td>\n",
       "      <td>-3</td>\n",
       "      <td>晴</td>\n",
       "      <td>南风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>94</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-26</th>\n",
       "      <td>2018-04-26</td>\n",
       "      <td>26</td>\n",
       "      <td>12</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>117</td>\n",
       "      <td>轻度污染</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-27</th>\n",
       "      <td>2018-04-27</td>\n",
       "      <td>25</td>\n",
       "      <td>13</td>\n",
       "      <td>晴</td>\n",
       "      <td>西南风</td>\n",
       "      <td>3-4级</td>\n",
       "      <td>112</td>\n",
       "      <td>轻度污染</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-28</th>\n",
       "      <td>2018-04-28</td>\n",
       "      <td>27</td>\n",
       "      <td>17</td>\n",
       "      <td>晴</td>\n",
       "      <td>西南风</td>\n",
       "      <td>3-4级</td>\n",
       "      <td>125</td>\n",
       "      <td>轻度污染</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-29</th>\n",
       "      <td>2018-04-29</td>\n",
       "      <td>30</td>\n",
       "      <td>16</td>\n",
       "      <td>多云</td>\n",
       "      <td>南风</td>\n",
       "      <td>3-4级</td>\n",
       "      <td>193</td>\n",
       "      <td>中度污染</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-30</th>\n",
       "      <td>2018-04-30</td>\n",
       "      <td>24</td>\n",
       "      <td>14</td>\n",
       "      <td>多云</td>\n",
       "      <td>南风</td>\n",
       "      <td>3-4级</td>\n",
       "      <td>62</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ymd bWendu yWendu tianqi fengxiang fengli  aqi aqiInfo  \\\n",
       "ymd                                                                         \n",
       "2018-03-01  2018-03-01      8     -3     多云       西南风   1-2级   46       优   \n",
       "2018-03-02  2018-03-02      9     -1   晴~多云        北风   1-2级   95       良   \n",
       "2018-03-03  2018-03-03     13      3   多云~阴        北风   1-2级  214    重度污染   \n",
       "2018-03-04  2018-03-04      7     -2   阴~多云       东南风   1-2级  144    轻度污染   \n",
       "2018-03-05  2018-03-05      8     -3      晴        南风   1-2级   94       良   \n",
       "...                ...    ...    ...    ...       ...    ...  ...     ...   \n",
       "2018-04-26  2018-04-26     26     12   多云~晴       西北风   1-2级  117    轻度污染   \n",
       "2018-04-27  2018-04-27     25     13      晴       西南风   3-4级  112    轻度污染   \n",
       "2018-04-28  2018-04-28     27     17      晴       西南风   3-4级  125    轻度污染   \n",
       "2018-04-29  2018-04-29     30     16     多云        南风   3-4级  193    中度污染   \n",
       "2018-04-30  2018-04-30     24     14     多云        南风   3-4级   62       良   \n",
       "\n",
       "            aqiLevel  \n",
       "ymd                   \n",
       "2018-03-01         1  \n",
       "2018-03-02         2  \n",
       "2018-03-03         5  \n",
       "2018-03-04         3  \n",
       "2018-03-05         2  \n",
       "...              ...  \n",
       "2018-04-26         3  \n",
       "2018-04-27         3  \n",
       "2018-04-28         3  \n",
       "2018-04-29         4  \n",
       "2018-04-30         2  \n",
       "\n",
       "[61 rows x 9 columns]"
      ]
     },
     "execution_count": 608,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 月份前缀区间筛选\n",
    "df.loc['2018-03':'2018-04']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 609,
   "id": "cdd9a9dd-fc97-42c0-a6ed-dceff36f2e24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2018-03-01', '2018-03-02', '2018-03-03', '2018-03-04',\n",
       "               '2018-03-05', '2018-03-06', '2018-03-07', '2018-03-08',\n",
       "               '2018-03-09', '2018-03-10', '2018-03-11', '2018-03-12',\n",
       "               '2018-03-13', '2018-03-14', '2018-03-15', '2018-03-16',\n",
       "               '2018-03-17', '2018-03-18', '2018-03-19', '2018-03-20',\n",
       "               '2018-03-21', '2018-03-22', '2018-03-23', '2018-03-24',\n",
       "               '2018-03-25', '2018-03-26', '2018-03-27', '2018-03-28',\n",
       "               '2018-03-29', '2018-03-30', '2018-03-31', '2018-04-01',\n",
       "               '2018-04-02', '2018-04-03', '2018-04-04', '2018-04-05',\n",
       "               '2018-04-06', '2018-04-07', '2018-04-08', '2018-04-09',\n",
       "               '2018-04-10', '2018-04-11', '2018-04-12', '2018-04-13',\n",
       "               '2018-04-14', '2018-04-15', '2018-04-16', '2018-04-17',\n",
       "               '2018-04-18', '2018-04-19', '2018-04-20', '2018-04-21',\n",
       "               '2018-04-22', '2018-04-23', '2018-04-24', '2018-04-25',\n",
       "               '2018-04-26', '2018-04-27', '2018-04-28', '2018-04-29',\n",
       "               '2018-04-30'],\n",
       "              dtype='datetime64[ns]', name='ymd', freq=None)"
      ]
     },
     "execution_count": 609,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc['2018-03':'2018-04'].index # 索引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 610,
   "id": "9c79ecc6-c7be-42f5-a091-349daa333068",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ymd</th>\n",
       "      <th>bWendu</th>\n",
       "      <th>yWendu</th>\n",
       "      <th>tianqi</th>\n",
       "      <th>fengxiang</th>\n",
       "      <th>fengli</th>\n",
       "      <th>aqi</th>\n",
       "      <th>aqiInfo</th>\n",
       "      <th>aqiLevel</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ymd</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-01-01</th>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>59</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-02</th>\n",
       "      <td>2018-01-02</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>阴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>49</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-03</th>\n",
       "      <td>2018-01-03</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>多云</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-04</th>\n",
       "      <td>2018-01-04</td>\n",
       "      <td>0</td>\n",
       "      <td>-8</td>\n",
       "      <td>阴</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-01-05</th>\n",
       "      <td>2018-01-05</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>50</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-27</th>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>-5</td>\n",
       "      <td>-12</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>48</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-28</th>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>-3</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>40</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-29</th>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>-3</td>\n",
       "      <td>-12</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>2级</td>\n",
       "      <td>29</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-30</th>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>-2</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>31</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>-2</td>\n",
       "      <td>-10</td>\n",
       "      <td>多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>56</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>365 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ymd bWendu yWendu tianqi fengxiang fengli  aqi aqiInfo  \\\n",
       "ymd                                                                         \n",
       "2018-01-01  2018-01-01      3     -6   晴~多云       东北风   1-2级   59       良   \n",
       "2018-01-02  2018-01-02      2     -5   阴~多云       东北风   1-2级   49       优   \n",
       "2018-01-03  2018-01-03      2     -5     多云        北风   1-2级   28       优   \n",
       "2018-01-04  2018-01-04      0     -8      阴       东北风   1-2级   28       优   \n",
       "2018-01-05  2018-01-05      3     -6   多云~晴       西北风   1-2级   50       优   \n",
       "...                ...    ...    ...    ...       ...    ...  ...     ...   \n",
       "2018-12-27  2018-12-27     -5    -12   多云~晴       西北风     3级   48       优   \n",
       "2018-12-28  2018-12-28     -3    -11      晴       西北风     3级   40       优   \n",
       "2018-12-29  2018-12-29     -3    -12      晴       西北风     2级   29       优   \n",
       "2018-12-30  2018-12-30     -2    -11   晴~多云       东北风     1级   31       优   \n",
       "2018-12-31  2018-12-31     -2    -10     多云       东北风     1级   56       良   \n",
       "\n",
       "            aqiLevel  \n",
       "ymd                   \n",
       "2018-01-01         2  \n",
       "2018-01-02         1  \n",
       "2018-01-03         1  \n",
       "2018-01-04         1  \n",
       "2018-01-05         1  \n",
       "...              ...  \n",
       "2018-12-27         1  \n",
       "2018-12-28         1  \n",
       "2018-12-29         1  \n",
       "2018-12-30         1  \n",
       "2018-12-31         2  \n",
       "\n",
       "[365 rows x 9 columns]"
      ]
     },
     "execution_count": 610,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 按年份查询\n",
    "df.loc['2018']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab36fd84-9b8f-4dde-99f8-d9efd43c0e39",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 611,
   "id": "3327b445-159b-46a1-9023-674dc8976d95",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方便获取周，月，季度\n",
    "# Timestamp,DatetimeIndex支持大量的属性获取日期分量\n",
    "# https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 612,
   "id": "d8debec8-22eb-4876-b885-04fc31b8bfea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ymd\n",
       "2018-01-01     1\n",
       "2018-01-02     1\n",
       "2018-01-03     1\n",
       "2018-01-04     1\n",
       "2018-01-05     1\n",
       "              ..\n",
       "2018-12-27    52\n",
       "2018-12-28    52\n",
       "2018-12-29    52\n",
       "2018-12-30    52\n",
       "2018-12-31     1\n",
       "Name: week, Length: 365, dtype: UInt32"
      ]
     },
     "execution_count": 612,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 周数字列表，较新的版本周的计算与表示\n",
    "df.index.isocalendar().week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 613,
   "id": "d07eaa4e-215d-4631-9c66-9fc6b9e1ce0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,\n",
       "       ...\n",
       "       12, 12, 12, 12, 12, 12, 12, 12, 12, 12],\n",
       "      dtype='int32', name='ymd', length=365)"
      ]
     },
     "execution_count": 613,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 月数字列表\n",
    "df.index.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 614,
   "id": "2ab04e60-6484-47e6-85d6-e3fe7eb3c0c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       ...\n",
       "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n",
       "      dtype='int32', name='ymd', length=365)"
      ]
     },
     "execution_count": 614,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 季度数字列表\n",
    "df.index.quarter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7a7b3a5-5442-4cc4-bcbb-47fbf060e245",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 615,
   "id": "ef6cb1ae-73d6-49df-b64c-c65e319d63cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 统计每周每月每个季度最高温"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 616,
   "id": "6ba6674f-2b15-41d4-af76-30707fa296c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "week\n",
       "1     3\n",
       "2     6\n",
       "3     7\n",
       "4    -1\n",
       "5     4\n",
       "Name: bWendu, dtype: object"
      ]
     },
     "execution_count": 616,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 每周最高温\n",
    "df.groupby(df.index.isocalendar().week)['bWendu'].max().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 617,
   "id": "51e9aaba-abfd-43b3-91a6-776a8cbfefa4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='week'>"
      ]
     },
     "execution_count": 617,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby(df.index.isocalendar().week)['bWendu'].max().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 618,
   "id": "30e8a7e9-5526-4b20-8e10-b2a48562ef6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ymd\n",
       "1      7\n",
       "2     12\n",
       "3     27\n",
       "4     30\n",
       "5     35\n",
       "6     38\n",
       "7     37\n",
       "8     36\n",
       "9     31\n",
       "10    25\n",
       "11    18\n",
       "12    10\n",
       "Name: bWendu, dtype: object"
      ]
     },
     "execution_count": 618,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 每月最高温\n",
    "df.groupby(df.index.month)['bWendu'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 619,
   "id": "32ab0002-7ed3-4e3e-9a3b-ce2177c39bc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='ymd'>"
      ]
     },
     "execution_count": 619,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby(df.index.month)['bWendu'].max().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 620,
   "id": "f807defe-7d9e-4c9c-8a56-27305621a7af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ymd\n",
       "1    27\n",
       "2    38\n",
       "3    37\n",
       "4    25\n",
       "Name: bWendu, dtype: object"
      ]
     },
     "execution_count": 620,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 每季度最高温\n",
    "df.groupby(df.index.quarter)['bWendu'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 621,
   "id": "b74519c6-b2ac-48b5-9934-222e95367db0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='ymd'>"
      ]
     },
     "execution_count": 621,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby(df.index.quarter)['bWendu'].max().plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2652c1c8-12f8-476a-a656-b8ed210f2bbb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07d00d29-3b4c-41e3-9dc9-8a8285daec2c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 622,
   "id": "c7b888d7-4a3e-4879-bfda-c7e38e1408ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点二、pandas处理日期索引的缺失\n",
    "# 按照日期统计的数据缺失了某天，导致数据不全，对日期进行填补\n",
    "# 实现方法：DataFrame.reindex 调整DateFrame的索引以适应新的索引\n",
    "#          DateFrame.resample 对时间序列重采样，补充缺失值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 623,
   "id": "0f8277c6-12f6-403e-a6b6-c50fb2258489",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 624,
   "id": "2ca213b4-0a26-4f99-bb22-e87cf38d4852",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pdate</th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-12-01</td>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-12-02</td>\n",
       "      <td>200</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-12-04</td>\n",
       "      <td>400</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-12-05</td>\n",
       "      <td>500</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        pdate   pv  uv\n",
       "0  2019-12-01  100  10\n",
       "1  2019-12-02  200  20\n",
       "2  2019-12-04  400  40\n",
       "3  2019-12-05  500  50"
      ]
     },
     "execution_count": 624,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.DataFrame({\n",
    "    'pdate':['2019-12-01','2019-12-02','2019-12-04','2019-12-05'],\n",
    "    'pv':[100,200,400,500],\n",
    "    'uv':[10,20,40,50],\n",
    "})\n",
    "df\n",
    "# 构造的日期与数据\n",
    "# 缺失数据2019-12-03"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 625,
   "id": "dc28589e-dae0-4e7a-8295-1577f332d55a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='pdate'>"
      ]
     },
     "execution_count": 625,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.set_index('pdate').plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 626,
   "id": "69c0c6ec-0cf6-4acc-b9c5-1e0f12327136",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法一、使用pandas.reindex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 627,
   "id": "a980e551-61a9-4bd8-8a4b-e6dee49724e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdate</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-01</th>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>200</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04</th>\n",
       "      <td>400</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-05</th>\n",
       "      <td>500</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             pv  uv\n",
       "pdate              \n",
       "2019-12-01  100  10\n",
       "2019-12-02  200  20\n",
       "2019-12-04  400  40\n",
       "2019-12-05  500  50"
      ]
     },
     "execution_count": 627,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 首先转化df的索引为规范化的日期索引\n",
    "df_date=df.set_index('pdate')\n",
    "df_date\n",
    "# 首先设置日期列pdate为索引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 628,
   "id": "59eac466-5f7b-4ff6-81ac-bbbc2f55a883",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['2019-12-01', '2019-12-02', '2019-12-04', '2019-12-05'], dtype='object', name='pdate')"
      ]
     },
     "execution_count": 628,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_date.index # 索引类型为object字符串的"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 629,
   "id": "586ff393-4a47-4ddd-a0f6-38743e5ff40a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdate</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-01</th>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>200</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04</th>\n",
       "      <td>400</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-05</th>\n",
       "      <td>500</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             pv  uv\n",
       "pdate              \n",
       "2019-12-01  100  10\n",
       "2019-12-02  200  20\n",
       "2019-12-04  400  40\n",
       "2019-12-05  500  50"
      ]
     },
     "execution_count": 629,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 将df的索引设置为日期索引\n",
    "df_date=df_date.set_index(pd.to_datetime(df_date.index))\n",
    "df_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 630,
   "id": "146b3580-2599-4e31-974f-ecd1fbb40a94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2019-12-01', '2019-12-02', '2019-12-04', '2019-12-05'], dtype='datetime64[ns]', name='pdate', freq=None)"
      ]
     },
     "execution_count": 630,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_date.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 631,
   "id": "3eccc3f7-2efb-44ac-b718-bb9df998879c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2019-12-01', '2019-12-02', '2019-12-03', '2019-12-04',\n",
       "               '2019-12-05'],\n",
       "              dtype='datetime64[ns]', freq='D')"
      ]
     },
     "execution_count": 631,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 使用pandas.reindex填充缺失索引\n",
    "# 首先生成完整日期序列并将其设置为日期索引，确保日期能够进行匹配\n",
    "pdates=pd.date_range(start='2019-12-01',end='2019-12-05')\n",
    "pdates=pd.to_datetime(pdates)\n",
    "pdates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 632,
   "id": "35aa751a-ab9b-4eb9-b334-8a18305b98a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-01</th>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>200</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-03</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04</th>\n",
       "      <td>400</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-05</th>\n",
       "      <td>500</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             pv  uv\n",
       "2019-12-01  100  10\n",
       "2019-12-02  200  20\n",
       "2019-12-03    0   0\n",
       "2019-12-04  400  40\n",
       "2019-12-05  500  50"
      ]
     },
     "execution_count": 632,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_date_new=df_date.reindex(pdates,fill_value=0)\n",
    "df_date_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 633,
   "id": "8db52ff6-2dd2-42b2-8f4f-a989fadc9817",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 633,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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djFlyhQaNWpESkoKHh4eNGnSpNztO3TowOrVqxk9enTNDioiIiI1xqECTF5eHikpKRQVFZGamsrKlSuZMWMGt912GyNGjMDNzY2YmBjuvPNOZs2aRatWrUhKSirdcbdr164899xz3HzzzTRv3pwHHniAwsJCvv32W6ZNm2bvpyciIiI24lABZuXKlTRo0AAPDw/q1q1Lx44deeWVVxg5ciRubtYDpr799lv+7//+j9GjR3Pq1CnCw8Pp06cPYWFhAPTr149ly5bxz3/+k5kzZxIQEECfPn3s+bRERETExhzmKCQRERGRinL488CIiIiIXEoBRkRERJyOAoyIiIg4HQUYERERcToKMCIiIuJ07BJgZsyYQbdu3fD39yc0NJQ777yTffv2ldkmNzeXiRMnUq9ePfz8/Bg6dCipqalltnn88cfp0qULXl5edOrUqdzH+vjjj+nUqRM+Pj40btyYl156qbqeloiIiNQQuwSYdevWMXHiRDZu3MiqVasoKChg4MCBZGdnl24zZcoUvvrqK5YtW8a6detISkri7rvvvuy+HnnkEe6///5yH2fFihUMGzaMCRMmsHv3bubOncvs2bN57bXXqu25iYiISPVziPPAnDp1itDQUNatW0efPn3IyMggJCSExYsXc8899wCQkJBAmzZtiIuLo2fPnmW+/u9//zuff/4527dvL3P9Qw89REFBAcuWLSu97tVXX2XWrFkkJiZiMBiq/bmJiIiI7TnEPjAZGRkABAcHAxAfH09BQQEDBgwo3SY6OpqoqCji4uIqfL95eXnUqVOnzHXe3t6cOHGCY8eO2WByERERsQe7Bxiz2cwTTzxB7969adeuHQApKSkYjcbShukSYWFhpKSkVPi+Y2Nj+eyzz1i9ejVms5n9+/fz3//+F4Dk5GSbPQcRERGpWXYPMBMnTmT37t0sWbLE5vc9duxYJk2axG233YbRaKRnz5488MADAKXdSiIiIuJ87PouPmnSJL7++mt+/PFHGjVqVHp9eHg4+fn5pKenl9k+NTWV8PDwCt+/wWDgxRdfJCsri2PHjpGSkkL37t0BaNasmU2eg4iIiNQ8uwQYi8XCpEmTWL58OWvWrKFp06Zlbu/SpQuenp6sXr269Lp9+/aRmJhITExMpR/P3d2dhg0bYjQa+eijj4iJiSEkJKTKz0NERETsw8MeDzpx4kQWL17MF198gb+/f+l+LYGBgXh7exMYGMiYMWOYOnUqwcHBBAQEMHnyZGJiYsocgXTw4EGysrJISUnh/PnzpUchtW3bFqPRyOnTp/nkk0/o168fubm5LFiwoPSwbBEREXFedjmM+kqHLy9YsIBRo0YB1hPZ/fnPf+ajjz4iLy+P2NhY5s6dW+YjpH79+pUbRo4cOUKTJk04ffo0t99+O7t27cJisRATE8O///1vevToUS3PS0RERGqGQ5wHRkRERKQydCiOiIiIOB0FGBEREXE6CjAiIiLidBRgRERExOkowIiIiIjTUYARERERp6MAIyIiIk5HAUZEREScjgKMiIiIOB0FGBEREXE6CjAiIiLidP4fi9yTvpbN37oAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_date_new.plot()\n",
    "# 可以得知数据是否是有问题的，获得对数据的全局把握"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef9c04a0-362a-4b41-99be-4ffa9cfac20d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 634,
   "id": "b87422eb-0775-45e5-bb25-859c2d52b9fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法2、使用pandas.resample方法"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 635,
   "id": "36781411-2d92-4261-a17f-02fa69be3005",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pdate</th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-12-01</td>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-12-02</td>\n",
       "      <td>200</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-12-04</td>\n",
       "      <td>400</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-12-05</td>\n",
       "      <td>500</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        pdate   pv  uv\n",
       "0  2019-12-01  100  10\n",
       "1  2019-12-02  200  20\n",
       "2  2019-12-04  400  40\n",
       "3  2019-12-05  500  50"
      ]
     },
     "execution_count": 635,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 先把索引变为日期索引\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 636,
   "id": "f7abd841-2c2c-46f0-a442-20527584c758",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdate</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-01</th>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>200</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04</th>\n",
       "      <td>400</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-05</th>\n",
       "      <td>500</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             pv  uv\n",
       "pdate              \n",
       "2019-12-01  100  10\n",
       "2019-12-02  200  20\n",
       "2019-12-04  400  40\n",
       "2019-12-05  500  50"
      ]
     },
     "execution_count": 636,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new2=df.set_index(pd.to_datetime(df['pdate'])).drop('pdate',axis=1) # 设置索引，并将pdate设置为日期格式，但是会保留原来的还没被转化为日期索引的列，所以删掉\n",
    "df_new2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 637,
   "id": "9602b884-1702-413b-8719-4e95f4364a9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2019-12-01', '2019-12-02', '2019-12-04', '2019-12-05'], dtype='datetime64[ns]', name='pdate', freq=None)"
      ]
     },
     "execution_count": 637,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new2.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 638,
   "id": "48c957ad-7b81-4c7a-bc04-f5b43828037f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用dataframe的resample方法按照每天进行重采样\n",
    "# resample：改变数据的时间频率，比如把天数据变成月份，或者把小时数据变成分钟级别\n",
    "# resample语法:(DataFrame or Series).resample(arguments).(aggregate function) # 传一些参数与加一个聚合函数\n",
    "# resample采样规则参数：https://pandas.pydata.org/pandas-docs/stable/user guide/timeseries.html#offset-aliases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 639,
   "id": "b0745e7d-65c3-47e9-8fd2-47686384c9d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdate</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-01</th>\n",
       "      <td>100.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>200.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-03</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04</th>\n",
       "      <td>400.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-05</th>\n",
       "      <td>500.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               pv    uv\n",
       "pdate                  \n",
       "2019-12-01  100.0  10.0\n",
       "2019-12-02  200.0  20.0\n",
       "2019-12-03    0.0   0.0\n",
       "2019-12-04  400.0  40.0\n",
       "2019-12-05  500.0  50.0"
      ]
     },
     "execution_count": 639,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 采样会让区间变成一个值，需要指定是mean还是其他采样值\n",
    "df_new2=df_new2.resample('D').mean().fillna(0) # 按天采样，按照常理，传一个平均值函数，因为每天只有一个值，故取平均值还是本身；12.3无数据，填充0\n",
    "df_new2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 640,
   "id": "c8ea8b92-a33e-46a4-9788-41054dff0e04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdate</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-01</th>\n",
       "      <td>150.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-03</th>\n",
       "      <td>200.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-05</th>\n",
       "      <td>500.0</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               pv    uv\n",
       "pdate                  \n",
       "2019-12-01  150.0  15.0\n",
       "2019-12-03  200.0  20.0\n",
       "2019-12-05  500.0  50.0"
      ]
     },
     "execution_count": 640,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new2.resample('2D').mean() # 变为每两天一个数据，数据来源，12.1数据来源于1号2号数据加和除以2，3号数据来源于3号4号数据加和除以2，5号只有一天数据，不变"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16f52edc-49d3-47c6-be0b-ce3479f6218f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7a60241-72b9-47eb-acf4-04290464e520",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 641,
   "id": "73916494-cff3-4436-ad5e-32c4172a0d6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点三、pandas实现excel的vlookup，并在指定列后面输出\n",
    "# vlookup是将两个excel进行合并的功能，按照指定列进行关联，两个或多个表格有共同列\n",
    "# 数据探索使用pandas和jupyter notebook\n",
    "# vlookup操作：两个excel有相同列，按照相同列的轴合成大excel，可能只需要第二个列少量的信息，新增的来自第二个excel的列需要放在第一个excel指定的列后面，输出新excel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 642,
   "id": "eb0fd12e-d88f-4564-9feb-1053fe767fa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取两个数据表\n",
    "import pandas as pd\n",
    "# 学生成绩表\n",
    "df_grade=pd.read_excel('./course_datas/c23_excel_vlookup/学生成绩表.xlsx')\n",
    "# 学生信息表\n",
    "df_sinfo=pd.read_excel('./course_datas/c23_excel_vlookup/学生信息表.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 643,
   "id": "c0bc5b5c-07e3-4618-bfe2-42074c41d24d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 需求：将学生信息表的姓名性别添加到学生成绩表，并在学号列后面"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 644,
   "id": "7cbad6eb-7227-4c87-9476-d328735d120c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>学号</th>\n",
       "      <th>姓名</th>\n",
       "      <th>性别</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>S001</td>\n",
       "      <td>怠涵</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>S002</td>\n",
       "      <td>婉清</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>S003</td>\n",
       "      <td>溪榕</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>S004</td>\n",
       "      <td>漠涓</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>S005</td>\n",
       "      <td>祈博</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>S006</td>\n",
       "      <td>孝冉</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>S007</td>\n",
       "      <td>乾名</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>S008</td>\n",
       "      <td>炜然</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>S009</td>\n",
       "      <td>晨阳</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>S010</td>\n",
       "      <td>轻涵</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>S011</td>\n",
       "      <td>晨洋</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>S012</td>\n",
       "      <td>馨懿</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>S013</td>\n",
       "      <td>冉莼</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>S014</td>\n",
       "      <td>晨艳</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>S015</td>\n",
       "      <td>云良</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>S016</td>\n",
       "      <td>力博</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>S017</td>\n",
       "      <td>惟然</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>S018</td>\n",
       "      <td>清林</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>S019</td>\n",
       "      <td>冬梅</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>S020</td>\n",
       "      <td>箐莲</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>S021</td>\n",
       "      <td>仪博</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>S022</td>\n",
       "      <td>馨苒</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>S023</td>\n",
       "      <td>云霖</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>S024</td>\n",
       "      <td>海彤</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      学号  姓名 性别\n",
       "0   S001  怠涵  女\n",
       "1   S002  婉清  女\n",
       "2   S003  溪榕  女\n",
       "3   S004  漠涓  女\n",
       "4   S005  祈博  女\n",
       "5   S006  孝冉  女\n",
       "6   S007  乾名  女\n",
       "7   S008  炜然  女\n",
       "8   S009  晨阳  男\n",
       "9   S010  轻涵  男\n",
       "10  S011  晨洋  男\n",
       "11  S012  馨懿  男\n",
       "12  S013  冉莼  男\n",
       "13  S014  晨艳  男\n",
       "14  S015  云良  男\n",
       "15  S016  力博  男\n",
       "16  S017  惟然  男\n",
       "17  S018  清林  女\n",
       "18  S019  冬梅  女\n",
       "19  S020  箐莲  女\n",
       "20  S021  仪博  女\n",
       "21  S022  馨苒  男\n",
       "22  S023  云霖  男\n",
       "23  S024  海彤  男"
      ]
     },
     "execution_count": 644,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 实现两个表的关联\n",
    "df_sinfo=df_sinfo[['学号','姓名','性别']]\n",
    "df_sinfo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 645,
   "id": "141535d3-5ae5-40c7-80dd-c088626e6ea1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>班级</th>\n",
       "      <th>学号</th>\n",
       "      <th>语文成绩</th>\n",
       "      <th>数学成绩</th>\n",
       "      <th>英语成绩</th>\n",
       "      <th>姓名</th>\n",
       "      <th>性别</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C01</td>\n",
       "      <td>S001</td>\n",
       "      <td>99</td>\n",
       "      <td>84</td>\n",
       "      <td>88</td>\n",
       "      <td>怠涵</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>C01</td>\n",
       "      <td>S002</td>\n",
       "      <td>66</td>\n",
       "      <td>95</td>\n",
       "      <td>77</td>\n",
       "      <td>婉清</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C01</td>\n",
       "      <td>S003</td>\n",
       "      <td>68</td>\n",
       "      <td>68</td>\n",
       "      <td>61</td>\n",
       "      <td>溪榕</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>C01</td>\n",
       "      <td>S004</td>\n",
       "      <td>63</td>\n",
       "      <td>66</td>\n",
       "      <td>82</td>\n",
       "      <td>漠涓</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>C01</td>\n",
       "      <td>S005</td>\n",
       "      <td>72</td>\n",
       "      <td>95</td>\n",
       "      <td>94</td>\n",
       "      <td>祈博</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>C01</td>\n",
       "      <td>S006</td>\n",
       "      <td>60</td>\n",
       "      <td>99</td>\n",
       "      <td>71</td>\n",
       "      <td>孝冉</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>C01</td>\n",
       "      <td>S007</td>\n",
       "      <td>65</td>\n",
       "      <td>95</td>\n",
       "      <td>91</td>\n",
       "      <td>乾名</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>C01</td>\n",
       "      <td>S008</td>\n",
       "      <td>87</td>\n",
       "      <td>92</td>\n",
       "      <td>97</td>\n",
       "      <td>炜然</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>C01</td>\n",
       "      <td>S009</td>\n",
       "      <td>87</td>\n",
       "      <td>68</td>\n",
       "      <td>63</td>\n",
       "      <td>晨阳</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>C01</td>\n",
       "      <td>S010</td>\n",
       "      <td>66</td>\n",
       "      <td>88</td>\n",
       "      <td>74</td>\n",
       "      <td>轻涵</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>C01</td>\n",
       "      <td>S011</td>\n",
       "      <td>79</td>\n",
       "      <td>83</td>\n",
       "      <td>68</td>\n",
       "      <td>晨洋</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>C01</td>\n",
       "      <td>S012</td>\n",
       "      <td>68</td>\n",
       "      <td>73</td>\n",
       "      <td>63</td>\n",
       "      <td>馨懿</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>C01</td>\n",
       "      <td>S013</td>\n",
       "      <td>83</td>\n",
       "      <td>62</td>\n",
       "      <td>68</td>\n",
       "      <td>冉莼</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>C01</td>\n",
       "      <td>S014</td>\n",
       "      <td>87</td>\n",
       "      <td>68</td>\n",
       "      <td>99</td>\n",
       "      <td>晨艳</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>C01</td>\n",
       "      <td>S015</td>\n",
       "      <td>99</td>\n",
       "      <td>86</td>\n",
       "      <td>83</td>\n",
       "      <td>云良</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>C01</td>\n",
       "      <td>S016</td>\n",
       "      <td>62</td>\n",
       "      <td>91</td>\n",
       "      <td>66</td>\n",
       "      <td>力博</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>C01</td>\n",
       "      <td>S017</td>\n",
       "      <td>100</td>\n",
       "      <td>65</td>\n",
       "      <td>95</td>\n",
       "      <td>惟然</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>C01</td>\n",
       "      <td>S018</td>\n",
       "      <td>95</td>\n",
       "      <td>95</td>\n",
       "      <td>73</td>\n",
       "      <td>清林</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>C01</td>\n",
       "      <td>S019</td>\n",
       "      <td>81</td>\n",
       "      <td>81</td>\n",
       "      <td>84</td>\n",
       "      <td>冬梅</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>C01</td>\n",
       "      <td>S020</td>\n",
       "      <td>99</td>\n",
       "      <td>75</td>\n",
       "      <td>70</td>\n",
       "      <td>箐莲</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>C01</td>\n",
       "      <td>S021</td>\n",
       "      <td>97</td>\n",
       "      <td>62</td>\n",
       "      <td>96</td>\n",
       "      <td>仪博</td>\n",
       "      <td>女</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>C01</td>\n",
       "      <td>S022</td>\n",
       "      <td>99</td>\n",
       "      <td>100</td>\n",
       "      <td>71</td>\n",
       "      <td>馨苒</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>C01</td>\n",
       "      <td>S023</td>\n",
       "      <td>86</td>\n",
       "      <td>99</td>\n",
       "      <td>87</td>\n",
       "      <td>云霖</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>C01</td>\n",
       "      <td>S024</td>\n",
       "      <td>97</td>\n",
       "      <td>71</td>\n",
       "      <td>63</td>\n",
       "      <td>海彤</td>\n",
       "      <td>男</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     班级    学号  语文成绩  数学成绩  英语成绩  姓名 性别\n",
       "0   C01  S001    99    84    88  怠涵  女\n",
       "1   C01  S002    66    95    77  婉清  女\n",
       "2   C01  S003    68    68    61  溪榕  女\n",
       "3   C01  S004    63    66    82  漠涓  女\n",
       "4   C01  S005    72    95    94  祈博  女\n",
       "5   C01  S006    60    99    71  孝冉  女\n",
       "6   C01  S007    65    95    91  乾名  女\n",
       "7   C01  S008    87    92    97  炜然  女\n",
       "8   C01  S009    87    68    63  晨阳  男\n",
       "9   C01  S010    66    88    74  轻涵  男\n",
       "10  C01  S011    79    83    68  晨洋  男\n",
       "11  C01  S012    68    73    63  馨懿  男\n",
       "12  C01  S013    83    62    68  冉莼  男\n",
       "13  C01  S014    87    68    99  晨艳  男\n",
       "14  C01  S015    99    86    83  云良  男\n",
       "15  C01  S016    62    91    66  力博  男\n",
       "16  C01  S017   100    65    95  惟然  男\n",
       "17  C01  S018    95    95    73  清林  女\n",
       "18  C01  S019    81    81    84  冬梅  女\n",
       "19  C01  S020    99    75    70  箐莲  女\n",
       "20  C01  S021    97    62    96  仪博  女\n",
       "21  C01  S022    99   100    71  馨苒  男\n",
       "22  C01  S023    86    99    87  云霖  男\n",
       "23  C01  S024    97    71    63  海彤  男"
      ]
     },
     "execution_count": 645,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merge=pd.merge(left=df_grade,right=df_sinfo,left_on='学号',right_on='学号') # 两表关联\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 646,
   "id": "5781c9b6-0eea-4733-8ee0-e5ab2ecd64ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['班级', '学号', '语文成绩', '数学成绩', '英语成绩', '姓名', '性别'], dtype='object')"
      ]
     },
     "execution_count": 646,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 调整列顺序\n",
    "df_merge.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 647,
   "id": "37ce1395-b3c3-43ce-a1e3-fe89e3ad793d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['班级', '学号', '姓名', '性别', '语文成绩', '数学成绩', '英语成绩']"
      ]
     },
     "execution_count": 647,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 涉及知识点：python实现列表固定位置排序\n",
    "# 将姓名，性别放在学号后面，利用python语法实现\n",
    "# 将columns变为python的列表\n",
    "py_columns=df_merge.columns.to_list()\n",
    "# 按照逆序insert将姓名，性别放在学号后面\n",
    "for name in ['姓名','性别'][::-1]: # 加两个变量，依次加，而[::-1]是逆序意思\n",
    "    py_columns.remove(name) # 加一个移除一个\n",
    "    py_columns.insert(py_columns.index('学号')+1,name) # 在变量后面插入，两个参数一个位置参数，一个值参数\n",
    "py_columns\n",
    "# 先逆序选择性别，移除原列表性别，新的性别被逆位加在学号后面；再选姓名，同理移除，再加在学号后面，这样就形成了学号，姓名，性别次序"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 648,
   "id": "6a3e7917-f1f5-414b-b806-c305da310adb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>班级</th>\n",
       "      <th>学号</th>\n",
       "      <th>姓名</th>\n",
       "      <th>性别</th>\n",
       "      <th>语文成绩</th>\n",
       "      <th>数学成绩</th>\n",
       "      <th>英语成绩</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C01</td>\n",
       "      <td>S001</td>\n",
       "      <td>怠涵</td>\n",
       "      <td>女</td>\n",
       "      <td>99</td>\n",
       "      <td>84</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>C01</td>\n",
       "      <td>S002</td>\n",
       "      <td>婉清</td>\n",
       "      <td>女</td>\n",
       "      <td>66</td>\n",
       "      <td>95</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C01</td>\n",
       "      <td>S003</td>\n",
       "      <td>溪榕</td>\n",
       "      <td>女</td>\n",
       "      <td>68</td>\n",
       "      <td>68</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>C01</td>\n",
       "      <td>S004</td>\n",
       "      <td>漠涓</td>\n",
       "      <td>女</td>\n",
       "      <td>63</td>\n",
       "      <td>66</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>C01</td>\n",
       "      <td>S005</td>\n",
       "      <td>祈博</td>\n",
       "      <td>女</td>\n",
       "      <td>72</td>\n",
       "      <td>95</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>C01</td>\n",
       "      <td>S006</td>\n",
       "      <td>孝冉</td>\n",
       "      <td>女</td>\n",
       "      <td>60</td>\n",
       "      <td>99</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>C01</td>\n",
       "      <td>S007</td>\n",
       "      <td>乾名</td>\n",
       "      <td>女</td>\n",
       "      <td>65</td>\n",
       "      <td>95</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>C01</td>\n",
       "      <td>S008</td>\n",
       "      <td>炜然</td>\n",
       "      <td>女</td>\n",
       "      <td>87</td>\n",
       "      <td>92</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>C01</td>\n",
       "      <td>S009</td>\n",
       "      <td>晨阳</td>\n",
       "      <td>男</td>\n",
       "      <td>87</td>\n",
       "      <td>68</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>C01</td>\n",
       "      <td>S010</td>\n",
       "      <td>轻涵</td>\n",
       "      <td>男</td>\n",
       "      <td>66</td>\n",
       "      <td>88</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>C01</td>\n",
       "      <td>S011</td>\n",
       "      <td>晨洋</td>\n",
       "      <td>男</td>\n",
       "      <td>79</td>\n",
       "      <td>83</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>C01</td>\n",
       "      <td>S012</td>\n",
       "      <td>馨懿</td>\n",
       "      <td>男</td>\n",
       "      <td>68</td>\n",
       "      <td>73</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>C01</td>\n",
       "      <td>S013</td>\n",
       "      <td>冉莼</td>\n",
       "      <td>男</td>\n",
       "      <td>83</td>\n",
       "      <td>62</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>C01</td>\n",
       "      <td>S014</td>\n",
       "      <td>晨艳</td>\n",
       "      <td>男</td>\n",
       "      <td>87</td>\n",
       "      <td>68</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>C01</td>\n",
       "      <td>S015</td>\n",
       "      <td>云良</td>\n",
       "      <td>男</td>\n",
       "      <td>99</td>\n",
       "      <td>86</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>C01</td>\n",
       "      <td>S016</td>\n",
       "      <td>力博</td>\n",
       "      <td>男</td>\n",
       "      <td>62</td>\n",
       "      <td>91</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>C01</td>\n",
       "      <td>S017</td>\n",
       "      <td>惟然</td>\n",
       "      <td>男</td>\n",
       "      <td>100</td>\n",
       "      <td>65</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>C01</td>\n",
       "      <td>S018</td>\n",
       "      <td>清林</td>\n",
       "      <td>女</td>\n",
       "      <td>95</td>\n",
       "      <td>95</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>C01</td>\n",
       "      <td>S019</td>\n",
       "      <td>冬梅</td>\n",
       "      <td>女</td>\n",
       "      <td>81</td>\n",
       "      <td>81</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>C01</td>\n",
       "      <td>S020</td>\n",
       "      <td>箐莲</td>\n",
       "      <td>女</td>\n",
       "      <td>99</td>\n",
       "      <td>75</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>C01</td>\n",
       "      <td>S021</td>\n",
       "      <td>仪博</td>\n",
       "      <td>女</td>\n",
       "      <td>97</td>\n",
       "      <td>62</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>C01</td>\n",
       "      <td>S022</td>\n",
       "      <td>馨苒</td>\n",
       "      <td>男</td>\n",
       "      <td>99</td>\n",
       "      <td>100</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>C01</td>\n",
       "      <td>S023</td>\n",
       "      <td>云霖</td>\n",
       "      <td>男</td>\n",
       "      <td>86</td>\n",
       "      <td>99</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>C01</td>\n",
       "      <td>S024</td>\n",
       "      <td>海彤</td>\n",
       "      <td>男</td>\n",
       "      <td>97</td>\n",
       "      <td>71</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     班级    学号  姓名 性别  语文成绩  数学成绩  英语成绩\n",
       "0   C01  S001  怠涵  女    99    84    88\n",
       "1   C01  S002  婉清  女    66    95    77\n",
       "2   C01  S003  溪榕  女    68    68    61\n",
       "3   C01  S004  漠涓  女    63    66    82\n",
       "4   C01  S005  祈博  女    72    95    94\n",
       "5   C01  S006  孝冉  女    60    99    71\n",
       "6   C01  S007  乾名  女    65    95    91\n",
       "7   C01  S008  炜然  女    87    92    97\n",
       "8   C01  S009  晨阳  男    87    68    63\n",
       "9   C01  S010  轻涵  男    66    88    74\n",
       "10  C01  S011  晨洋  男    79    83    68\n",
       "11  C01  S012  馨懿  男    68    73    63\n",
       "12  C01  S013  冉莼  男    83    62    68\n",
       "13  C01  S014  晨艳  男    87    68    99\n",
       "14  C01  S015  云良  男    99    86    83\n",
       "15  C01  S016  力博  男    62    91    66\n",
       "16  C01  S017  惟然  男   100    65    95\n",
       "17  C01  S018  清林  女    95    95    73\n",
       "18  C01  S019  冬梅  女    81    81    84\n",
       "19  C01  S020  箐莲  女    99    75    70\n",
       "20  C01  S021  仪博  女    97    62    96\n",
       "21  C01  S022  馨苒  男    99   100    71\n",
       "22  C01  S023  云霖  男    86    99    87\n",
       "23  C01  S024  海彤  男    97    71    63"
      ]
     },
     "execution_count": 648,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merge=df_merge.reindex(columns=py_columns)\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 649,
   "id": "3a82f46e-2a7d-447a-8763-d9742ff7b486",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 输出excel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 650,
   "id": "d1f65a8e-2e6b-4086-ab51-10ed2fdb2bc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_merge.to_excel('./course_datas/c23_excel_vlookup/合并数据.xlsx',index=False)\n",
    "# index=False是指第一列的数字索引不要添加，只输出数据列"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01333966-fcfc-4769-b7e5-b668cb324a02",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0687f19f-2677-4866-b117-64e73a3aa155",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 651,
   "id": "86670a36-3b5d-443d-ae0b-192c27ec5d2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点四、python读取excel绘制折线图\n",
    "# Echarts百度开源可视化图表库  Pyecharts对应的python库版本"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 652,
   "id": "f6d93c66-7050-4181-b4cc-24a0c1cb27dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 653,
   "id": "a5d6a7c8-868d-4f57-8883-f4596e86de13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>open</th>\n",
       "      <th>close</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>vol</th>\n",
       "      <th>p_change</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-03</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>115.199997</td>\n",
       "      <td>114.800003</td>\n",
       "      <td>116.019997</td>\n",
       "      <td>113.300003</td>\n",
       "      <td>3493249</td>\n",
       "      <td>-2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>118.389999</td>\n",
       "      <td>117.440002</td>\n",
       "      <td>119.764999</td>\n",
       "      <td>116.400002</td>\n",
       "      <td>2203313</td>\n",
       "      <td>-0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-29</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>118.300003</td>\n",
       "      <td>118.529999</td>\n",
       "      <td>118.690002</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>1917004</td>\n",
       "      <td>-0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-27</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>119.180000</td>\n",
       "      <td>119.510002</td>\n",
       "      <td>119.839996</td>\n",
       "      <td>118.440002</td>\n",
       "      <td>2341070</td>\n",
       "      <td>0.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-26</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>120.010002</td>\n",
       "      <td>118.599998</td>\n",
       "      <td>120.440002</td>\n",
       "      <td>118.099998</td>\n",
       "      <td>3813176</td>\n",
       "      <td>-1.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-08</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>162.190002</td>\n",
       "      <td>163.399994</td>\n",
       "      <td>163.889999</td>\n",
       "      <td>158.160004</td>\n",
       "      <td>3253361</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-07</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>162.600006</td>\n",
       "      <td>162.600006</td>\n",
       "      <td>164.490005</td>\n",
       "      <td>158.509995</td>\n",
       "      <td>3266091</td>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-04</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>157.600006</td>\n",
       "      <td>160.949997</td>\n",
       "      <td>162.429993</td>\n",
       "      <td>157.250000</td>\n",
       "      <td>3847497</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-03</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>158.750000</td>\n",
       "      <td>154.710007</td>\n",
       "      <td>159.880005</td>\n",
       "      <td>153.779999</td>\n",
       "      <td>3879180</td>\n",
       "      <td>-4.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-02</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>156.179993</td>\n",
       "      <td>162.250000</td>\n",
       "      <td>164.330002</td>\n",
       "      <td>155.490005</td>\n",
       "      <td>2996952</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>227 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            code        open       close        high         low      vol  \\\n",
       "datetime                                                                    \n",
       "2019-12-03  BIDU  115.199997  114.800003  116.019997  113.300003  3493249   \n",
       "2019-12-02  BIDU  118.389999  117.440002  119.764999  116.400002  2203313   \n",
       "2019-11-29  BIDU  118.300003  118.529999  118.690002  117.599998  1917004   \n",
       "2019-11-27  BIDU  119.180000  119.510002  119.839996  118.440002  2341070   \n",
       "2019-11-26  BIDU  120.010002  118.599998  120.440002  118.099998  3813176   \n",
       "...          ...         ...         ...         ...         ...      ...   \n",
       "2019-01-08  BIDU  162.190002  163.399994  163.889999  158.160004  3253361   \n",
       "2019-01-07  BIDU  162.600006  162.600006  164.490005  158.509995  3266091   \n",
       "2019-01-04  BIDU  157.600006  160.949997  162.429993  157.250000  3847497   \n",
       "2019-01-03  BIDU  158.750000  154.710007  159.880005  153.779999  3879180   \n",
       "2019-01-02  BIDU  156.179993  162.250000  164.330002  155.490005  2996952   \n",
       "\n",
       "            p_change  \n",
       "datetime              \n",
       "2019-12-03     -2.25  \n",
       "2019-12-02     -0.92  \n",
       "2019-11-29     -0.82  \n",
       "2019-11-27      0.77  \n",
       "2019-11-26     -1.43  \n",
       "...              ...  \n",
       "2019-01-08      0.49  \n",
       "2019-01-07      1.03  \n",
       "2019-01-04      4.03  \n",
       "2019-01-03     -4.65  \n",
       "2019-01-02       NaN  \n",
       "\n",
       "[227 rows x 7 columns]"
      ]
     },
     "execution_count": 653,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_excel('./datas/stocks/baidu_stocks.xlsx',index_col='datetime',parse_dates=True) # 将日期设为索引列并且变为日期格式\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 654,
   "id": "1538f6c0-eb2e-4b68-9538-e05c4fe0af73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2019-12-03', '2019-12-02', '2019-11-29', '2019-11-27',\n",
       "               '2019-11-26', '2019-11-25', '2019-11-22', '2019-11-21',\n",
       "               '2019-11-20', '2019-11-19',\n",
       "               ...\n",
       "               '2019-01-15', '2019-01-14', '2019-01-11', '2019-01-10',\n",
       "               '2019-01-09', '2019-01-08', '2019-01-07', '2019-01-04',\n",
       "               '2019-01-03', '2019-01-02'],\n",
       "              dtype='datetime64[ns]', name='datetime', length=227, freq=None)"
      ]
     },
     "execution_count": 654,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 655,
   "id": "a6eea0aa-a611-4152-83b0-cc202b66cf00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>open</th>\n",
       "      <th>close</th>\n",
       "      <th>high</th>\n",
       "      <th>low</th>\n",
       "      <th>vol</th>\n",
       "      <th>p_change</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-02</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>156.179993</td>\n",
       "      <td>162.250000</td>\n",
       "      <td>164.330002</td>\n",
       "      <td>155.490005</td>\n",
       "      <td>2996952</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-03</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>158.750000</td>\n",
       "      <td>154.710007</td>\n",
       "      <td>159.880005</td>\n",
       "      <td>153.779999</td>\n",
       "      <td>3879180</td>\n",
       "      <td>-4.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-04</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>157.600006</td>\n",
       "      <td>160.949997</td>\n",
       "      <td>162.429993</td>\n",
       "      <td>157.250000</td>\n",
       "      <td>3847497</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-07</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>162.600006</td>\n",
       "      <td>162.600006</td>\n",
       "      <td>164.490005</td>\n",
       "      <td>158.509995</td>\n",
       "      <td>3266091</td>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-08</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>162.190002</td>\n",
       "      <td>163.399994</td>\n",
       "      <td>163.889999</td>\n",
       "      <td>158.160004</td>\n",
       "      <td>3253361</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-26</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>120.010002</td>\n",
       "      <td>118.599998</td>\n",
       "      <td>120.440002</td>\n",
       "      <td>118.099998</td>\n",
       "      <td>3813176</td>\n",
       "      <td>-1.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-27</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>119.180000</td>\n",
       "      <td>119.510002</td>\n",
       "      <td>119.839996</td>\n",
       "      <td>118.440002</td>\n",
       "      <td>2341070</td>\n",
       "      <td>0.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-29</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>118.300003</td>\n",
       "      <td>118.529999</td>\n",
       "      <td>118.690002</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>1917004</td>\n",
       "      <td>-0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>118.389999</td>\n",
       "      <td>117.440002</td>\n",
       "      <td>119.764999</td>\n",
       "      <td>116.400002</td>\n",
       "      <td>2203313</td>\n",
       "      <td>-0.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-03</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>115.199997</td>\n",
       "      <td>114.800003</td>\n",
       "      <td>116.019997</td>\n",
       "      <td>113.300003</td>\n",
       "      <td>3493249</td>\n",
       "      <td>-2.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>227 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            code        open       close        high         low      vol  \\\n",
       "datetime                                                                    \n",
       "2019-01-02  BIDU  156.179993  162.250000  164.330002  155.490005  2996952   \n",
       "2019-01-03  BIDU  158.750000  154.710007  159.880005  153.779999  3879180   \n",
       "2019-01-04  BIDU  157.600006  160.949997  162.429993  157.250000  3847497   \n",
       "2019-01-07  BIDU  162.600006  162.600006  164.490005  158.509995  3266091   \n",
       "2019-01-08  BIDU  162.190002  163.399994  163.889999  158.160004  3253361   \n",
       "...          ...         ...         ...         ...         ...      ...   \n",
       "2019-11-26  BIDU  120.010002  118.599998  120.440002  118.099998  3813176   \n",
       "2019-11-27  BIDU  119.180000  119.510002  119.839996  118.440002  2341070   \n",
       "2019-11-29  BIDU  118.300003  118.529999  118.690002  117.599998  1917004   \n",
       "2019-12-02  BIDU  118.389999  117.440002  119.764999  116.400002  2203313   \n",
       "2019-12-03  BIDU  115.199997  114.800003  116.019997  113.300003  3493249   \n",
       "\n",
       "            p_change  \n",
       "datetime              \n",
       "2019-01-02       NaN  \n",
       "2019-01-03     -4.65  \n",
       "2019-01-04      4.03  \n",
       "2019-01-07      1.03  \n",
       "2019-01-08      0.49  \n",
       "...              ...  \n",
       "2019-11-26     -1.43  \n",
       "2019-11-27      0.77  \n",
       "2019-11-29     -0.82  \n",
       "2019-12-02     -0.92  \n",
       "2019-12-03     -2.25  \n",
       "\n",
       "[227 rows x 7 columns]"
      ]
     },
     "execution_count": 655,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 数据从12月开始，为倒序，对数据进行排序\n",
    "df.sort_index(inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 656,
   "id": "b27d5c38-5013-42ef-a9d9-ae6f15f344eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用pyecharts绘制折线图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "id": "cefe6c25-7cd4-4a17-a07b-91e03f5d51e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "id": "f30cdd37-69e0-4676-a7e2-08392412bf84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pyecharts.charts.basic_charts.line.Line at 0x1886e7c4950>"
      ]
     },
     "execution_count": 658,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 折线图\n",
    "line=Line() # 初始化折线图\n",
    "# x轴\n",
    "df.index = pd.to_datetime(df.index)\n",
    "line.add_xaxis(df.index.to_list()) # x轴数据是列表，取得是日期为x轴，即用日期索引做x轴，即把日期列转化为列表做x轴\n",
    "# 每个y轴，两条线，开盘价收盘价\n",
    "line.add_yaxis('开盘价',df['open'].round(2).to_list()) # 值是df['open']保留两位小数，也转化成列表\n",
    "line.add_yaxis('收盘价',df['close'].round(2).to_list())\n",
    "# 图表配置：标题\n",
    "line.set_global_opts(\n",
    "    title_opts=opts.TitleOpts(title='2019百度股票'),\n",
    "    tooltip_opts=opts.TooltipOpts(trigger='axis',axis_pointer_type='cross')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "id": "2323da12-d77d-4f94-9ac5-e5d9bb02b94d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "    <title>Awesome-pyecharts</title>\n",
       "                <script type=\"text/javascript\" src=\"https://assets.pyecharts.org/assets/v5/echarts.min.js\"></script>\n",
       "\n",
       "</head>\n",
       "<body >\n",
       "    <div id=\"bd8308d513dc46a2806ba3bbc69fc580\" class=\"chart-container\" style=\"width:900px; height:500px; \"></div>\n",
       "    <script>\n",
       "        var chart_bd8308d513dc46a2806ba3bbc69fc580 = echarts.init(\n",
       "            document.getElementById('bd8308d513dc46a2806ba3bbc69fc580'), 'white', {renderer: 'canvas'});\n",
       "        var option_bd8308d513dc46a2806ba3bbc69fc580 = {\n",
       "    \"animation\": true,\n",
       "    \"animationThreshold\": 2000,\n",
       "    \"animationDuration\": 1000,\n",
       "    \"animationEasing\": \"cubicOut\",\n",
       "    \"animationDelay\": 0,\n",
       "    \"animationDurationUpdate\": 300,\n",
       "    \"animationEasingUpdate\": \"cubicOut\",\n",
       "    \"animationDelayUpdate\": 0,\n",
       "    \"aria\": {\n",
       "        \"enabled\": false\n",
       "    },\n",
       "    \"color\": [\n",
       "        \"#5470c6\",\n",
       "        \"#91cc75\",\n",
       "        \"#fac858\",\n",
       "        \"#ee6666\",\n",
       "        \"#73c0de\",\n",
       "        \"#3ba272\",\n",
       "        \"#fc8452\",\n",
       "        \"#9a60b4\",\n",
       "        \"#ea7ccc\"\n",
       "    ],\n",
       "    \"series\": [\n",
       "        {\n",
       "            \"type\": \"line\",\n",
       "            \"name\": \"\\u5f00\\u76d8\\u4ef7\",\n",
       "            \"connectNulls\": false,\n",
       "            \"xAxisIndex\": 0,\n",
       "            \"symbolSize\": 4,\n",
       "            \"showSymbol\": true,\n",
       "            \"smooth\": false,\n",
       "            \"clip\": true,\n",
       "            \"step\": false,\n",
       "            \"stackStrategy\": \"samesign\",\n",
       "            \"data\": [\n",
       "                [\n",
       "                    \"2019-01-02T00:00:00\",\n",
       "                    156.18\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-03T00:00:00\",\n",
       "                    158.75\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-04T00:00:00\",\n",
       "                    157.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-07T00:00:00\",\n",
       "                    162.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-08T00:00:00\",\n",
       "                    162.19\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-09T00:00:00\",\n",
       "                    166.72\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-10T00:00:00\",\n",
       "                    164.98\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-11T00:00:00\",\n",
       "                    167.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-14T00:00:00\",\n",
       "                    162.82\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-15T00:00:00\",\n",
       "                    164.43\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-16T00:00:00\",\n",
       "                    169.62\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-17T00:00:00\",\n",
       "                    167.84\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-18T00:00:00\",\n",
       "                    170.54\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-22T00:00:00\",\n",
       "                    167.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-23T00:00:00\",\n",
       "                    162.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-24T00:00:00\",\n",
       "                    163.25\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-25T00:00:00\",\n",
       "                    164.99\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-28T00:00:00\",\n",
       "                    164.18\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-29T00:00:00\",\n",
       "                    167.91\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-30T00:00:00\",\n",
       "                    166.72\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-31T00:00:00\",\n",
       "                    171.05\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-08T00:00:00\",\n",
       "                    170.46\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-11T00:00:00\",\n",
       "                    172.22\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-12T00:00:00\",\n",
       "                    169.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-13T00:00:00\",\n",
       "                    172.14\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-14T00:00:00\",\n",
       "                    173.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-15T00:00:00\",\n",
       "                    175.41\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-19T00:00:00\",\n",
       "                    169.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-20T00:00:00\",\n",
       "                    173.65\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-21T00:00:00\",\n",
       "                    171.73\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-22T00:00:00\",\n",
       "                    173.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-25T00:00:00\",\n",
       "                    170.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-26T00:00:00\",\n",
       "                    164.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-27T00:00:00\",\n",
       "                    161.55\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-28T00:00:00\",\n",
       "                    162.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-01T00:00:00\",\n",
       "                    164.18\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-04T00:00:00\",\n",
       "                    163.71\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-05T00:00:00\",\n",
       "                    161.47\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-06T00:00:00\",\n",
       "                    169.21\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-07T00:00:00\",\n",
       "                    169.63\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-08T00:00:00\",\n",
       "                    162.94\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-11T00:00:00\",\n",
       "                    165.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-12T00:00:00\",\n",
       "                    168.45\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-13T00:00:00\",\n",
       "                    167.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-14T00:00:00\",\n",
       "                    167.96\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-15T00:00:00\",\n",
       "                    169.41\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-18T00:00:00\",\n",
       "                    172.41\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-19T00:00:00\",\n",
       "                    172.11\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-20T00:00:00\",\n",
       "                    171.28\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-21T00:00:00\",\n",
       "                    168.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-22T00:00:00\",\n",
       "                    170.72\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-25T00:00:00\",\n",
       "                    165.57\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-26T00:00:00\",\n",
       "                    167.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-27T00:00:00\",\n",
       "                    167.36\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-28T00:00:00\",\n",
       "                    165.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-29T00:00:00\",\n",
       "                    165.65\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-01T00:00:00\",\n",
       "                    168.07\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-02T00:00:00\",\n",
       "                    170.41\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-03T00:00:00\",\n",
       "                    173.05\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-04T00:00:00\",\n",
       "                    176.92\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-05T00:00:00\",\n",
       "                    181.33\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-08T00:00:00\",\n",
       "                    181.55\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-09T00:00:00\",\n",
       "                    185.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-10T00:00:00\",\n",
       "                    179.19\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-11T00:00:00\",\n",
       "                    176.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-12T00:00:00\",\n",
       "                    173.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-15T00:00:00\",\n",
       "                    172.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-16T00:00:00\",\n",
       "                    170.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-17T00:00:00\",\n",
       "                    172.19\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-18T00:00:00\",\n",
       "                    171.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-22T00:00:00\",\n",
       "                    170.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-23T00:00:00\",\n",
       "                    170.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-24T00:00:00\",\n",
       "                    174.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-25T00:00:00\",\n",
       "                    169.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-26T00:00:00\",\n",
       "                    167.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-29T00:00:00\",\n",
       "                    167.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-30T00:00:00\",\n",
       "                    164.68\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-01T00:00:00\",\n",
       "                    166.58\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-02T00:00:00\",\n",
       "                    165.76\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-03T00:00:00\",\n",
       "                    167.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-06T00:00:00\",\n",
       "                    161.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-07T00:00:00\",\n",
       "                    162.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-08T00:00:00\",\n",
       "                    161.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-09T00:00:00\",\n",
       "                    156.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-10T00:00:00\",\n",
       "                    158.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-13T00:00:00\",\n",
       "                    151.63\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-14T00:00:00\",\n",
       "                    153.08\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-15T00:00:00\",\n",
       "                    151.73\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-16T00:00:00\",\n",
       "                    153.31\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-17T00:00:00\",\n",
       "                    130.53\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-20T00:00:00\",\n",
       "                    123.23\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-21T00:00:00\",\n",
       "                    119.22\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-22T00:00:00\",\n",
       "                    120.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-23T00:00:00\",\n",
       "                    115.3\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-24T00:00:00\",\n",
       "                    114.55\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-28T00:00:00\",\n",
       "                    115.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-29T00:00:00\",\n",
       "                    113.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-30T00:00:00\",\n",
       "                    112.37\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-31T00:00:00\",\n",
       "                    110.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-03T00:00:00\",\n",
       "                    109.76\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-04T00:00:00\",\n",
       "                    108.46\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-05T00:00:00\",\n",
       "                    111.63\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-06T00:00:00\",\n",
       "                    109.1\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-07T00:00:00\",\n",
       "                    109.1\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-10T00:00:00\",\n",
       "                    111.02\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-11T00:00:00\",\n",
       "                    113.93\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-12T00:00:00\",\n",
       "                    114.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-13T00:00:00\",\n",
       "                    113.98\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-14T00:00:00\",\n",
       "                    112.81\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-17T00:00:00\",\n",
       "                    113.3\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-18T00:00:00\",\n",
       "                    115.44\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-19T00:00:00\",\n",
       "                    118.16\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-20T00:00:00\",\n",
       "                    120.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-24T00:00:00\",\n",
       "                    117.29\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-25T00:00:00\",\n",
       "                    115.57\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-26T00:00:00\",\n",
       "                    114.58\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-27T00:00:00\",\n",
       "                    116.31\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-28T00:00:00\",\n",
       "                    116.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-01T00:00:00\",\n",
       "                    121.49\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-02T00:00:00\",\n",
       "                    118.15\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-03T00:00:00\",\n",
       "                    120.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-05T00:00:00\",\n",
       "                    117.21\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-08T00:00:00\",\n",
       "                    114.99\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-09T00:00:00\",\n",
       "                    112.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-10T00:00:00\",\n",
       "                    116.16\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-11T00:00:00\",\n",
       "                    114.69\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-12T00:00:00\",\n",
       "                    114.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-15T00:00:00\",\n",
       "                    115.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-16T00:00:00\",\n",
       "                    115.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-17T00:00:00\",\n",
       "                    114.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-18T00:00:00\",\n",
       "                    113.19\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-19T00:00:00\",\n",
       "                    112.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-22T00:00:00\",\n",
       "                    112.25\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-23T00:00:00\",\n",
       "                    112.27\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-24T00:00:00\",\n",
       "                    114.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-25T00:00:00\",\n",
       "                    116.23\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-26T00:00:00\",\n",
       "                    115.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-29T00:00:00\",\n",
       "                    113.75\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-30T00:00:00\",\n",
       "                    112.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-31T00:00:00\",\n",
       "                    112.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-01T00:00:00\",\n",
       "                    111.53\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-02T00:00:00\",\n",
       "                    108.22\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-05T00:00:00\",\n",
       "                    104.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-06T00:00:00\",\n",
       "                    101.68\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-07T00:00:00\",\n",
       "                    98.39\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-08T00:00:00\",\n",
       "                    99.38\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-09T00:00:00\",\n",
       "                    99.17\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-12T00:00:00\",\n",
       "                    96.24\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-13T00:00:00\",\n",
       "                    94.22\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-14T00:00:00\",\n",
       "                    95.21\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-15T00:00:00\",\n",
       "                    95.55\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-16T00:00:00\",\n",
       "                    95.28\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-19T00:00:00\",\n",
       "                    100.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-20T00:00:00\",\n",
       "                    112.08\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-21T00:00:00\",\n",
       "                    109.61\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-22T00:00:00\",\n",
       "                    105.77\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-23T00:00:00\",\n",
       "                    103.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-26T00:00:00\",\n",
       "                    102.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-27T00:00:00\",\n",
       "                    104.78\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-28T00:00:00\",\n",
       "                    102.96\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-29T00:00:00\",\n",
       "                    105.22\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-30T00:00:00\",\n",
       "                    105.46\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-03T00:00:00\",\n",
       "                    103.32\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-04T00:00:00\",\n",
       "                    104.13\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-05T00:00:00\",\n",
       "                    103.59\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-06T00:00:00\",\n",
       "                    104.24\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-09T00:00:00\",\n",
       "                    102.72\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-10T00:00:00\",\n",
       "                    105.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-11T00:00:00\",\n",
       "                    111.78\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-12T00:00:00\",\n",
       "                    112.95\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-13T00:00:00\",\n",
       "                    111.97\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-16T00:00:00\",\n",
       "                    109.95\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-17T00:00:00\",\n",
       "                    110.02\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-18T00:00:00\",\n",
       "                    108.99\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-19T00:00:00\",\n",
       "                    108.56\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-20T00:00:00\",\n",
       "                    108.1\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-23T00:00:00\",\n",
       "                    104.49\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-24T00:00:00\",\n",
       "                    102.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-25T00:00:00\",\n",
       "                    97.94\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-26T00:00:00\",\n",
       "                    105.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-27T00:00:00\",\n",
       "                    105.49\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-30T00:00:00\",\n",
       "                    102.25\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-01T00:00:00\",\n",
       "                    102.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-02T00:00:00\",\n",
       "                    100.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-03T00:00:00\",\n",
       "                    102.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-04T00:00:00\",\n",
       "                    103.83\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-07T00:00:00\",\n",
       "                    103.79\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-08T00:00:00\",\n",
       "                    99.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-09T00:00:00\",\n",
       "                    100.29\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-10T00:00:00\",\n",
       "                    100.79\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-11T00:00:00\",\n",
       "                    105.97\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-14T00:00:00\",\n",
       "                    104.51\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-15T00:00:00\",\n",
       "                    105.54\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-16T00:00:00\",\n",
       "                    107.18\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-17T00:00:00\",\n",
       "                    108.86\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-18T00:00:00\",\n",
       "                    107.48\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-21T00:00:00\",\n",
       "                    104.57\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-22T00:00:00\",\n",
       "                    104.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-23T00:00:00\",\n",
       "                    102.66\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-24T00:00:00\",\n",
       "                    104.09\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-25T00:00:00\",\n",
       "                    103.18\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-28T00:00:00\",\n",
       "                    104.31\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-29T00:00:00\",\n",
       "                    104.47\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-30T00:00:00\",\n",
       "                    102.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-31T00:00:00\",\n",
       "                    102.13\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-01T00:00:00\",\n",
       "                    103.05\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-04T00:00:00\",\n",
       "                    106.98\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-05T00:00:00\",\n",
       "                    110.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-06T00:00:00\",\n",
       "                    108.81\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-07T00:00:00\",\n",
       "                    115.43\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-08T00:00:00\",\n",
       "                    123.21\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-11T00:00:00\",\n",
       "                    122.69\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-12T00:00:00\",\n",
       "                    120.17\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-13T00:00:00\",\n",
       "                    119.61\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-14T00:00:00\",\n",
       "                    118.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-15T00:00:00\",\n",
       "                    118.74\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-18T00:00:00\",\n",
       "                    117.31\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-19T00:00:00\",\n",
       "                    117.92\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-20T00:00:00\",\n",
       "                    114.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-21T00:00:00\",\n",
       "                    114.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-22T00:00:00\",\n",
       "                    116.12\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-25T00:00:00\",\n",
       "                    119.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-26T00:00:00\",\n",
       "                    120.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-27T00:00:00\",\n",
       "                    119.18\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-29T00:00:00\",\n",
       "                    118.3\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-02T00:00:00\",\n",
       "                    118.39\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-03T00:00:00\",\n",
       "                    115.2\n",
       "                ]\n",
       "            ],\n",
       "            \"hoverAnimation\": true,\n",
       "            \"label\": {\n",
       "                \"show\": true,\n",
       "                \"margin\": 8\n",
       "            },\n",
       "            \"logBase\": 10,\n",
       "            \"seriesLayoutBy\": \"column\",\n",
       "            \"lineStyle\": {\n",
       "                \"show\": true,\n",
       "                \"width\": 1,\n",
       "                \"opacity\": 1,\n",
       "                \"curveness\": 0,\n",
       "                \"type\": \"solid\"\n",
       "            },\n",
       "            \"areaStyle\": {\n",
       "                \"opacity\": 0\n",
       "            },\n",
       "            \"zlevel\": 0,\n",
       "            \"z\": 0\n",
       "        },\n",
       "        {\n",
       "            \"type\": \"line\",\n",
       "            \"name\": \"\\u6536\\u76d8\\u4ef7\",\n",
       "            \"connectNulls\": false,\n",
       "            \"xAxisIndex\": 0,\n",
       "            \"symbolSize\": 4,\n",
       "            \"showSymbol\": true,\n",
       "            \"smooth\": false,\n",
       "            \"clip\": true,\n",
       "            \"step\": false,\n",
       "            \"stackStrategy\": \"samesign\",\n",
       "            \"data\": [\n",
       "                [\n",
       "                    \"2019-01-02T00:00:00\",\n",
       "                    162.25\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-03T00:00:00\",\n",
       "                    154.71\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-04T00:00:00\",\n",
       "                    160.95\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-07T00:00:00\",\n",
       "                    162.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-08T00:00:00\",\n",
       "                    163.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-09T00:00:00\",\n",
       "                    166.64\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-10T00:00:00\",\n",
       "                    168.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-11T00:00:00\",\n",
       "                    166.11\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-14T00:00:00\",\n",
       "                    163.03\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-15T00:00:00\",\n",
       "                    167.93\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-16T00:00:00\",\n",
       "                    169.75\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-17T00:00:00\",\n",
       "                    168.11\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-18T00:00:00\",\n",
       "                    171.36\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-22T00:00:00\",\n",
       "                    160.39\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-23T00:00:00\",\n",
       "                    163.26\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-24T00:00:00\",\n",
       "                    162.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-25T00:00:00\",\n",
       "                    167.1\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-28T00:00:00\",\n",
       "                    167.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-29T00:00:00\",\n",
       "                    165.27\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-30T00:00:00\",\n",
       "                    169.34\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-01-31T00:00:00\",\n",
       "                    172.63\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-08T00:00:00\",\n",
       "                    169.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-11T00:00:00\",\n",
       "                    168.06\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-12T00:00:00\",\n",
       "                    170.25\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-13T00:00:00\",\n",
       "                    173.82\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-14T00:00:00\",\n",
       "                    174.08\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-15T00:00:00\",\n",
       "                    170.06\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-19T00:00:00\",\n",
       "                    172.45\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-20T00:00:00\",\n",
       "                    171.18\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-21T00:00:00\",\n",
       "                    171.81\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-22T00:00:00\",\n",
       "                    167.17\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-25T00:00:00\",\n",
       "                    165.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-26T00:00:00\",\n",
       "                    161.98\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-27T00:00:00\",\n",
       "                    162.17\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-02-28T00:00:00\",\n",
       "                    162.54\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-01T00:00:00\",\n",
       "                    162.09\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-04T00:00:00\",\n",
       "                    160.92\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-05T00:00:00\",\n",
       "                    167.74\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-06T00:00:00\",\n",
       "                    170.24\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-07T00:00:00\",\n",
       "                    165.72\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-08T00:00:00\",\n",
       "                    163.65\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-11T00:00:00\",\n",
       "                    166.96\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-12T00:00:00\",\n",
       "                    166.99\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-13T00:00:00\",\n",
       "                    168.17\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-14T00:00:00\",\n",
       "                    167.74\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-15T00:00:00\",\n",
       "                    170.48\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-18T00:00:00\",\n",
       "                    171.17\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-19T00:00:00\",\n",
       "                    170.73\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-20T00:00:00\",\n",
       "                    170.17\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-21T00:00:00\",\n",
       "                    171.77\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-22T00:00:00\",\n",
       "                    166.73\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-25T00:00:00\",\n",
       "                    166.88\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-26T00:00:00\",\n",
       "                    167.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-27T00:00:00\",\n",
       "                    164.29\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-28T00:00:00\",\n",
       "                    164.11\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-03-29T00:00:00\",\n",
       "                    164.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-01T00:00:00\",\n",
       "                    170.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-02T00:00:00\",\n",
       "                    170.98\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-03T00:00:00\",\n",
       "                    174.91\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-04T00:00:00\",\n",
       "                    179.13\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-05T00:00:00\",\n",
       "                    181.55\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-08T00:00:00\",\n",
       "                    184.77\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-09T00:00:00\",\n",
       "                    181.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-10T00:00:00\",\n",
       "                    177.04\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-11T00:00:00\",\n",
       "                    171.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-12T00:00:00\",\n",
       "                    173.09\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-15T00:00:00\",\n",
       "                    168.67\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-16T00:00:00\",\n",
       "                    170.28\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-17T00:00:00\",\n",
       "                    170.33\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-18T00:00:00\",\n",
       "                    171.02\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-22T00:00:00\",\n",
       "                    169.37\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-23T00:00:00\",\n",
       "                    173.29\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-24T00:00:00\",\n",
       "                    169.3\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-25T00:00:00\",\n",
       "                    167.93\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-26T00:00:00\",\n",
       "                    166.12\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-29T00:00:00\",\n",
       "                    165.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-04-30T00:00:00\",\n",
       "                    166.23\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-01T00:00:00\",\n",
       "                    165.42\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-02T00:00:00\",\n",
       "                    166.24\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-03T00:00:00\",\n",
       "                    167.04\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-06T00:00:00\",\n",
       "                    164.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-07T00:00:00\",\n",
       "                    162.13\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-08T00:00:00\",\n",
       "                    159.58\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-09T00:00:00\",\n",
       "                    158.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-10T00:00:00\",\n",
       "                    156.75\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-13T00:00:00\",\n",
       "                    151.54\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-14T00:00:00\",\n",
       "                    152.39\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-15T00:00:00\",\n",
       "                    152.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-16T00:00:00\",\n",
       "                    153.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-17T00:00:00\",\n",
       "                    128.31\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-20T00:00:00\",\n",
       "                    117.55\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-21T00:00:00\",\n",
       "                    120.49\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-22T00:00:00\",\n",
       "                    118.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-23T00:00:00\",\n",
       "                    113.46\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-24T00:00:00\",\n",
       "                    114.47\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-28T00:00:00\",\n",
       "                    114.14\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-29T00:00:00\",\n",
       "                    112.95\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-30T00:00:00\",\n",
       "                    111.82\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-05-31T00:00:00\",\n",
       "                    110.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-03T00:00:00\",\n",
       "                    107.78\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-04T00:00:00\",\n",
       "                    111.43\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-05T00:00:00\",\n",
       "                    109.14\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-06T00:00:00\",\n",
       "                    108.89\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-07T00:00:00\",\n",
       "                    109.81\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-10T00:00:00\",\n",
       "                    111.76\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-11T00:00:00\",\n",
       "                    115.37\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-12T00:00:00\",\n",
       "                    113.09\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-13T00:00:00\",\n",
       "                    114.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-14T00:00:00\",\n",
       "                    113.08\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-17T00:00:00\",\n",
       "                    114.33\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-18T00:00:00\",\n",
       "                    116.95\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-19T00:00:00\",\n",
       "                    117.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-20T00:00:00\",\n",
       "                    118.3\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-24T00:00:00\",\n",
       "                    116.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-25T00:00:00\",\n",
       "                    113.26\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-26T00:00:00\",\n",
       "                    115.77\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-27T00:00:00\",\n",
       "                    116.04\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-06-28T00:00:00\",\n",
       "                    117.36\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-01T00:00:00\",\n",
       "                    118.01\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-02T00:00:00\",\n",
       "                    119.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-03T00:00:00\",\n",
       "                    118.56\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-05T00:00:00\",\n",
       "                    116.29\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-08T00:00:00\",\n",
       "                    113.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-09T00:00:00\",\n",
       "                    114.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-10T00:00:00\",\n",
       "                    114.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-11T00:00:00\",\n",
       "                    114.75\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-12T00:00:00\",\n",
       "                    114.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-15T00:00:00\",\n",
       "                    115.63\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-16T00:00:00\",\n",
       "                    114.23\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-17T00:00:00\",\n",
       "                    113.58\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-18T00:00:00\",\n",
       "                    111.79\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-19T00:00:00\",\n",
       "                    112.25\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-22T00:00:00\",\n",
       "                    111.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-23T00:00:00\",\n",
       "                    115.14\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-24T00:00:00\",\n",
       "                    116.38\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-25T00:00:00\",\n",
       "                    114.47\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-26T00:00:00\",\n",
       "                    114.22\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-29T00:00:00\",\n",
       "                    113.45\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-30T00:00:00\",\n",
       "                    112.75\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-07-31T00:00:00\",\n",
       "                    111.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-01T00:00:00\",\n",
       "                    109.21\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-02T00:00:00\",\n",
       "                    107.76\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-05T00:00:00\",\n",
       "                    100.15\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-06T00:00:00\",\n",
       "                    99.68\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-07T00:00:00\",\n",
       "                    99.19\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-08T00:00:00\",\n",
       "                    99.89\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-09T00:00:00\",\n",
       "                    97.36\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-12T00:00:00\",\n",
       "                    95.08\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-13T00:00:00\",\n",
       "                    97.38\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-14T00:00:00\",\n",
       "                    94.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-15T00:00:00\",\n",
       "                    94.35\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-16T00:00:00\",\n",
       "                    96.7\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-19T00:00:00\",\n",
       "                    104.22\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-20T00:00:00\",\n",
       "                    108.72\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-21T00:00:00\",\n",
       "                    107.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-22T00:00:00\",\n",
       "                    105.45\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-23T00:00:00\",\n",
       "                    101.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-26T00:00:00\",\n",
       "                    103.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-27T00:00:00\",\n",
       "                    103.84\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-28T00:00:00\",\n",
       "                    103.59\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-29T00:00:00\",\n",
       "                    104.83\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-08-30T00:00:00\",\n",
       "                    104.47\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-03T00:00:00\",\n",
       "                    102.56\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-04T00:00:00\",\n",
       "                    102.54\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-05T00:00:00\",\n",
       "                    104.12\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-06T00:00:00\",\n",
       "                    102.59\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-09T00:00:00\",\n",
       "                    105.06\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-10T00:00:00\",\n",
       "                    110.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-11T00:00:00\",\n",
       "                    111.79\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-12T00:00:00\",\n",
       "                    111.5\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-13T00:00:00\",\n",
       "                    110.54\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-16T00:00:00\",\n",
       "                    110.98\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-17T00:00:00\",\n",
       "                    109.04\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-18T00:00:00\",\n",
       "                    108.4\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-19T00:00:00\",\n",
       "                    107.77\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-20T00:00:00\",\n",
       "                    105.16\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-23T00:00:00\",\n",
       "                    102.37\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-24T00:00:00\",\n",
       "                    97.61\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-25T00:00:00\",\n",
       "                    102.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-26T00:00:00\",\n",
       "                    105.07\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-27T00:00:00\",\n",
       "                    101.21\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-09-30T00:00:00\",\n",
       "                    102.76\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-01T00:00:00\",\n",
       "                    102.0\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-02T00:00:00\",\n",
       "                    102.62\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-03T00:00:00\",\n",
       "                    104.32\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-04T00:00:00\",\n",
       "                    104.47\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-07T00:00:00\",\n",
       "                    101.47\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-08T00:00:00\",\n",
       "                    99.53\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-09T00:00:00\",\n",
       "                    99.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-10T00:00:00\",\n",
       "                    103.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-11T00:00:00\",\n",
       "                    104.66\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-14T00:00:00\",\n",
       "                    105.46\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-15T00:00:00\",\n",
       "                    107.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-16T00:00:00\",\n",
       "                    108.28\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-17T00:00:00\",\n",
       "                    107.65\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-18T00:00:00\",\n",
       "                    103.74\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-21T00:00:00\",\n",
       "                    104.36\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-22T00:00:00\",\n",
       "                    103.63\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-23T00:00:00\",\n",
       "                    104.15\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-24T00:00:00\",\n",
       "                    103.69\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-25T00:00:00\",\n",
       "                    103.87\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-28T00:00:00\",\n",
       "                    104.86\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-29T00:00:00\",\n",
       "                    102.9\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-30T00:00:00\",\n",
       "                    102.93\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-10-31T00:00:00\",\n",
       "                    101.85\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-01T00:00:00\",\n",
       "                    104.64\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-04T00:00:00\",\n",
       "                    109.62\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-05T00:00:00\",\n",
       "                    108.05\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-06T00:00:00\",\n",
       "                    107.36\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-07T00:00:00\",\n",
       "                    121.87\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-08T00:00:00\",\n",
       "                    124.56\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-11T00:00:00\",\n",
       "                    120.87\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-12T00:00:00\",\n",
       "                    121.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-13T00:00:00\",\n",
       "                    118.29\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-14T00:00:00\",\n",
       "                    118.2\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-15T00:00:00\",\n",
       "                    117.05\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-18T00:00:00\",\n",
       "                    116.52\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-19T00:00:00\",\n",
       "                    115.69\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-20T00:00:00\",\n",
       "                    114.8\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-21T00:00:00\",\n",
       "                    115.65\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-22T00:00:00\",\n",
       "                    117.99\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-25T00:00:00\",\n",
       "                    120.32\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-26T00:00:00\",\n",
       "                    118.6\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-27T00:00:00\",\n",
       "                    119.51\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-11-29T00:00:00\",\n",
       "                    118.53\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-02T00:00:00\",\n",
       "                    117.44\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-03T00:00:00\",\n",
       "                    114.8\n",
       "                ]\n",
       "            ],\n",
       "            \"hoverAnimation\": true,\n",
       "            \"label\": {\n",
       "                \"show\": true,\n",
       "                \"margin\": 8\n",
       "            },\n",
       "            \"logBase\": 10,\n",
       "            \"seriesLayoutBy\": \"column\",\n",
       "            \"lineStyle\": {\n",
       "                \"show\": true,\n",
       "                \"width\": 1,\n",
       "                \"opacity\": 1,\n",
       "                \"curveness\": 0,\n",
       "                \"type\": \"solid\"\n",
       "            },\n",
       "            \"areaStyle\": {\n",
       "                \"opacity\": 0\n",
       "            },\n",
       "            \"zlevel\": 0,\n",
       "            \"z\": 0\n",
       "        }\n",
       "    ],\n",
       "    \"legend\": [\n",
       "        {\n",
       "            \"data\": [\n",
       "                \"\\u5f00\\u76d8\\u4ef7\",\n",
       "                \"\\u6536\\u76d8\\u4ef7\"\n",
       "            ],\n",
       "            \"selected\": {},\n",
       "            \"show\": true,\n",
       "            \"padding\": 5,\n",
       "            \"itemGap\": 10,\n",
       "            \"itemWidth\": 25,\n",
       "            \"itemHeight\": 14,\n",
       "            \"backgroundColor\": \"transparent\",\n",
       "            \"borderColor\": \"#ccc\",\n",
       "            \"borderRadius\": 0,\n",
       "            \"pageButtonItemGap\": 5,\n",
       "            \"pageButtonPosition\": \"end\",\n",
       "            \"pageFormatter\": \"{current}/{total}\",\n",
       "            \"pageIconColor\": \"#2f4554\",\n",
       "            \"pageIconInactiveColor\": \"#aaa\",\n",
       "            \"pageIconSize\": 15,\n",
       "            \"animationDurationUpdate\": 800,\n",
       "            \"selector\": false,\n",
       "            \"selectorPosition\": \"auto\",\n",
       "            \"selectorItemGap\": 7,\n",
       "            \"selectorButtonGap\": 10\n",
       "        }\n",
       "    ],\n",
       "    \"tooltip\": {\n",
       "        \"show\": true,\n",
       "        \"trigger\": \"axis\",\n",
       "        \"triggerOn\": \"mousemove|click\",\n",
       "        \"axisPointer\": {\n",
       "            \"type\": \"cross\"\n",
       "        },\n",
       "        \"showContent\": true,\n",
       "        \"alwaysShowContent\": false,\n",
       "        \"showDelay\": 0,\n",
       "        \"hideDelay\": 100,\n",
       "        \"enterable\": false,\n",
       "        \"confine\": false,\n",
       "        \"appendToBody\": false,\n",
       "        \"transitionDuration\": 0.4,\n",
       "        \"textStyle\": {\n",
       "            \"fontSize\": 14\n",
       "        },\n",
       "        \"borderWidth\": 0,\n",
       "        \"padding\": 5,\n",
       "        \"order\": \"seriesAsc\"\n",
       "    },\n",
       "    \"xAxis\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"scale\": false,\n",
       "            \"nameLocation\": \"end\",\n",
       "            \"nameGap\": 15,\n",
       "            \"gridIndex\": 0,\n",
       "            \"inverse\": false,\n",
       "            \"offset\": 0,\n",
       "            \"splitNumber\": 5,\n",
       "            \"minInterval\": 0,\n",
       "            \"splitLine\": {\n",
       "                \"show\": true,\n",
       "                \"lineStyle\": {\n",
       "                    \"show\": true,\n",
       "                    \"width\": 1,\n",
       "                    \"opacity\": 1,\n",
       "                    \"curveness\": 0,\n",
       "                    \"type\": \"solid\"\n",
       "                }\n",
       "            },\n",
       "            \"data\": [\n",
       "                \"2019-01-02T00:00:00\",\n",
       "                \"2019-01-03T00:00:00\",\n",
       "                \"2019-01-04T00:00:00\",\n",
       "                \"2019-01-07T00:00:00\",\n",
       "                \"2019-01-08T00:00:00\",\n",
       "                \"2019-01-09T00:00:00\",\n",
       "                \"2019-01-10T00:00:00\",\n",
       "                \"2019-01-11T00:00:00\",\n",
       "                \"2019-01-14T00:00:00\",\n",
       "                \"2019-01-15T00:00:00\",\n",
       "                \"2019-01-16T00:00:00\",\n",
       "                \"2019-01-17T00:00:00\",\n",
       "                \"2019-01-18T00:00:00\",\n",
       "                \"2019-01-22T00:00:00\",\n",
       "                \"2019-01-23T00:00:00\",\n",
       "                \"2019-01-24T00:00:00\",\n",
       "                \"2019-01-25T00:00:00\",\n",
       "                \"2019-01-28T00:00:00\",\n",
       "                \"2019-01-29T00:00:00\",\n",
       "                \"2019-01-30T00:00:00\",\n",
       "                \"2019-01-31T00:00:00\",\n",
       "                \"2019-02-08T00:00:00\",\n",
       "                \"2019-02-11T00:00:00\",\n",
       "                \"2019-02-12T00:00:00\",\n",
       "                \"2019-02-13T00:00:00\",\n",
       "                \"2019-02-14T00:00:00\",\n",
       "                \"2019-02-15T00:00:00\",\n",
       "                \"2019-02-19T00:00:00\",\n",
       "                \"2019-02-20T00:00:00\",\n",
       "                \"2019-02-21T00:00:00\",\n",
       "                \"2019-02-22T00:00:00\",\n",
       "                \"2019-02-25T00:00:00\",\n",
       "                \"2019-02-26T00:00:00\",\n",
       "                \"2019-02-27T00:00:00\",\n",
       "                \"2019-02-28T00:00:00\",\n",
       "                \"2019-03-01T00:00:00\",\n",
       "                \"2019-03-04T00:00:00\",\n",
       "                \"2019-03-05T00:00:00\",\n",
       "                \"2019-03-06T00:00:00\",\n",
       "                \"2019-03-07T00:00:00\",\n",
       "                \"2019-03-08T00:00:00\",\n",
       "                \"2019-03-11T00:00:00\",\n",
       "                \"2019-03-12T00:00:00\",\n",
       "                \"2019-03-13T00:00:00\",\n",
       "                \"2019-03-14T00:00:00\",\n",
       "                \"2019-03-15T00:00:00\",\n",
       "                \"2019-03-18T00:00:00\",\n",
       "                \"2019-03-19T00:00:00\",\n",
       "                \"2019-03-20T00:00:00\",\n",
       "                \"2019-03-21T00:00:00\",\n",
       "                \"2019-03-22T00:00:00\",\n",
       "                \"2019-03-25T00:00:00\",\n",
       "                \"2019-03-26T00:00:00\",\n",
       "                \"2019-03-27T00:00:00\",\n",
       "                \"2019-03-28T00:00:00\",\n",
       "                \"2019-03-29T00:00:00\",\n",
       "                \"2019-04-01T00:00:00\",\n",
       "                \"2019-04-02T00:00:00\",\n",
       "                \"2019-04-03T00:00:00\",\n",
       "                \"2019-04-04T00:00:00\",\n",
       "                \"2019-04-05T00:00:00\",\n",
       "                \"2019-04-08T00:00:00\",\n",
       "                \"2019-04-09T00:00:00\",\n",
       "                \"2019-04-10T00:00:00\",\n",
       "                \"2019-04-11T00:00:00\",\n",
       "                \"2019-04-12T00:00:00\",\n",
       "                \"2019-04-15T00:00:00\",\n",
       "                \"2019-04-16T00:00:00\",\n",
       "                \"2019-04-17T00:00:00\",\n",
       "                \"2019-04-18T00:00:00\",\n",
       "                \"2019-04-22T00:00:00\",\n",
       "                \"2019-04-23T00:00:00\",\n",
       "                \"2019-04-24T00:00:00\",\n",
       "                \"2019-04-25T00:00:00\",\n",
       "                \"2019-04-26T00:00:00\",\n",
       "                \"2019-04-29T00:00:00\",\n",
       "                \"2019-04-30T00:00:00\",\n",
       "                \"2019-05-01T00:00:00\",\n",
       "                \"2019-05-02T00:00:00\",\n",
       "                \"2019-05-03T00:00:00\",\n",
       "                \"2019-05-06T00:00:00\",\n",
       "                \"2019-05-07T00:00:00\",\n",
       "                \"2019-05-08T00:00:00\",\n",
       "                \"2019-05-09T00:00:00\",\n",
       "                \"2019-05-10T00:00:00\",\n",
       "                \"2019-05-13T00:00:00\",\n",
       "                \"2019-05-14T00:00:00\",\n",
       "                \"2019-05-15T00:00:00\",\n",
       "                \"2019-05-16T00:00:00\",\n",
       "                \"2019-05-17T00:00:00\",\n",
       "                \"2019-05-20T00:00:00\",\n",
       "                \"2019-05-21T00:00:00\",\n",
       "                \"2019-05-22T00:00:00\",\n",
       "                \"2019-05-23T00:00:00\",\n",
       "                \"2019-05-24T00:00:00\",\n",
       "                \"2019-05-28T00:00:00\",\n",
       "                \"2019-05-29T00:00:00\",\n",
       "                \"2019-05-30T00:00:00\",\n",
       "                \"2019-05-31T00:00:00\",\n",
       "                \"2019-06-03T00:00:00\",\n",
       "                \"2019-06-04T00:00:00\",\n",
       "                \"2019-06-05T00:00:00\",\n",
       "                \"2019-06-06T00:00:00\",\n",
       "                \"2019-06-07T00:00:00\",\n",
       "                \"2019-06-10T00:00:00\",\n",
       "                \"2019-06-11T00:00:00\",\n",
       "                \"2019-06-12T00:00:00\",\n",
       "                \"2019-06-13T00:00:00\",\n",
       "                \"2019-06-14T00:00:00\",\n",
       "                \"2019-06-17T00:00:00\",\n",
       "                \"2019-06-18T00:00:00\",\n",
       "                \"2019-06-19T00:00:00\",\n",
       "                \"2019-06-20T00:00:00\",\n",
       "                \"2019-06-24T00:00:00\",\n",
       "                \"2019-06-25T00:00:00\",\n",
       "                \"2019-06-26T00:00:00\",\n",
       "                \"2019-06-27T00:00:00\",\n",
       "                \"2019-06-28T00:00:00\",\n",
       "                \"2019-07-01T00:00:00\",\n",
       "                \"2019-07-02T00:00:00\",\n",
       "                \"2019-07-03T00:00:00\",\n",
       "                \"2019-07-05T00:00:00\",\n",
       "                \"2019-07-08T00:00:00\",\n",
       "                \"2019-07-09T00:00:00\",\n",
       "                \"2019-07-10T00:00:00\",\n",
       "                \"2019-07-11T00:00:00\",\n",
       "                \"2019-07-12T00:00:00\",\n",
       "                \"2019-07-15T00:00:00\",\n",
       "                \"2019-07-16T00:00:00\",\n",
       "                \"2019-07-17T00:00:00\",\n",
       "                \"2019-07-18T00:00:00\",\n",
       "                \"2019-07-19T00:00:00\",\n",
       "                \"2019-07-22T00:00:00\",\n",
       "                \"2019-07-23T00:00:00\",\n",
       "                \"2019-07-24T00:00:00\",\n",
       "                \"2019-07-25T00:00:00\",\n",
       "                \"2019-07-26T00:00:00\",\n",
       "                \"2019-07-29T00:00:00\",\n",
       "                \"2019-07-30T00:00:00\",\n",
       "                \"2019-07-31T00:00:00\",\n",
       "                \"2019-08-01T00:00:00\",\n",
       "                \"2019-08-02T00:00:00\",\n",
       "                \"2019-08-05T00:00:00\",\n",
       "                \"2019-08-06T00:00:00\",\n",
       "                \"2019-08-07T00:00:00\",\n",
       "                \"2019-08-08T00:00:00\",\n",
       "                \"2019-08-09T00:00:00\",\n",
       "                \"2019-08-12T00:00:00\",\n",
       "                \"2019-08-13T00:00:00\",\n",
       "                \"2019-08-14T00:00:00\",\n",
       "                \"2019-08-15T00:00:00\",\n",
       "                \"2019-08-16T00:00:00\",\n",
       "                \"2019-08-19T00:00:00\",\n",
       "                \"2019-08-20T00:00:00\",\n",
       "                \"2019-08-21T00:00:00\",\n",
       "                \"2019-08-22T00:00:00\",\n",
       "                \"2019-08-23T00:00:00\",\n",
       "                \"2019-08-26T00:00:00\",\n",
       "                \"2019-08-27T00:00:00\",\n",
       "                \"2019-08-28T00:00:00\",\n",
       "                \"2019-08-29T00:00:00\",\n",
       "                \"2019-08-30T00:00:00\",\n",
       "                \"2019-09-03T00:00:00\",\n",
       "                \"2019-09-04T00:00:00\",\n",
       "                \"2019-09-05T00:00:00\",\n",
       "                \"2019-09-06T00:00:00\",\n",
       "                \"2019-09-09T00:00:00\",\n",
       "                \"2019-09-10T00:00:00\",\n",
       "                \"2019-09-11T00:00:00\",\n",
       "                \"2019-09-12T00:00:00\",\n",
       "                \"2019-09-13T00:00:00\",\n",
       "                \"2019-09-16T00:00:00\",\n",
       "                \"2019-09-17T00:00:00\",\n",
       "                \"2019-09-18T00:00:00\",\n",
       "                \"2019-09-19T00:00:00\",\n",
       "                \"2019-09-20T00:00:00\",\n",
       "                \"2019-09-23T00:00:00\",\n",
       "                \"2019-09-24T00:00:00\",\n",
       "                \"2019-09-25T00:00:00\",\n",
       "                \"2019-09-26T00:00:00\",\n",
       "                \"2019-09-27T00:00:00\",\n",
       "                \"2019-09-30T00:00:00\",\n",
       "                \"2019-10-01T00:00:00\",\n",
       "                \"2019-10-02T00:00:00\",\n",
       "                \"2019-10-03T00:00:00\",\n",
       "                \"2019-10-04T00:00:00\",\n",
       "                \"2019-10-07T00:00:00\",\n",
       "                \"2019-10-08T00:00:00\",\n",
       "                \"2019-10-09T00:00:00\",\n",
       "                \"2019-10-10T00:00:00\",\n",
       "                \"2019-10-11T00:00:00\",\n",
       "                \"2019-10-14T00:00:00\",\n",
       "                \"2019-10-15T00:00:00\",\n",
       "                \"2019-10-16T00:00:00\",\n",
       "                \"2019-10-17T00:00:00\",\n",
       "                \"2019-10-18T00:00:00\",\n",
       "                \"2019-10-21T00:00:00\",\n",
       "                \"2019-10-22T00:00:00\",\n",
       "                \"2019-10-23T00:00:00\",\n",
       "                \"2019-10-24T00:00:00\",\n",
       "                \"2019-10-25T00:00:00\",\n",
       "                \"2019-10-28T00:00:00\",\n",
       "                \"2019-10-29T00:00:00\",\n",
       "                \"2019-10-30T00:00:00\",\n",
       "                \"2019-10-31T00:00:00\",\n",
       "                \"2019-11-01T00:00:00\",\n",
       "                \"2019-11-04T00:00:00\",\n",
       "                \"2019-11-05T00:00:00\",\n",
       "                \"2019-11-06T00:00:00\",\n",
       "                \"2019-11-07T00:00:00\",\n",
       "                \"2019-11-08T00:00:00\",\n",
       "                \"2019-11-11T00:00:00\",\n",
       "                \"2019-11-12T00:00:00\",\n",
       "                \"2019-11-13T00:00:00\",\n",
       "                \"2019-11-14T00:00:00\",\n",
       "                \"2019-11-15T00:00:00\",\n",
       "                \"2019-11-18T00:00:00\",\n",
       "                \"2019-11-19T00:00:00\",\n",
       "                \"2019-11-20T00:00:00\",\n",
       "                \"2019-11-21T00:00:00\",\n",
       "                \"2019-11-22T00:00:00\",\n",
       "                \"2019-11-25T00:00:00\",\n",
       "                \"2019-11-26T00:00:00\",\n",
       "                \"2019-11-27T00:00:00\",\n",
       "                \"2019-11-29T00:00:00\",\n",
       "                \"2019-12-02T00:00:00\",\n",
       "                \"2019-12-03T00:00:00\"\n",
       "            ]\n",
       "        }\n",
       "    ],\n",
       "    \"yAxis\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"scale\": false,\n",
       "            \"nameLocation\": \"end\",\n",
       "            \"nameGap\": 15,\n",
       "            \"gridIndex\": 0,\n",
       "            \"inverse\": false,\n",
       "            \"offset\": 0,\n",
       "            \"splitNumber\": 5,\n",
       "            \"minInterval\": 0,\n",
       "            \"splitLine\": {\n",
       "                \"show\": true,\n",
       "                \"lineStyle\": {\n",
       "                    \"show\": true,\n",
       "                    \"width\": 1,\n",
       "                    \"opacity\": 1,\n",
       "                    \"curveness\": 0,\n",
       "                    \"type\": \"solid\"\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    ],\n",
       "    \"title\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"text\": \"2019\\u767e\\u5ea6\\u80a1\\u7968\",\n",
       "            \"target\": \"blank\",\n",
       "            \"subtarget\": \"blank\",\n",
       "            \"padding\": 5,\n",
       "            \"itemGap\": 10,\n",
       "            \"textAlign\": \"auto\",\n",
       "            \"textVerticalAlign\": \"auto\",\n",
       "            \"triggerEvent\": false\n",
       "        }\n",
       "    ]\n",
       "};\n",
       "        chart_bd8308d513dc46a2806ba3bbc69fc580.setOption(option_bd8308d513dc46a2806ba3bbc69fc580);\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 渲染数据，即画图\n",
    "# 交互型的图，可以隐藏图线以做对比，会有交互性的十字标\n",
    "# pyecharts还有更多图，可自行搜索\n",
    "# line.render_notebook()不显示，下方替代方法存为网页文件进而引入\n",
    "from IPython.display import HTML\n",
    "# 渲染图表到 HTML 文件\n",
    "line.render('baidu_stock_2019.html')\n",
    "# 在 Jupyter Notebook 中显示 HTML 文件\n",
    "with open('baidu_stock_2019.html', 'r', encoding='utf-8') as f:\n",
    "    html_content = f.read()\n",
    "display(HTML(html_content))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f45db63-47d6-4889-8784-7127320a5e37",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cef6611-0530-4245-a3c8-be33f39a3998",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "id": "aeda4495-6b27-4d08-859a-d8bc850062ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点五、pandas结合sklearn实现机器学习——泰坦尼克预测\n",
    "# 通过历史数据得出规律，用于推荐系统\n",
    "# 实例：泰坦尼克生存预测（stata原始数据）：根据历史训练数据（包括个人信息，是否有父母兄弟，仓位情况，票务等）以及是否存活的数据\n",
    "#      将这些数据输入给机器学习模型（输入个人信息，父母兄弟，仓位票务等，输出存活概率）以形成模型\n",
    "#      进而输入新的数据（个人信息，父母兄弟，仓位票务）等信息进入模型，此时存活状况未知，模型会反馈一个存活概率"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 661,
   "id": "4751410f-62b5-4a04-9f52-db11595db3ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pandas结合sklearn实现泰坦尼克存活率预测\n",
    "# 处理步骤\n",
    "# 1 输入数据：使用pandas读取训练数据（历史数据且知道对象是否存活）\n",
    "# 2 训练模型：使用sklearn训练模型\n",
    "# 3 使用模型：预测一个已知一些信息的人的存活率"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "id": "5f8c0f06-14eb-42d9-b4b9-af8e47c9e305",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                    Name     Sex   Age  SibSp  \\\n",
       "0                                Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Thayer)  female  38.0      1   \n",
       "2                                 Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3           Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                               Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                   ...     ...   ...    ...   \n",
       "886                                Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                         Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888             Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                                Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                  Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 662,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "df_train=pd.read_csv('./datas/titanic/titanic_train.csv')\n",
    "df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "id": "4a5d72a0-7a47-4082-b0ff-fb071ea83ce9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Parch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass  Parch\n",
       "0         3      0\n",
       "1         1      0\n",
       "2         3      0\n",
       "3         1      0\n",
       "4         3      0\n",
       "..      ...    ...\n",
       "886       2      0\n",
       "887       1      0\n",
       "888       3      2\n",
       "889       1      0\n",
       "890       3      0\n",
       "\n",
       "[891 rows x 2 columns]"
      ]
     },
     "execution_count": 663,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 挑选两列，作为预测所需要的特征\n",
    "feature_cols=['Pclass','Parch']\n",
    "X=df_train.loc[:,feature_cols]\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "id": "49c3e270-05e7-48b1-907c-8639445fb742",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      0\n",
       "      ..\n",
       "886    0\n",
       "887    1\n",
       "888    0\n",
       "889    1\n",
       "890    0\n",
       "Name: Survived, Length: 891, dtype: int64"
      ]
     },
     "execution_count": 664,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 单独提取是否存活的一列，作为预测的结果\n",
    "y=df_train.Survived\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcae557d-eb5f-4b8b-b07f-f2f20690ebf9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "id": "11efe21f-9fe0-43a6-a22e-ce26fdf34f13",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 训练模型sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 666,
   "id": "995b1c3f-eae6-4d33-88c9-3f1c2c22c04e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-12 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-12 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-12 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-12 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-12 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-12 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-12 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-12 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-12 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-12 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-12 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-12 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-12 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-12 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-12 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-12 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 666,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 建模策略可以结合计量经济学对不同数据不评估，选择适合的模型与统计方式\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "# 创建模型，建模，建立回归模型\n",
    "logreg=LogisticRegression()\n",
    "logreg.fit(X,y) # 拟合数据为X里面的两个变量与y\n",
    "# 调用与形成模型简单，但是优化较为困难，通过所学习的计量经济学与stata结合编程进行利用"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c72b4aa1-6336-453e-b20e-95b22b0f29f1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "id": "b5d07172-4fd7-43a8-adfb-b804a76c443b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Parch</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass  Parch\n",
       "1         1      0\n",
       "54        1      1\n",
       "27        1      2\n",
       "438       1      4\n",
       "9         2      0\n",
       "98        2      1\n",
       "43        2      2\n",
       "437       2      3\n",
       "0         3      0\n",
       "7         3      1\n",
       "8         3      2\n",
       "86        3      3\n",
       "167       3      4\n",
       "13        3      5\n",
       "678       3      6"
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 对于未知数据使用模型\n",
    "# 构造新数据\n",
    "X.drop_duplicates().sort_values(by=['Pclass','Parch']) # 去重排序，以便输入原始数据中没有的数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 668,
   "id": "253464b9-0356-4613-9e55-dc554a92379f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Python312\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([1], dtype=int64)"
      ]
     },
     "execution_count": 668,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.predict([[2,4]]) # 存活，报错忽略"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 669,
   "id": "6c25c22f-6da7-44d5-bd9a-be7d498f60d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1]\n"
     ]
    }
   ],
   "source": [
    "# 填入数据，预测存活概率，这是对应DataFrame格式输入与输出的数据\n",
    "new_data = {'Pclass': [2], 'Parch': [5]}\n",
    "new_X = pd.DataFrame(new_data)  # 新的预测特征\n",
    "prediction = logreg.predict(new_X)\n",
    "print(prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 670,
   "id": "367a7590-01aa-4fd1-a23d-86299680f4a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Python312\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.34976582, 0.65023418]])"
      ]
     },
     "execution_count": 670,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 预测活与不活分别的概率,sklearn会提取概率大的结果\n",
    "logreg.predict_proba([[2,4]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66d846ff-2cc2-4a90-9566-f7749d213ef9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21bd4be5-63d4-47c5-a593-b38e1513d1d8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 671,
   "id": "d753da31-5f10-4d41-8d50-dd967fe4a1e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点六、pandas实现原始网站访问日志分析\n",
    "# 文件中有5天的访问日志\n",
    "# 访问日志内容示例：192.168.1.1 - - [08/Sep/2024:12:00:00 +0000] \"GET /index.html HTTP/1.1\" 200 1024 \"http://example.com\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\"\n",
    "# 客户端IP：192.168.1.1  请求时间：[08/Sep/2024:12:00:00 +0000]  HTTP方法：GET  请求资源：/index.html  协议：HTTP/1.1  状态码：200\n",
    "# 响应大小：1024字节  引用页面：http://example.com  用户代理：Mozilla/5.0 (Windows NT 10.0; Win64; x64)\n",
    "# 日志特征：杂乱化（空格分隔）→对数据读取，清洗与处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 672,
   "id": "41a5ec19-aae0-4eed-866c-3da9b931f264",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 需求：pandas处理分析 网站原始访问日志，数据来源（https://www.crazyant.net/）\n",
    "# 实现步骤：读取，清洗，格式化数据 → 统计爬虫spider的访问比例，输出柱状图 → 统计http状态码的访问占比，输出饼图 → 统计按小时，按天的PU/UV流量趋势，输出折线图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "id": "3f63a6ab-01d5-42a7-8be8-13e400e6a72c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据并清洗与格式化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "id": "6747adb0-092d-4be5-9e1b-7cc97191e31b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "pd.set_option('display.max_colwidth', None)\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Bar, Pie, Line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "id": "b64cb0f1-04d2-44df-b0e7-0a5d5c8623d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>106.11.153.226</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>[02/Dec/2019:22:40:18</td>\n",
       "      <td>+0800]</td>\n",
       "      <td>GET /740.html?replytocom=1194 HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>13446</td>\n",
       "      <td>-</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.156.254.60</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>[02/Dec/2019:22:40:23</td>\n",
       "      <td>+0800]</td>\n",
       "      <td>POST /wp-json/wordpress-popular-posts/v1/popular-posts HTTP/1.0</td>\n",
       "      <td>201</td>\n",
       "      <td>55</td>\n",
       "      <td>http://www.crazyant.net/740.html?replytocom=1194</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106.11.159.254</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>[02/Dec/2019:22:40:27</td>\n",
       "      <td>+0800]</td>\n",
       "      <td>GET /576.html HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>13461</td>\n",
       "      <td>-</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>106.11.157.254</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>[02/Dec/2019:22:40:28</td>\n",
       "      <td>+0800]</td>\n",
       "      <td>GET /?lwfcdw=t9n2d3&amp;oqzohc=m5e7j1&amp;oubyvq=iab6a3&amp;oudmbg=6osqd3 HTTP/1.0</td>\n",
       "      <td>200</td>\n",
       "      <td>10485</td>\n",
       "      <td>-</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42.156.137.109</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>[02/Dec/2019:22:40:30</td>\n",
       "      <td>+0800]</td>\n",
       "      <td>POST /wp-json/wordpress-popular-posts/v1/popular-posts HTTP/1.0</td>\n",
       "      <td>201</td>\n",
       "      <td>55</td>\n",
       "      <td>http://www.crazyant.net/576.html</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0  1  2                      3       4  \\\n",
       "0  106.11.153.226  -  -  [02/Dec/2019:22:40:18  +0800]   \n",
       "1   42.156.254.60  -  -  [02/Dec/2019:22:40:23  +0800]   \n",
       "2  106.11.159.254  -  -  [02/Dec/2019:22:40:27  +0800]   \n",
       "3  106.11.157.254  -  -  [02/Dec/2019:22:40:28  +0800]   \n",
       "4  42.156.137.109  -  -  [02/Dec/2019:22:40:30  +0800]   \n",
       "\n",
       "                                                                        5  \\\n",
       "0                                  GET /740.html?replytocom=1194 HTTP/1.0   \n",
       "1         POST /wp-json/wordpress-popular-posts/v1/popular-posts HTTP/1.0   \n",
       "2                                                  GET /576.html HTTP/1.0   \n",
       "3  GET /?lwfcdw=t9n2d3&oqzohc=m5e7j1&oubyvq=iab6a3&oudmbg=6osqd3 HTTP/1.0   \n",
       "4         POST /wp-json/wordpress-popular-posts/v1/popular-posts HTTP/1.0   \n",
       "\n",
       "     6      7                                                 8  \\\n",
       "0  200  13446                                                 -   \n",
       "1  201     55  http://www.crazyant.net/740.html?replytocom=1194   \n",
       "2  200  13461                                                 -   \n",
       "3  200  10485                                                 -   \n",
       "4  201     55                  http://www.crazyant.net/576.html   \n",
       "\n",
       "                                                                                                                                   9  \n",
       "0                                                                                                                        YisouSpider  \n",
       "1  Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36  \n",
       "2                                                                                                                        YisouSpider  \n",
       "3                                                                                                                        YisouSpider  \n",
       "4  Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36  "
      ]
     },
     "execution_count": 675,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "data_dir = './datas/crazyant/blog_access_log'\n",
    "df_list = []\n",
    "\n",
    "# 遍历目录中的所有文件\n",
    "for fname in os.listdir(data_dir):\n",
    "    file_path = os.path.join(data_dir, fname)\n",
    "    \n",
    "    # 读取CSV文件，处理错误行\n",
    "    df_list.append(pd.read_csv(file_path, sep=' ', header=None, on_bad_lines='skip')) # sep分隔符为空格，header为空，on_bad_lines是跳过问题行，报错也跳过\n",
    "\n",
    "# 合并所有DataFrame\n",
    "df = pd.concat(df_list, ignore_index=True)\n",
    "\n",
    "# 查看合并后的 DataFrame\n",
    "df.head()\n",
    "# 未指定header，所有列columns都是数字，我们所需的是0IP，3时间，6状态码（200为读取成功），9client客户"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "id": "e9995f75-fc57-4564-8b58-5562b2d2d6ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>3</th>\n",
       "      <th>6</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>106.11.153.226</td>\n",
       "      <td>[02/Dec/2019:22:40:18</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.156.254.60</td>\n",
       "      <td>[02/Dec/2019:22:40:23</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106.11.159.254</td>\n",
       "      <td>[02/Dec/2019:22:40:27</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>106.11.157.254</td>\n",
       "      <td>[02/Dec/2019:22:40:28</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42.156.137.109</td>\n",
       "      <td>[02/Dec/2019:22:40:30</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50273</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:22</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50274</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:23</td>\n",
       "      <td>404</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50275</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:30:56</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50276</th>\n",
       "      <td>58.23.18.239</td>\n",
       "      <td>[07/Dec/2019:21:30:58</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50277</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:31:02</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50278 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    0                      3    6  \\\n",
       "0      106.11.153.226  [02/Dec/2019:22:40:18  200   \n",
       "1       42.156.254.60  [02/Dec/2019:22:40:23  201   \n",
       "2      106.11.159.254  [02/Dec/2019:22:40:27  200   \n",
       "3      106.11.157.254  [02/Dec/2019:22:40:28  200   \n",
       "4      42.156.137.109  [02/Dec/2019:22:40:30  201   \n",
       "...               ...                    ...  ...   \n",
       "50273  213.180.203.16  [07/Dec/2019:21:30:22  201   \n",
       "50274  213.180.203.16  [07/Dec/2019:21:30:23  404   \n",
       "50275    141.8.132.24  [07/Dec/2019:21:30:56  200   \n",
       "50276    58.23.18.239  [07/Dec/2019:21:30:58  200   \n",
       "50277    141.8.132.24  [07/Dec/2019:21:31:02  201   \n",
       "\n",
       "                                                                                                                                       9  \n",
       "0                                                                                                                            YisouSpider  \n",
       "1      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36  \n",
       "2                                                                                                                            YisouSpider  \n",
       "3                                                                                                                            YisouSpider  \n",
       "4      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36  \n",
       "...                                                                                                                                  ...  \n",
       "50273                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)  \n",
       "50274                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)  \n",
       "50275       Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106  \n",
       "50276                     Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36  \n",
       "50277                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)  \n",
       "\n",
       "[50278 rows x 4 columns]"
      ]
     },
     "execution_count": 676,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new=df[[0,3,6,9]].copy() # 筛选数据\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 677,
   "id": "13c227f8-838b-48b9-b30e-d8a1ffdacaa9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ip</th>\n",
       "      <th>stime</th>\n",
       "      <th>status_code</th>\n",
       "      <th>client</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>106.11.153.226</td>\n",
       "      <td>[02/Dec/2019:22:40:18</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.156.254.60</td>\n",
       "      <td>[02/Dec/2019:22:40:23</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106.11.159.254</td>\n",
       "      <td>[02/Dec/2019:22:40:27</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>106.11.157.254</td>\n",
       "      <td>[02/Dec/2019:22:40:28</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42.156.137.109</td>\n",
       "      <td>[02/Dec/2019:22:40:30</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50273</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:22</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50274</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:23</td>\n",
       "      <td>404</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50275</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:30:56</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50276</th>\n",
       "      <td>58.23.18.239</td>\n",
       "      <td>[07/Dec/2019:21:30:58</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50277</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:31:02</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50278 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ip                  stime  status_code  \\\n",
       "0      106.11.153.226  [02/Dec/2019:22:40:18          200   \n",
       "1       42.156.254.60  [02/Dec/2019:22:40:23          201   \n",
       "2      106.11.159.254  [02/Dec/2019:22:40:27          200   \n",
       "3      106.11.157.254  [02/Dec/2019:22:40:28          200   \n",
       "4      42.156.137.109  [02/Dec/2019:22:40:30          201   \n",
       "...               ...                    ...          ...   \n",
       "50273  213.180.203.16  [07/Dec/2019:21:30:22          201   \n",
       "50274  213.180.203.16  [07/Dec/2019:21:30:23          404   \n",
       "50275    141.8.132.24  [07/Dec/2019:21:30:56          200   \n",
       "50276    58.23.18.239  [07/Dec/2019:21:30:58          200   \n",
       "50277    141.8.132.24  [07/Dec/2019:21:31:02          201   \n",
       "\n",
       "                                                                                                                                  client  \n",
       "0                                                                                                                            YisouSpider  \n",
       "1      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36  \n",
       "2                                                                                                                            YisouSpider  \n",
       "3                                                                                                                            YisouSpider  \n",
       "4      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36  \n",
       "...                                                                                                                                  ...  \n",
       "50273                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)  \n",
       "50274                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)  \n",
       "50275       Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106  \n",
       "50276                     Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36  \n",
       "50277                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)  \n",
       "\n",
       "[50278 rows x 4 columns]"
      ]
     },
     "execution_count": 677,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new.columns=['ip','stime','status_code','client']\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "id": "96dfdfce-3114-4472-a9a3-12e308af0991",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ip             object\n",
       "stime          object\n",
       "status_code     int64\n",
       "client         object\n",
       "dtype: object"
      ]
     },
     "execution_count": 678,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d05a9636-0e29-47db-a643-e21152332132",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 679,
   "id": "aa5b4922-5e6f-4e7e-9647-02939a5152ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 统计爬虫spider用户访问的比例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 680,
   "id": "46fb9464-29bd-45aa-917d-553dcf72d735",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ip</th>\n",
       "      <th>stime</th>\n",
       "      <th>status_code</th>\n",
       "      <th>client</th>\n",
       "      <th>ispider</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>106.11.153.226</td>\n",
       "      <td>[02/Dec/2019:22:40:18</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.156.254.60</td>\n",
       "      <td>[02/Dec/2019:22:40:23</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106.11.159.254</td>\n",
       "      <td>[02/Dec/2019:22:40:27</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>106.11.157.254</td>\n",
       "      <td>[02/Dec/2019:22:40:28</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42.156.137.109</td>\n",
       "      <td>[02/Dec/2019:22:40:30</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50273</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:22</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50274</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:23</td>\n",
       "      <td>404</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50275</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:30:56</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50276</th>\n",
       "      <td>58.23.18.239</td>\n",
       "      <td>[07/Dec/2019:21:30:58</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50277</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:31:02</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50278 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ip                  stime  status_code  \\\n",
       "0      106.11.153.226  [02/Dec/2019:22:40:18          200   \n",
       "1       42.156.254.60  [02/Dec/2019:22:40:23          201   \n",
       "2      106.11.159.254  [02/Dec/2019:22:40:27          200   \n",
       "3      106.11.157.254  [02/Dec/2019:22:40:28          200   \n",
       "4      42.156.137.109  [02/Dec/2019:22:40:30          201   \n",
       "...               ...                    ...          ...   \n",
       "50273  213.180.203.16  [07/Dec/2019:21:30:22          201   \n",
       "50274  213.180.203.16  [07/Dec/2019:21:30:23          404   \n",
       "50275    141.8.132.24  [07/Dec/2019:21:30:56          200   \n",
       "50276    58.23.18.239  [07/Dec/2019:21:30:58          200   \n",
       "50277    141.8.132.24  [07/Dec/2019:21:31:02          201   \n",
       "\n",
       "                                                                                                                                  client  \\\n",
       "0                                                                                                                            YisouSpider   \n",
       "1      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "2                                                                                                                            YisouSpider   \n",
       "3                                                                                                                            YisouSpider   \n",
       "4      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "...                                                                                                                                  ...   \n",
       "50273                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "50274                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "50275       Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106   \n",
       "50276                     Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36   \n",
       "50277                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "\n",
       "       ispider  \n",
       "0         True  \n",
       "1         True  \n",
       "2         True  \n",
       "3         True  \n",
       "4         True  \n",
       "...        ...  \n",
       "50273    False  \n",
       "50274    False  \n",
       "50275    False  \n",
       "50276    False  \n",
       "50277    False  \n",
       "\n",
       "[50278 rows x 5 columns]"
      ]
     },
     "execution_count": 680,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new['ispider']=df_new['client'].str.lower().str.contains('spider') # 增加新列\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 681,
   "id": "de5e5aa1-b5e6-45c0-a360-b987b4852fc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ispider\n",
       "False    46641\n",
       "True      3637\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 681,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new_spider=df_new['ispider'].value_counts() # df_new_spider是df_new的ispider列\n",
    "df_new_spider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 682,
   "id": "baf1bbef-70d6-40b0-b618-eb32b7e7bb0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([False, True], dtype='bool', name='ispider')"
      ]
     },
     "execution_count": 682,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new_spider.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 683,
   "id": "73c8957a-c49c-4221-97a6-818dc2e414e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "</head>\n",
       "<body>\n",
       "        <div id=\"8647478f93a34a5fbcb348e2f1f5cf90\" class=\"chart-container\" style=\"width:900px; height:500px; \"></div>\n",
       "    <script>\n",
       "        var chart_8647478f93a34a5fbcb348e2f1f5cf90 = echarts.init(\n",
       "            document.getElementById('8647478f93a34a5fbcb348e2f1f5cf90'), 'white', {renderer: 'canvas'});\n",
       "        var option_8647478f93a34a5fbcb348e2f1f5cf90 = {\n",
       "    \"animation\": true,\n",
       "    \"animationThreshold\": 2000,\n",
       "    \"animationDuration\": 1000,\n",
       "    \"animationEasing\": \"cubicOut\",\n",
       "    \"animationDelay\": 0,\n",
       "    \"animationDurationUpdate\": 300,\n",
       "    \"animationEasingUpdate\": \"cubicOut\",\n",
       "    \"animationDelayUpdate\": 0,\n",
       "    \"aria\": {\n",
       "        \"enabled\": false\n",
       "    },\n",
       "    \"color\": [\n",
       "        \"#5470c6\",\n",
       "        \"#91cc75\",\n",
       "        \"#fac858\",\n",
       "        \"#ee6666\",\n",
       "        \"#73c0de\",\n",
       "        \"#3ba272\",\n",
       "        \"#fc8452\",\n",
       "        \"#9a60b4\",\n",
       "        \"#ea7ccc\"\n",
       "    ],\n",
       "    \"series\": [\n",
       "        {\n",
       "            \"type\": \"bar\",\n",
       "            \"name\": \"\\u662f\\u5426\\u722c\\u866b\",\n",
       "            \"legendHoverLink\": true,\n",
       "            \"data\": [\n",
       "                46641,\n",
       "                3637\n",
       "            ],\n",
       "            \"realtimeSort\": false,\n",
       "            \"showBackground\": false,\n",
       "            \"stackStrategy\": \"samesign\",\n",
       "            \"cursor\": \"pointer\",\n",
       "            \"barMinHeight\": 0,\n",
       "            \"barCategoryGap\": \"20%\",\n",
       "            \"barGap\": \"30%\",\n",
       "            \"large\": false,\n",
       "            \"largeThreshold\": 400,\n",
       "            \"seriesLayoutBy\": \"column\",\n",
       "            \"datasetIndex\": 0,\n",
       "            \"clip\": true,\n",
       "            \"zlevel\": 0,\n",
       "            \"z\": 2,\n",
       "            \"label\": {\n",
       "                \"show\": true,\n",
       "                \"margin\": 8\n",
       "            }\n",
       "        }\n",
       "    ],\n",
       "    \"legend\": [\n",
       "        {\n",
       "            \"data\": [\n",
       "                \"\\u662f\\u5426\\u722c\\u866b\"\n",
       "            ],\n",
       "            \"selected\": {},\n",
       "            \"show\": true,\n",
       "            \"padding\": 5,\n",
       "            \"itemGap\": 10,\n",
       "            \"itemWidth\": 25,\n",
       "            \"itemHeight\": 14,\n",
       "            \"backgroundColor\": \"transparent\",\n",
       "            \"borderColor\": \"#ccc\",\n",
       "            \"borderRadius\": 0,\n",
       "            \"pageButtonItemGap\": 5,\n",
       "            \"pageButtonPosition\": \"end\",\n",
       "            \"pageFormatter\": \"{current}/{total}\",\n",
       "            \"pageIconColor\": \"#2f4554\",\n",
       "            \"pageIconInactiveColor\": \"#aaa\",\n",
       "            \"pageIconSize\": 15,\n",
       "            \"animationDurationUpdate\": 800,\n",
       "            \"selector\": false,\n",
       "            \"selectorPosition\": \"auto\",\n",
       "            \"selectorItemGap\": 7,\n",
       "            \"selectorButtonGap\": 10\n",
       "        }\n",
       "    ],\n",
       "    \"tooltip\": {\n",
       "        \"show\": true,\n",
       "        \"trigger\": \"item\",\n",
       "        \"triggerOn\": \"mousemove|click\",\n",
       "        \"axisPointer\": {\n",
       "            \"type\": \"line\"\n",
       "        },\n",
       "        \"showContent\": true,\n",
       "        \"alwaysShowContent\": false,\n",
       "        \"showDelay\": 0,\n",
       "        \"hideDelay\": 100,\n",
       "        \"enterable\": false,\n",
       "        \"confine\": false,\n",
       "        \"appendToBody\": false,\n",
       "        \"transitionDuration\": 0.4,\n",
       "        \"textStyle\": {\n",
       "            \"fontSize\": 14\n",
       "        },\n",
       "        \"borderWidth\": 0,\n",
       "        \"padding\": 5,\n",
       "        \"order\": \"seriesAsc\"\n",
       "    },\n",
       "    \"xAxis\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"scale\": false,\n",
       "            \"nameLocation\": \"end\",\n",
       "            \"nameGap\": 15,\n",
       "            \"gridIndex\": 0,\n",
       "            \"inverse\": false,\n",
       "            \"offset\": 0,\n",
       "            \"splitNumber\": 5,\n",
       "            \"minInterval\": 0,\n",
       "            \"splitLine\": {\n",
       "                \"show\": true,\n",
       "                \"lineStyle\": {\n",
       "                    \"show\": true,\n",
       "                    \"width\": 1,\n",
       "                    \"opacity\": 1,\n",
       "                    \"curveness\": 0,\n",
       "                    \"type\": \"solid\"\n",
       "                }\n",
       "            },\n",
       "            \"data\": [\n",
       "                \"False\",\n",
       "                \"True\"\n",
       "            ]\n",
       "        }\n",
       "    ],\n",
       "    \"yAxis\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"scale\": false,\n",
       "            \"nameLocation\": \"end\",\n",
       "            \"nameGap\": 15,\n",
       "            \"gridIndex\": 0,\n",
       "            \"inverse\": false,\n",
       "            \"offset\": 0,\n",
       "            \"splitNumber\": 5,\n",
       "            \"minInterval\": 0,\n",
       "            \"splitLine\": {\n",
       "                \"show\": true,\n",
       "                \"lineStyle\": {\n",
       "                    \"show\": true,\n",
       "                    \"width\": 1,\n",
       "                    \"opacity\": 1,\n",
       "                    \"curveness\": 0,\n",
       "                    \"type\": \"solid\"\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    ],\n",
       "    \"title\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"text\": \"\\u722c\\u866b\\u8bbf\\u95ee\\u603b\\u91cf\\u5bf9\\u6bd4\",\n",
       "            \"target\": \"blank\",\n",
       "            \"subtarget\": \"blank\",\n",
       "            \"padding\": 5,\n",
       "            \"itemGap\": 10,\n",
       "            \"textAlign\": \"auto\",\n",
       "            \"textVerticalAlign\": \"auto\",\n",
       "            \"triggerEvent\": false\n",
       "        }\n",
       "    ]\n",
       "};\n",
       "        chart_8647478f93a34a5fbcb348e2f1f5cf90.setOption(option_8647478f93a34a5fbcb348e2f1f5cf90);\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<pyecharts.render.display.HTML at 0x1886e971e20>"
      ]
     },
     "execution_count": 683,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 对比柱状图\n",
    "bar=(\n",
    "    Bar()\n",
    "    .add_xaxis([str(x) for x in df_new_spider.index])\n",
    "    .add_yaxis('是否爬虫',df_new_spider.values.tolist())\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='爬虫访问总量对比'))\n",
    ")\n",
    "bar.render_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fd6b5b9-7e13-4230-8e16-e67fb2c09757",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 684,
   "id": "8bfee338-dfe8-4722-8382-bca270f8a7b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 访问状态码的数量对比（网页服务器返回的码，200为正常访问）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 685,
   "id": "61a3cc6a-d922-4870-badc-55dd8bf38575",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "status_code\n",
       "200    41924\n",
       "201     3432\n",
       "206       70\n",
       "301     2364\n",
       "302       23\n",
       "304       19\n",
       "400       20\n",
       "403       92\n",
       "404     1474\n",
       "405       12\n",
       "444      846\n",
       "500        1\n",
       "504        1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 685,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new_status_code=df_new.groupby('status_code').size() # 按照访问码有几类进行分类，并用size统计大小\n",
    "df_new_status_code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 686,
   "id": "7880068d-84cd-4da8-825d-0d022f2c7dac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(200, 41924),\n",
       " (201, 3432),\n",
       " (206, 70),\n",
       " (301, 2364),\n",
       " (302, 23),\n",
       " (304, 19),\n",
       " (400, 20),\n",
       " (403, 92),\n",
       " (404, 1474),\n",
       " (405, 12),\n",
       " (444, 846),\n",
       " (500, 1),\n",
       " (504, 1)]"
      ]
     },
     "execution_count": 686,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(zip(df_new_status_code.index,df_new_status_code)) # 饼图传入的数据格式，一个index，一个value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 687,
   "id": "077dfdd9-2688-47c5-af2c-d883dda882aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "</head>\n",
       "<body>\n",
       "        <div id=\"ace3656bf1e5471783f12e04baed928e\" class=\"chart-container\" style=\"width:900px; height:500px; \"></div>\n",
       "    <script>\n",
       "        var chart_ace3656bf1e5471783f12e04baed928e = echarts.init(\n",
       "            document.getElementById('ace3656bf1e5471783f12e04baed928e'), 'white', {renderer: 'canvas'});\n",
       "        var option_ace3656bf1e5471783f12e04baed928e = {\n",
       "    \"animation\": true,\n",
       "    \"animationThreshold\": 2000,\n",
       "    \"animationDuration\": 1000,\n",
       "    \"animationEasing\": \"cubicOut\",\n",
       "    \"animationDelay\": 0,\n",
       "    \"animationDurationUpdate\": 300,\n",
       "    \"animationEasingUpdate\": \"cubicOut\",\n",
       "    \"animationDelayUpdate\": 0,\n",
       "    \"aria\": {\n",
       "        \"enabled\": false\n",
       "    },\n",
       "    \"color\": [\n",
       "        \"#5470c6\",\n",
       "        \"#91cc75\",\n",
       "        \"#fac858\",\n",
       "        \"#ee6666\",\n",
       "        \"#73c0de\",\n",
       "        \"#3ba272\",\n",
       "        \"#fc8452\",\n",
       "        \"#9a60b4\",\n",
       "        \"#ea7ccc\"\n",
       "    ],\n",
       "    \"series\": [\n",
       "        {\n",
       "            \"type\": \"pie\",\n",
       "            \"name\": \"\\u72b6\\u6001\\u7801\\u6bd4\\u4f8b\",\n",
       "            \"colorBy\": \"data\",\n",
       "            \"legendHoverLink\": true,\n",
       "            \"selectedMode\": false,\n",
       "            \"selectedOffset\": 10,\n",
       "            \"clockwise\": true,\n",
       "            \"startAngle\": 90,\n",
       "            \"minAngle\": 0,\n",
       "            \"minShowLabelAngle\": 0,\n",
       "            \"avoidLabelOverlap\": true,\n",
       "            \"stillShowZeroSum\": true,\n",
       "            \"percentPrecision\": 2,\n",
       "            \"showEmptyCircle\": true,\n",
       "            \"emptyCircleStyle\": {\n",
       "                \"color\": \"lightgray\",\n",
       "                \"borderColor\": \"#000\",\n",
       "                \"borderWidth\": 0,\n",
       "                \"borderType\": \"solid\",\n",
       "                \"borderDashOffset\": 0,\n",
       "                \"borderCap\": \"butt\",\n",
       "                \"borderJoin\": \"bevel\",\n",
       "                \"borderMiterLimit\": 10,\n",
       "                \"opacity\": 1\n",
       "            },\n",
       "            \"data\": [\n",
       "                {\n",
       "                    \"name\": 200,\n",
       "                    \"value\": 41924\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 201,\n",
       "                    \"value\": 3432\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 206,\n",
       "                    \"value\": 70\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 301,\n",
       "                    \"value\": 2364\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 302,\n",
       "                    \"value\": 23\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 304,\n",
       "                    \"value\": 19\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 400,\n",
       "                    \"value\": 20\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 403,\n",
       "                    \"value\": 92\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 404,\n",
       "                    \"value\": 1474\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 405,\n",
       "                    \"value\": 12\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 444,\n",
       "                    \"value\": 846\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 500,\n",
       "                    \"value\": 1\n",
       "                },\n",
       "                {\n",
       "                    \"name\": 504,\n",
       "                    \"value\": 1\n",
       "                }\n",
       "            ],\n",
       "            \"radius\": [\n",
       "                \"0%\",\n",
       "                \"75%\"\n",
       "            ],\n",
       "            \"center\": [\n",
       "                \"50%\",\n",
       "                \"50%\"\n",
       "            ],\n",
       "            \"label\": {\n",
       "                \"show\": true,\n",
       "                \"margin\": 8,\n",
       "                \"formatter\": \"{b}:{c}\"\n",
       "            },\n",
       "            \"labelLine\": {\n",
       "                \"show\": true,\n",
       "                \"showAbove\": false,\n",
       "                \"length\": 15,\n",
       "                \"length2\": 15,\n",
       "                \"smooth\": false,\n",
       "                \"minTurnAngle\": 90,\n",
       "                \"maxSurfaceAngle\": 90\n",
       "            },\n",
       "            \"rippleEffect\": {\n",
       "                \"show\": true,\n",
       "                \"brushType\": \"stroke\",\n",
       "                \"scale\": 2.5,\n",
       "                \"period\": 4\n",
       "            }\n",
       "        }\n",
       "    ],\n",
       "    \"legend\": [\n",
       "        {\n",
       "            \"data\": [\n",
       "                200,\n",
       "                201,\n",
       "                206,\n",
       "                301,\n",
       "                302,\n",
       "                304,\n",
       "                400,\n",
       "                403,\n",
       "                404,\n",
       "                405,\n",
       "                444,\n",
       "                500,\n",
       "                504\n",
       "            ],\n",
       "            \"selected\": {}\n",
       "        }\n",
       "    ],\n",
       "    \"tooltip\": {\n",
       "        \"show\": true,\n",
       "        \"trigger\": \"item\",\n",
       "        \"triggerOn\": \"mousemove|click\",\n",
       "        \"axisPointer\": {\n",
       "            \"type\": \"line\"\n",
       "        },\n",
       "        \"showContent\": true,\n",
       "        \"alwaysShowContent\": false,\n",
       "        \"showDelay\": 0,\n",
       "        \"hideDelay\": 100,\n",
       "        \"enterable\": false,\n",
       "        \"confine\": false,\n",
       "        \"appendToBody\": false,\n",
       "        \"transitionDuration\": 0.4,\n",
       "        \"textStyle\": {\n",
       "            \"fontSize\": 14\n",
       "        },\n",
       "        \"borderWidth\": 0,\n",
       "        \"padding\": 5,\n",
       "        \"order\": \"seriesAsc\"\n",
       "    }\n",
       "};\n",
       "        chart_ace3656bf1e5471783f12e04baed928e.setOption(option_ace3656bf1e5471783f12e04baed928e);\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<pyecharts.render.display.HTML at 0x188691a3380>"
      ]
     },
     "execution_count": 687,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pie=(\n",
    "    Pie()\n",
    "    .add('状态码比例',list(zip(df_new_status_code.index,df_new_status_code)))\n",
    "    .set_series_opts(label_opts=opts.LabelOpts(formatter='{b}:{c}')) # b是标签,c是数量，其他信息见表格文档\n",
    ")\n",
    "\n",
    "pie.render_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d66989d-e95a-4f9e-80db-02e60a3245a2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 688,
   "id": "c3fc9900-a21f-4b9f-bc9d-79eaf7fc9f3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实现按照小时，天等粒度的流量统计"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 689,
   "id": "0a657ed4-28fe-4fd2-9bdf-596b24f7510e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ip</th>\n",
       "      <th>stime</th>\n",
       "      <th>status_code</th>\n",
       "      <th>client</th>\n",
       "      <th>ispider</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>106.11.153.226</td>\n",
       "      <td>[02/Dec/2019:22:40:18</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.156.254.60</td>\n",
       "      <td>[02/Dec/2019:22:40:23</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106.11.159.254</td>\n",
       "      <td>[02/Dec/2019:22:40:27</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>106.11.157.254</td>\n",
       "      <td>[02/Dec/2019:22:40:28</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42.156.137.109</td>\n",
       "      <td>[02/Dec/2019:22:40:30</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50273</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:22</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50274</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>[07/Dec/2019:21:30:23</td>\n",
       "      <td>404</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50275</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:30:56</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50276</th>\n",
       "      <td>58.23.18.239</td>\n",
       "      <td>[07/Dec/2019:21:30:58</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50277</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>[07/Dec/2019:21:31:02</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50278 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ip                  stime  status_code  \\\n",
       "0      106.11.153.226  [02/Dec/2019:22:40:18          200   \n",
       "1       42.156.254.60  [02/Dec/2019:22:40:23          201   \n",
       "2      106.11.159.254  [02/Dec/2019:22:40:27          200   \n",
       "3      106.11.157.254  [02/Dec/2019:22:40:28          200   \n",
       "4      42.156.137.109  [02/Dec/2019:22:40:30          201   \n",
       "...               ...                    ...          ...   \n",
       "50273  213.180.203.16  [07/Dec/2019:21:30:22          201   \n",
       "50274  213.180.203.16  [07/Dec/2019:21:30:23          404   \n",
       "50275    141.8.132.24  [07/Dec/2019:21:30:56          200   \n",
       "50276    58.23.18.239  [07/Dec/2019:21:30:58          200   \n",
       "50277    141.8.132.24  [07/Dec/2019:21:31:02          201   \n",
       "\n",
       "                                                                                                                                  client  \\\n",
       "0                                                                                                                            YisouSpider   \n",
       "1      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "2                                                                                                                            YisouSpider   \n",
       "3                                                                                                                            YisouSpider   \n",
       "4      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "...                                                                                                                                  ...   \n",
       "50273                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "50274                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "50275       Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106   \n",
       "50276                     Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36   \n",
       "50277                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "\n",
       "       ispider  \n",
       "0         True  \n",
       "1         True  \n",
       "2         True  \n",
       "3         True  \n",
       "4         True  \n",
       "...        ...  \n",
       "50273    False  \n",
       "50274    False  \n",
       "50275    False  \n",
       "50276    False  \n",
       "50277    False  \n",
       "\n",
       "[50278 rows x 5 columns]"
      ]
     },
     "execution_count": 689,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "id": "30cd13f0-d55f-4838-820d-ce53ba32c182",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ip</th>\n",
       "      <th>stime</th>\n",
       "      <th>status_code</th>\n",
       "      <th>client</th>\n",
       "      <th>ispider</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>106.11.153.226</td>\n",
       "      <td>2019-12-02 22:40:18</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.156.254.60</td>\n",
       "      <td>2019-12-02 22:40:23</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106.11.159.254</td>\n",
       "      <td>2019-12-02 22:40:27</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>106.11.157.254</td>\n",
       "      <td>2019-12-02 22:40:28</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42.156.137.109</td>\n",
       "      <td>2019-12-02 22:40:30</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50273</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>2019-12-07 21:30:22</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50274</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>2019-12-07 21:30:23</td>\n",
       "      <td>404</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50275</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>2019-12-07 21:30:56</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50276</th>\n",
       "      <td>58.23.18.239</td>\n",
       "      <td>2019-12-07 21:30:58</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50277</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>2019-12-07 21:31:02</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50278 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   ip               stime  status_code  \\\n",
       "0      106.11.153.226 2019-12-02 22:40:18          200   \n",
       "1       42.156.254.60 2019-12-02 22:40:23          201   \n",
       "2      106.11.159.254 2019-12-02 22:40:27          200   \n",
       "3      106.11.157.254 2019-12-02 22:40:28          200   \n",
       "4      42.156.137.109 2019-12-02 22:40:30          201   \n",
       "...               ...                 ...          ...   \n",
       "50273  213.180.203.16 2019-12-07 21:30:22          201   \n",
       "50274  213.180.203.16 2019-12-07 21:30:23          404   \n",
       "50275    141.8.132.24 2019-12-07 21:30:56          200   \n",
       "50276    58.23.18.239 2019-12-07 21:30:58          200   \n",
       "50277    141.8.132.24 2019-12-07 21:31:02          201   \n",
       "\n",
       "                                                                                                                                  client  \\\n",
       "0                                                                                                                            YisouSpider   \n",
       "1      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "2                                                                                                                            YisouSpider   \n",
       "3                                                                                                                            YisouSpider   \n",
       "4      Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "...                                                                                                                                  ...   \n",
       "50273                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "50274                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "50275       Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106   \n",
       "50276                     Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36   \n",
       "50277                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "\n",
       "       ispider  \n",
       "0         True  \n",
       "1         True  \n",
       "2         True  \n",
       "3         True  \n",
       "4         True  \n",
       "...        ...  \n",
       "50273    False  \n",
       "50274    False  \n",
       "50275    False  \n",
       "50276    False  \n",
       "50277    False  \n",
       "\n",
       "[50278 rows x 5 columns]"
      ]
     },
     "execution_count": 690,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 转换日期\n",
    "# 从1取去掉其他元素，格式化的格式为年月日时分秒，查pandas官方文档\n",
    "df_new['stime']=pd.to_datetime(df_new['stime'].str[1:],format='%d/%b/%Y:%H:%M:%S') # \n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "id": "3879712d-3359-4679-96e1-eed587349e22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ip</th>\n",
       "      <th>status_code</th>\n",
       "      <th>client</th>\n",
       "      <th>ispider</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-02 22:40:18</th>\n",
       "      <td>106.11.153.226</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 22:40:23</th>\n",
       "      <td>42.156.254.60</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 22:40:27</th>\n",
       "      <td>106.11.159.254</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 22:40:28</th>\n",
       "      <td>106.11.157.254</td>\n",
       "      <td>200</td>\n",
       "      <td>YisouSpider</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-02 22:40:30</th>\n",
       "      <td>42.156.137.109</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-07 21:30:22</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-07 21:30:23</th>\n",
       "      <td>213.180.203.16</td>\n",
       "      <td>404</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-07 21:30:56</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-07 21:30:58</th>\n",
       "      <td>58.23.18.239</td>\n",
       "      <td>200</td>\n",
       "      <td>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-07 21:31:02</th>\n",
       "      <td>141.8.132.24</td>\n",
       "      <td>201</td>\n",
       "      <td>Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50278 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 ip  status_code  \\\n",
       "stime                                              \n",
       "2019-12-02 22:40:18  106.11.153.226          200   \n",
       "2019-12-02 22:40:23   42.156.254.60          201   \n",
       "2019-12-02 22:40:27  106.11.159.254          200   \n",
       "2019-12-02 22:40:28  106.11.157.254          200   \n",
       "2019-12-02 22:40:30  42.156.137.109          201   \n",
       "...                             ...          ...   \n",
       "2019-12-07 21:30:22  213.180.203.16          201   \n",
       "2019-12-07 21:30:23  213.180.203.16          404   \n",
       "2019-12-07 21:30:56    141.8.132.24          200   \n",
       "2019-12-07 21:30:58    58.23.18.239          200   \n",
       "2019-12-07 21:31:02    141.8.132.24          201   \n",
       "\n",
       "                                                                                                                                                client  \\\n",
       "stime                                                                                                                                                    \n",
       "2019-12-02 22:40:18                                                                                                                        YisouSpider   \n",
       "2019-12-02 22:40:23  Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "2019-12-02 22:40:27                                                                                                                        YisouSpider   \n",
       "2019-12-02 22:40:28                                                                                                                        YisouSpider   \n",
       "2019-12-02 22:40:30  Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 YisouSpider/5.0 Safari/537.36   \n",
       "...                                                                                                                                                ...   \n",
       "2019-12-07 21:30:22                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "2019-12-07 21:30:23                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "2019-12-07 21:30:56       Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106   \n",
       "2019-12-07 21:30:58                     Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36   \n",
       "2019-12-07 21:31:02                                                                   Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)   \n",
       "\n",
       "                     ispider  \n",
       "stime                         \n",
       "2019-12-02 22:40:18     True  \n",
       "2019-12-02 22:40:23     True  \n",
       "2019-12-02 22:40:27     True  \n",
       "2019-12-02 22:40:28     True  \n",
       "2019-12-02 22:40:30     True  \n",
       "...                      ...  \n",
       "2019-12-07 21:30:22    False  \n",
       "2019-12-07 21:30:23    False  \n",
       "2019-12-07 21:30:56    False  \n",
       "2019-12-07 21:30:58    False  \n",
       "2019-12-07 21:31:02    False  \n",
       "\n",
       "[50278 rows x 4 columns]"
      ]
     },
     "execution_count": 691,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 将时间变为索引列\n",
    "df_new.set_index('stime',inplace=True) # 替换原有索引列，并且直接在原数据上更改\n",
    "df_new.sort_index(inplace=True) # 进行索引排序\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 692,
   "id": "a4c76045-d15f-4f5e-aaf9-fdc9248a75ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DatetimeIndex(['2019-12-02 22:40:18', '2019-12-02 22:40:23',\n",
       "               '2019-12-02 22:40:27', '2019-12-02 22:40:28',\n",
       "               '2019-12-02 22:40:30', '2019-12-02 22:40:46',\n",
       "               '2019-12-02 22:41:52', '2019-12-02 22:41:52',\n",
       "               '2019-12-02 22:41:55', '2019-12-02 22:42:16',\n",
       "               ...\n",
       "               '2019-12-07 21:30:16', '2019-12-07 21:30:17',\n",
       "               '2019-12-07 21:30:19', '2019-12-07 21:30:20',\n",
       "               '2019-12-07 21:30:21', '2019-12-07 21:30:22',\n",
       "               '2019-12-07 21:30:23', '2019-12-07 21:30:56',\n",
       "               '2019-12-07 21:30:58', '2019-12-07 21:31:02'],\n",
       "              dtype='datetime64[ns]', name='stime', length=50278, freq=None)"
      ]
     },
     "execution_count": 692,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new.index\n",
    "# 第一天与最后一天日志不全"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 693,
   "id": "936b06ac-fbe3-4666-a523-fa6261c06fb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pv</th>\n",
       "      <th>uv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-12-02</th>\n",
       "      <td>288</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-03</th>\n",
       "      <td>10285</td>\n",
       "      <td>1180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-04</th>\n",
       "      <td>13618</td>\n",
       "      <td>1197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-05</th>\n",
       "      <td>10485</td>\n",
       "      <td>1152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-06</th>\n",
       "      <td>9469</td>\n",
       "      <td>1261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-07</th>\n",
       "      <td>6133</td>\n",
       "      <td>911</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               pv    uv\n",
       "stime                  \n",
       "2019-12-02    288    70\n",
       "2019-12-03  10285  1180\n",
       "2019-12-04  13618  1197\n",
       "2019-12-05  10485  1152\n",
       "2019-12-06   9469  1261\n",
       "2019-12-07   6133   911"
      ]
     },
     "execution_count": 693,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 按照小时统计 \n",
    "df_new_pvuv=df_new.resample('h')['ip'].agg(pv=np.size,uv=pd.Series.nunique) # pv行数，uv去重的个数\n",
    "# 按照每六个小时统计\n",
    "df_new_pvuv=df_new.resample('6h')['ip'].agg(pv=np.size,uv=pd.Series.nunique)\n",
    "# 按天统计\n",
    "df_new_pvuv=df_new.resample('D')['ip'].agg(pv=np.size,uv=pd.Series.nunique)\n",
    "df_new_pvuv # 只输出了按天统计\n",
    "# 做出三个折线图\n",
    "# 采样，聚合，图表展示"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 694,
   "id": "dd784347-ffda-45ad-a567-c69539b9231c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "</head>\n",
       "<body>\n",
       "        <div id=\"56655192e7e44c16be30f25833197e4f\" class=\"chart-container\" style=\"width:900px; height:500px; \"></div>\n",
       "    <script>\n",
       "        var chart_56655192e7e44c16be30f25833197e4f = echarts.init(\n",
       "            document.getElementById('56655192e7e44c16be30f25833197e4f'), 'white', {renderer: 'canvas'});\n",
       "        var option_56655192e7e44c16be30f25833197e4f = {\n",
       "    \"animation\": true,\n",
       "    \"animationThreshold\": 2000,\n",
       "    \"animationDuration\": 1000,\n",
       "    \"animationEasing\": \"cubicOut\",\n",
       "    \"animationDelay\": 0,\n",
       "    \"animationDurationUpdate\": 300,\n",
       "    \"animationEasingUpdate\": \"cubicOut\",\n",
       "    \"animationDelayUpdate\": 0,\n",
       "    \"aria\": {\n",
       "        \"enabled\": false\n",
       "    },\n",
       "    \"color\": [\n",
       "        \"#5470c6\",\n",
       "        \"#91cc75\",\n",
       "        \"#fac858\",\n",
       "        \"#ee6666\",\n",
       "        \"#73c0de\",\n",
       "        \"#3ba272\",\n",
       "        \"#fc8452\",\n",
       "        \"#9a60b4\",\n",
       "        \"#ea7ccc\"\n",
       "    ],\n",
       "    \"series\": [\n",
       "        {\n",
       "            \"type\": \"line\",\n",
       "            \"name\": \"PV\",\n",
       "            \"connectNulls\": false,\n",
       "            \"xAxisIndex\": 0,\n",
       "            \"symbolSize\": 4,\n",
       "            \"showSymbol\": true,\n",
       "            \"smooth\": false,\n",
       "            \"clip\": true,\n",
       "            \"step\": false,\n",
       "            \"stackStrategy\": \"samesign\",\n",
       "            \"data\": [\n",
       "                [\n",
       "                    \"2019-12-02T00:00:00\",\n",
       "                    288\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-03T00:00:00\",\n",
       "                    10285\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-04T00:00:00\",\n",
       "                    13618\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-05T00:00:00\",\n",
       "                    10485\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-06T00:00:00\",\n",
       "                    9469\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-07T00:00:00\",\n",
       "                    6133\n",
       "                ]\n",
       "            ],\n",
       "            \"hoverAnimation\": true,\n",
       "            \"label\": {\n",
       "                \"show\": true,\n",
       "                \"margin\": 8\n",
       "            },\n",
       "            \"logBase\": 10,\n",
       "            \"seriesLayoutBy\": \"column\",\n",
       "            \"lineStyle\": {\n",
       "                \"show\": true,\n",
       "                \"width\": 1,\n",
       "                \"opacity\": 1,\n",
       "                \"curveness\": 0,\n",
       "                \"type\": \"solid\"\n",
       "            },\n",
       "            \"areaStyle\": {\n",
       "                \"opacity\": 0\n",
       "            },\n",
       "            \"zlevel\": 0,\n",
       "            \"z\": 0\n",
       "        },\n",
       "        {\n",
       "            \"type\": \"line\",\n",
       "            \"name\": \"UV\",\n",
       "            \"connectNulls\": false,\n",
       "            \"xAxisIndex\": 0,\n",
       "            \"symbolSize\": 4,\n",
       "            \"showSymbol\": true,\n",
       "            \"smooth\": false,\n",
       "            \"clip\": true,\n",
       "            \"step\": false,\n",
       "            \"stackStrategy\": \"samesign\",\n",
       "            \"data\": [\n",
       "                [\n",
       "                    \"2019-12-02T00:00:00\",\n",
       "                    70\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-03T00:00:00\",\n",
       "                    1180\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-04T00:00:00\",\n",
       "                    1197\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-05T00:00:00\",\n",
       "                    1152\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-06T00:00:00\",\n",
       "                    1261\n",
       "                ],\n",
       "                [\n",
       "                    \"2019-12-07T00:00:00\",\n",
       "                    911\n",
       "                ]\n",
       "            ],\n",
       "            \"hoverAnimation\": true,\n",
       "            \"label\": {\n",
       "                \"show\": true,\n",
       "                \"margin\": 8\n",
       "            },\n",
       "            \"logBase\": 10,\n",
       "            \"seriesLayoutBy\": \"column\",\n",
       "            \"lineStyle\": {\n",
       "                \"show\": true,\n",
       "                \"width\": 1,\n",
       "                \"opacity\": 1,\n",
       "                \"curveness\": 0,\n",
       "                \"type\": \"solid\"\n",
       "            },\n",
       "            \"areaStyle\": {\n",
       "                \"opacity\": 0\n",
       "            },\n",
       "            \"zlevel\": 0,\n",
       "            \"z\": 0\n",
       "        }\n",
       "    ],\n",
       "    \"legend\": [\n",
       "        {\n",
       "            \"data\": [\n",
       "                \"PV\",\n",
       "                \"UV\"\n",
       "            ],\n",
       "            \"selected\": {},\n",
       "            \"show\": true,\n",
       "            \"padding\": 5,\n",
       "            \"itemGap\": 10,\n",
       "            \"itemWidth\": 25,\n",
       "            \"itemHeight\": 14,\n",
       "            \"backgroundColor\": \"transparent\",\n",
       "            \"borderColor\": \"#ccc\",\n",
       "            \"borderRadius\": 0,\n",
       "            \"pageButtonItemGap\": 5,\n",
       "            \"pageButtonPosition\": \"end\",\n",
       "            \"pageFormatter\": \"{current}/{total}\",\n",
       "            \"pageIconColor\": \"#2f4554\",\n",
       "            \"pageIconInactiveColor\": \"#aaa\",\n",
       "            \"pageIconSize\": 15,\n",
       "            \"animationDurationUpdate\": 800,\n",
       "            \"selector\": false,\n",
       "            \"selectorPosition\": \"auto\",\n",
       "            \"selectorItemGap\": 7,\n",
       "            \"selectorButtonGap\": 10\n",
       "        }\n",
       "    ],\n",
       "    \"tooltip\": {\n",
       "        \"show\": true,\n",
       "        \"trigger\": \"axis\",\n",
       "        \"triggerOn\": \"mousemove|click\",\n",
       "        \"axisPointer\": {\n",
       "            \"type\": \"cross\"\n",
       "        },\n",
       "        \"showContent\": true,\n",
       "        \"alwaysShowContent\": false,\n",
       "        \"showDelay\": 0,\n",
       "        \"hideDelay\": 100,\n",
       "        \"enterable\": false,\n",
       "        \"confine\": false,\n",
       "        \"appendToBody\": false,\n",
       "        \"transitionDuration\": 0.4,\n",
       "        \"textStyle\": {\n",
       "            \"fontSize\": 14\n",
       "        },\n",
       "        \"borderWidth\": 0,\n",
       "        \"padding\": 5,\n",
       "        \"order\": \"seriesAsc\"\n",
       "    },\n",
       "    \"xAxis\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"scale\": false,\n",
       "            \"nameLocation\": \"end\",\n",
       "            \"nameGap\": 15,\n",
       "            \"gridIndex\": 0,\n",
       "            \"inverse\": false,\n",
       "            \"offset\": 0,\n",
       "            \"splitNumber\": 5,\n",
       "            \"minInterval\": 0,\n",
       "            \"splitLine\": {\n",
       "                \"show\": true,\n",
       "                \"lineStyle\": {\n",
       "                    \"show\": true,\n",
       "                    \"width\": 1,\n",
       "                    \"opacity\": 1,\n",
       "                    \"curveness\": 0,\n",
       "                    \"type\": \"solid\"\n",
       "                }\n",
       "            },\n",
       "            \"data\": [\n",
       "                \"2019-12-02T00:00:00\",\n",
       "                \"2019-12-03T00:00:00\",\n",
       "                \"2019-12-04T00:00:00\",\n",
       "                \"2019-12-05T00:00:00\",\n",
       "                \"2019-12-06T00:00:00\",\n",
       "                \"2019-12-07T00:00:00\"\n",
       "            ]\n",
       "        }\n",
       "    ],\n",
       "    \"yAxis\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"scale\": false,\n",
       "            \"nameLocation\": \"end\",\n",
       "            \"nameGap\": 15,\n",
       "            \"gridIndex\": 0,\n",
       "            \"inverse\": false,\n",
       "            \"offset\": 0,\n",
       "            \"splitNumber\": 5,\n",
       "            \"minInterval\": 0,\n",
       "            \"splitLine\": {\n",
       "                \"show\": true,\n",
       "                \"lineStyle\": {\n",
       "                    \"show\": true,\n",
       "                    \"width\": 1,\n",
       "                    \"opacity\": 1,\n",
       "                    \"curveness\": 0,\n",
       "                    \"type\": \"solid\"\n",
       "                }\n",
       "            }\n",
       "        }\n",
       "    ],\n",
       "    \"title\": [\n",
       "        {\n",
       "            \"show\": true,\n",
       "            \"text\": \"PVUV\\u884c\\u6570\\u4e0e\\u53bb\\u91cd\\u6570\\u636e\\u5bf9\\u6bd4\\u56fe\",\n",
       "            \"target\": \"blank\",\n",
       "            \"subtarget\": \"blank\",\n",
       "            \"padding\": 5,\n",
       "            \"itemGap\": 10,\n",
       "            \"textAlign\": \"auto\",\n",
       "            \"textVerticalAlign\": \"auto\",\n",
       "            \"triggerEvent\": false\n",
       "        }\n",
       "    ]\n",
       "};\n",
       "        chart_56655192e7e44c16be30f25833197e4f.setOption(option_56655192e7e44c16be30f25833197e4f);\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<pyecharts.render.display.HTML at 0x1886e7bd9d0>"
      ]
     },
     "execution_count": 694,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "line=(\n",
    "    Line()\n",
    "    .add_xaxis(df_new_pvuv.index.to_list())\n",
    "    .add_yaxis('PV',df_new_pvuv['pv'].to_list())\n",
    "    .add_yaxis('UV',df_new_pvuv['uv'].to_list())\n",
    "    .set_global_opts(\n",
    "        title_opts=opts.TitleOpts(title='PVUV行数与去重数据对比图'),\n",
    "        tooltip_opts=opts.TooltipOpts(trigger='axis',axis_pointer_type='cross')\n",
    "    )\n",
    ")\n",
    "line.render_notebook()\n",
    "# 去掉pv,uv会上升"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20da2254-9fca-48eb-a35a-8fd0630999b4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6d9fda9-c564-4c4b-b30c-ee1c5c1a24e6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 695,
   "id": "cde0ffa1-6d81-4cc5-868b-6d5b2433a276",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点七、pandas找出最影响结果的特征值\n",
    "# 应用场景：机器学习的特征选择，去除无用的特征，提升模型效果，减少训练时间（去除极端值）；数据分析领域，找出影响结果程度比较大的特征值\n",
    "# 实例：泰坦尼克号事件中，最影响生死的因素有哪些"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 696,
   "id": "03ad3ed2-66e2-4065-8e5f-1f68efd82d2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "# 最影响结果的K个特征值\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "# 卡方检验作为SelectKBest参数\n",
    "from sklearn.feature_selection import chi2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 697,
   "id": "85d72ee1-a3c6-4138-8451-b0a664553c4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch     Fare  \\\n",
       "0              1         0       3    male  22.0      1      0   7.2500   \n",
       "1              2         1       1  female  38.0      1      0  71.2833   \n",
       "2              3         1       3  female  26.0      0      0   7.9250   \n",
       "3              4         1       1  female  35.0      1      0  53.1000   \n",
       "4              5         0       3    male  35.0      0      0   8.0500   \n",
       "..           ...       ...     ...     ...   ...    ...    ...      ...   \n",
       "886          887         0       2    male  27.0      0      0  13.0000   \n",
       "887          888         1       1  female  19.0      0      0  30.0000   \n",
       "888          889         0       3  female   NaN      1      2  23.4500   \n",
       "889          890         1       1    male  26.0      0      0  30.0000   \n",
       "890          891         0       3    male  32.0      0      0   7.7500   \n",
       "\n",
       "    Embarked  \n",
       "0          S  \n",
       "1          C  \n",
       "2          S  \n",
       "3          S  \n",
       "4          S  \n",
       "..       ...  \n",
       "886        S  \n",
       "887        S  \n",
       "888        S  \n",
       "889        C  \n",
       "890        Q  \n",
       "\n",
       "[891 rows x 9 columns]"
      ]
     },
     "execution_count": 697,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 导入数据\n",
    "df=pd.read_csv('./datas/titanic/titanic_train.csv')\n",
    "df=df[['PassengerId','Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']].copy() # 选需要的数据\n",
    "df\n",
    "# sibsp兄弟姐妹数，parch父母孩子个数,embarked上船地点"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 698,
   "id": "94f8fa47-7911-4a99-b993-715b70efcca4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 9 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    object \n",
      " 4   Age          714 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(2)\n",
      "memory usage: 62.8+ KB\n"
     ]
    }
   ],
   "source": [
    "# 数据清理与转换\n",
    "# 查看空列\n",
    "df.info()\n",
    "# 两列有空值，下方处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 699,
   "id": "5a752443-c5c1-4026-a032-6ba6ed3a9414",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 9 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    object \n",
      " 4   Age          891 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(2)\n",
      "memory usage: 62.8+ KB\n"
     ]
    }
   ],
   "source": [
    "# age列有缺失值，给其填充平均值\n",
    "df['Age']=df['Age'].fillna(df['Age'].median())\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 700,
   "id": "7bb35f93-7054-41f0-9223-3ecd45a977cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass Sex   Age  SibSp  Parch     Fare Embarked\n",
       "0              1         0       3   0  22.0      1      0   7.2500        S\n",
       "1              2         1       1   1  38.0      1      0  71.2833        C\n",
       "2              3         1       3   1  26.0      0      0   7.9250        S\n",
       "3              4         1       1   1  35.0      1      0  53.1000        S\n",
       "4              5         0       3   0  35.0      0      0   8.0500        S\n",
       "..           ...       ...     ...  ..   ...    ...    ...      ...      ...\n",
       "886          887         0       2   0  27.0      0      0  13.0000        S\n",
       "887          888         1       1   1  19.0      0      0  30.0000        S\n",
       "888          889         0       3   1  28.0      1      2  23.4500        S\n",
       "889          890         1       1   0  26.0      0      0  30.0000        C\n",
       "890          891         0       3   0  32.0      0      0   7.7500        Q\n",
       "\n",
       "[891 rows x 9 columns]"
      ]
     },
     "execution_count": 700,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 将性别列变成数字\n",
    "df.Sex.unique() # 看数据取值，一般为二元\n",
    "df.loc[df['Sex']=='male','Sex']=0\n",
    "df.loc[df['Sex']=='female','Sex']=1\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "id": "3c731b2b-7eed-46e1-8ca9-4848d58b9a51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['S', 'C', 'Q', nan], dtype=object)"
      ]
     },
     "execution_count": 701,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 处理登船embarked列，这个可以按照常理填充空值，进而将字符串转换成数字\n",
    "df.Embarked.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 702,
   "id": "93a107fb-fc22-40bd-ab41-437486f8417f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass Sex   Age  SibSp  Parch     Fare Embarked\n",
       "0              1         0       3   0  22.0      1      0   7.2500        1\n",
       "1              2         1       1   1  38.0      1      0  71.2833        2\n",
       "2              3         1       3   1  26.0      0      0   7.9250        1\n",
       "3              4         1       1   1  35.0      1      0  53.1000        1\n",
       "4              5         0       3   0  35.0      0      0   8.0500        1\n",
       "..           ...       ...     ...  ..   ...    ...    ...      ...      ...\n",
       "886          887         0       2   0  27.0      0      0  13.0000        1\n",
       "887          888         1       1   1  19.0      0      0  30.0000        1\n",
       "888          889         0       3   1  28.0      1      2  23.4500        1\n",
       "889          890         1       1   0  26.0      0      0  30.0000        2\n",
       "890          891         0       3   0  32.0      0      0   7.7500        3\n",
       "\n",
       "[891 rows x 9 columns]"
      ]
     },
     "execution_count": 702,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 填充空值\n",
    "df['Embarked']=df['Embarked'].fillna(0)\n",
    "# 字符串变成数字\n",
    "df.loc[df['Embarked']=='S','Embarked']=1\n",
    "df.loc[df['Embarked']=='C','Embarked']=2\n",
    "df.loc[df['Embarked']=='Q','Embarked']=3\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0548612b-a353-49c8-96d1-115f362ff59c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 703,
   "id": "25c78e0b-38f6-4f46-8c05-978c11a8f5b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将特征值和结果列（survived）分开"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 704,
   "id": "30e75980-251e-4717-8fbf-abd1a10c3065",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=df.pop('Survived')\n",
    "X=df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 705,
   "id": "29a29a42-233a-4f32-b1a5-a231dd7c0a17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass Sex   Age  SibSp  Parch     Fare Embarked\n",
       "0              1       3   0  22.0      1      0   7.2500        1\n",
       "1              2       1   1  38.0      1      0  71.2833        2\n",
       "2              3       3   1  26.0      0      0   7.9250        1\n",
       "3              4       1   1  35.0      1      0  53.1000        1\n",
       "4              5       3   0  35.0      0      0   8.0500        1\n",
       "..           ...     ...  ..   ...    ...    ...      ...      ...\n",
       "886          887       2   0  27.0      0      0  13.0000        1\n",
       "887          888       1   1  19.0      0      0  30.0000        1\n",
       "888          889       3   1  28.0      1      2  23.4500        1\n",
       "889          890       1   0  26.0      0      0  30.0000        2\n",
       "890          891       3   0  32.0      0      0   7.7500        3\n",
       "\n",
       "[891 rows x 8 columns]"
      ]
     },
     "execution_count": 705,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 706,
   "id": "6c7973cd-f1d9-4a31-8b3f-56af66d2b0ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      0\n",
       "      ..\n",
       "886    0\n",
       "887    1\n",
       "888    0\n",
       "889    1\n",
       "890    0\n",
       "Name: Survived, Length: 891, dtype: int64"
      ]
     },
     "execution_count": 706,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dad93d95-d543-4aea-aa01-7f2ba95a1208",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 707,
   "id": "7f8b793a-a64f-4870-88ba-497149c1c708",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用卡方检验选择topK的特征\n",
    "# 选择所有特征，目的是看到特征的重要性排序\n",
    "bestfeatures=SelectKBest(score_func=chi2,k=len(X.columns))\n",
    "fit=bestfeatures.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 708,
   "id": "58eeacf2-534c-4644-813a-fa495a77d2a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.312934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30.873699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>170.348127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>21.649163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.581865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10.097499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4518.319091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.771019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             0\n",
       "0     3.312934\n",
       "1    30.873699\n",
       "2   170.348127\n",
       "3    21.649163\n",
       "4     2.581865\n",
       "5    10.097499\n",
       "6  4518.319091\n",
       "7     2.771019"
      ]
     },
     "execution_count": 708,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 按照重要性的顺序打印特征列表\n",
    "df_scores=pd.DataFrame(fit.scores_)\n",
    "df_scores\n",
    "# 拟合值高低"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 709,
   "id": "fa7aa8e2-7b84-4ce7-85cf-bb5264a005e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PassengerId</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pclass</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sex</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Age</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SibSp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Parch</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Fare</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Embarked</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             0\n",
       "0  PassengerId\n",
       "1       Pclass\n",
       "2          Sex\n",
       "3          Age\n",
       "4        SibSp\n",
       "5        Parch\n",
       "6         Fare\n",
       "7     Embarked"
      ]
     },
     "execution_count": 709,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_columns=pd.DataFrame(X.columns)\n",
    "df_columns\n",
    "# 分别对应哪个列"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 710,
   "id": "f5eea3df-1a4f-4513-82c9-7ae0e8168159",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PassengerId</td>\n",
       "      <td>3.312934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pclass</td>\n",
       "      <td>30.873699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sex</td>\n",
       "      <td>170.348127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Age</td>\n",
       "      <td>21.649163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SibSp</td>\n",
       "      <td>2.581865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Parch</td>\n",
       "      <td>10.097499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Fare</td>\n",
       "      <td>4518.319091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Embarked</td>\n",
       "      <td>2.771019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             0            0\n",
       "0  PassengerId     3.312934\n",
       "1       Pclass    30.873699\n",
       "2          Sex   170.348127\n",
       "3          Age    21.649163\n",
       "4        SibSp     2.581865\n",
       "5        Parch    10.097499\n",
       "6         Fare  4518.319091\n",
       "7     Embarked     2.771019"
      ]
     },
     "execution_count": 710,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 合并两个df\n",
    "df_feature_scores=pd.concat([df_columns,df_scores],axis=1)\n",
    "df_feature_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 711,
   "id": "0584caa0-de33-46fe-8ea7-8d2e0cb52600",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature_name</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PassengerId</td>\n",
       "      <td>3.312934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pclass</td>\n",
       "      <td>30.873699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sex</td>\n",
       "      <td>170.348127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Age</td>\n",
       "      <td>21.649163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SibSp</td>\n",
       "      <td>2.581865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Parch</td>\n",
       "      <td>10.097499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Fare</td>\n",
       "      <td>4518.319091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Embarked</td>\n",
       "      <td>2.771019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  feature_name        score\n",
       "0  PassengerId     3.312934\n",
       "1       Pclass    30.873699\n",
       "2          Sex   170.348127\n",
       "3          Age    21.649163\n",
       "4        SibSp     2.581865\n",
       "5        Parch    10.097499\n",
       "6         Fare  4518.319091\n",
       "7     Embarked     2.771019"
      ]
     },
     "execution_count": 711,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 设置列名\n",
    "df_feature_scores.columns=['feature_name','score']\n",
    "df_feature_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "id": "840930f2-acc7-41c3-b99a-1fec18e7d909",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature_name</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Fare</td>\n",
       "      <td>4518.319091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sex</td>\n",
       "      <td>170.348127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pclass</td>\n",
       "      <td>30.873699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Age</td>\n",
       "      <td>21.649163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Parch</td>\n",
       "      <td>10.097499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PassengerId</td>\n",
       "      <td>3.312934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Embarked</td>\n",
       "      <td>2.771019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SibSp</td>\n",
       "      <td>2.581865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  feature_name        score\n",
       "6         Fare  4518.319091\n",
       "2          Sex   170.348127\n",
       "1       Pclass    30.873699\n",
       "3          Age    21.649163\n",
       "5        Parch    10.097499\n",
       "0  PassengerId     3.312934\n",
       "7     Embarked     2.771019\n",
       "4        SibSp     2.581865"
      ]
     },
     "execution_count": 712,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_feature_scores.sort_values(by='score',ascending=False)\n",
    "# 最影响的是船费，性别，仓位"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "402bc4f7-9c0f-4d16-b708-c35b4d0c573d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7abce0db-56a5-403d-983a-e5ed420aecfa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "id": "3f4cca4f-15ee-44eb-bfe9-07b7dc5b195c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点八、pandas降低存储提升运算速度的方法\n",
    "# pandas的Categorical类型降低数据存储提升计算速度\n",
    "# 原理：传统数据存储是复制数据进行读取，而categorical是存储数字，并且额外存储一个数据列表，数字对应数字列表进行拿取，所以数据不会重复存储，重复存储的是数字，数字再对应数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "id": "29a8f7d4-2783-4b1f-86d7-cd74deff0088",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>M</td>\n",
       "      <td>56</td>\n",
       "      <td>16</td>\n",
       "      <td>70072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>55117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>M</td>\n",
       "      <td>45</td>\n",
       "      <td>7</td>\n",
       "      <td>02460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>55455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6035</th>\n",
       "      <td>6036</td>\n",
       "      <td>F</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>32603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6036</th>\n",
       "      <td>6037</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>76006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6037</th>\n",
       "      <td>6038</td>\n",
       "      <td>F</td>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>14706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6038</th>\n",
       "      <td>6039</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>01060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6039</th>\n",
       "      <td>6040</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>11106</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6040 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      UserID Gender  Age  Occupation Zip-code\n",
       "0          1      F    1          10    48067\n",
       "1          2      M   56          16    70072\n",
       "2          3      M   25          15    55117\n",
       "3          4      M   45           7    02460\n",
       "4          5      M   25          20    55455\n",
       "...      ...    ...  ...         ...      ...\n",
       "6035    6036      F   25          15    32603\n",
       "6036    6037      F   45           1    76006\n",
       "6037    6038      F   56           1    14706\n",
       "6038    6039      F   45           0    01060\n",
       "6039    6040      M   25           6    11106\n",
       "\n",
       "[6040 rows x 5 columns]"
      ]
     },
     "execution_count": 714,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_csv('./datas/movielens-1m/users.dat',\n",
    "               sep='::',\n",
    "               engine='python',\n",
    "               header=None,\n",
    "               names='UserID::Gender::Age::Occupation::Zip-code'.split('::'))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "id": "b2b3f3f6-c9b8-4f69-b835-4dec255a1f76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6040 entries, 0 to 6039\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   UserID      6040 non-null   int64 \n",
      " 1   Gender      6040 non-null   object\n",
      " 2   Age         6040 non-null   int64 \n",
      " 3   Occupation  6040 non-null   int64 \n",
      " 4   Zip-code    6040 non-null   object\n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 236.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info() # 只是算了指针大小"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "id": "d04cf9df-74d9-44ed-9816-6a21725e4b05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6040 entries, 0 to 6039\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   UserID      6040 non-null   int64 \n",
      " 1   Gender      6040 non-null   object\n",
      " 2   Age         6040 non-null   int64 \n",
      " 3   Occupation  6040 non-null   int64 \n",
      " 4   Zip-code    6040 non-null   object\n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 755.5 KB\n"
     ]
    }
   ],
   "source": [
    "df.info(memory_usage='deep') # 查看dataframe全部大小"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "id": "4b03dca6-4b7b-40a6-87c6-94bc5ddcd42c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>M</td>\n",
       "      <td>56</td>\n",
       "      <td>16</td>\n",
       "      <td>70072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>55117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>M</td>\n",
       "      <td>45</td>\n",
       "      <td>7</td>\n",
       "      <td>02460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>55455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6035</th>\n",
       "      <td>6036</td>\n",
       "      <td>F</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>32603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6036</th>\n",
       "      <td>6037</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>76006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6037</th>\n",
       "      <td>6038</td>\n",
       "      <td>F</td>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>14706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6038</th>\n",
       "      <td>6039</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>01060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6039</th>\n",
       "      <td>6040</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>11106</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6040 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      UserID Gender  Age  Occupation Zip-code\n",
       "0          1      F    1          10    48067\n",
       "1          2      M   56          16    70072\n",
       "2          3      M   25          15    55117\n",
       "3          4      M   45           7    02460\n",
       "4          5      M   25          20    55455\n",
       "...      ...    ...  ...         ...      ...\n",
       "6035    6036      F   25          15    32603\n",
       "6036    6037      F   45           1    76006\n",
       "6037    6038      F   56           1    14706\n",
       "6038    6039      F   45           0    01060\n",
       "6039    6040      M   25           6    11106\n",
       "\n",
       "[6040 rows x 5 columns]"
      ]
     },
     "execution_count": 717,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 复制一份\n",
    "df_cat=df.copy()\n",
    "df_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "id": "e3690eec-7457-4d9e-91bd-86943c057e12",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用Categorical类型降低存储量"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "id": "b9153bf6-b79f-4c7d-8dfb-103dc37069e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6040 entries, 0 to 6039\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype   \n",
      "---  ------      --------------  -----   \n",
      " 0   UserID      6040 non-null   int64   \n",
      " 1   Gender      6040 non-null   category\n",
      " 2   Age         6040 non-null   int64   \n",
      " 3   Occupation  6040 non-null   int64   \n",
      " 4   Zip-code    6040 non-null   object  \n",
      "dtypes: category(1), int64(3), object(1)\n",
      "memory usage: 466.7 KB\n"
     ]
    }
   ],
   "source": [
    "df_cat['Gender']=df_cat['Gender'].astype('category')\n",
    "df_cat.info(memory_usage='deep') # 内存降低"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "id": "ee860216-17cc-4b92-9678-3f931a36786e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UserID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Zip-code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>48067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>M</td>\n",
       "      <td>56</td>\n",
       "      <td>16</td>\n",
       "      <td>70072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>55117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>M</td>\n",
       "      <td>45</td>\n",
       "      <td>7</td>\n",
       "      <td>02460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>55455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6035</th>\n",
       "      <td>6036</td>\n",
       "      <td>F</td>\n",
       "      <td>25</td>\n",
       "      <td>15</td>\n",
       "      <td>32603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6036</th>\n",
       "      <td>6037</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>76006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6037</th>\n",
       "      <td>6038</td>\n",
       "      <td>F</td>\n",
       "      <td>56</td>\n",
       "      <td>1</td>\n",
       "      <td>14706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6038</th>\n",
       "      <td>6039</td>\n",
       "      <td>F</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>01060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6039</th>\n",
       "      <td>6040</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>11106</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6040 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      UserID Gender  Age  Occupation Zip-code\n",
       "0          1      F    1          10    48067\n",
       "1          2      M   56          16    70072\n",
       "2          3      M   25          15    55117\n",
       "3          4      M   45           7    02460\n",
       "4          5      M   25          20    55455\n",
       "...      ...    ...  ...         ...      ...\n",
       "6035    6036      F   25          15    32603\n",
       "6036    6037      F   45           1    76006\n",
       "6037    6038      F   56           1    14706\n",
       "6038    6039      F   45           0    01060\n",
       "6039    6040      M   25           6    11106\n",
       "\n",
       "[6040 rows x 5 columns]"
      ]
     },
     "execution_count": 720,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cat # 数据无影响"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "id": "6f2058cc-b5a7-408b-a563-fee53ec15ed6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method IndexOpsMixin.value_counts of 0       F\n",
       "1       M\n",
       "2       M\n",
       "3       M\n",
       "4       M\n",
       "       ..\n",
       "6035    F\n",
       "6036    F\n",
       "6037    F\n",
       "6038    F\n",
       "6039    M\n",
       "Name: Gender, Length: 6040, dtype: category\n",
       "Categories (2, object): ['F', 'M']>"
      ]
     },
     "execution_count": 721,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cat['Gender'].value_counts # 仍为字符串"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b1f2eee-a01f-4f71-b04d-b7f261532691",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "553245f4-c300-4116-bd08-e1111971a933",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "id": "fb3d7467-fd5a-4761-9ef7-2cdfab8b3ac1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点九、pandas在网页上展示表格数据\n",
    "# 见pycharm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7362af94-3474-4c88-a6b3-08e68f898f46",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "749db264-3a4d-4776-b773-79e0ec89fd51",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "id": "31b4d4c6-59e8-42b5-be78-f7bcfe48d0e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点十、pandas的get_dummies用于机器学习特征处理\n",
    "# 分类特征种类：普通分类（性别颜色之类）；顺序分类（评分等级等，评分分类可以直接用12345代表大小排序关系）\n",
    "# 用途：具有明显排序概念的变量可以直接用12345等表示等级与次序，但是分类变量诸如颜色，性别，婚姻等用get_dummies处理，也称one-hot-encoding处理\n",
    "# 比拟：类似于虚拟变量"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "id": "ec79568a-84f6-43b2-af79-03801f5423e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                    Name     Sex   Age  SibSp  \\\n",
       "0                                Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Thayer)  female  38.0      1   \n",
       "2                                 Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3           Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                               Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                   ...     ...   ...    ...   \n",
       "886                                Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                         Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888             Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                                Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                  Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 724,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "df_train=pd.read_csv('./datas/titanic/titanic_train.csv')\n",
    "df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "id": "5ffc0569-8c86-4927-8769-0b434ceda192",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 9 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    object \n",
      " 4   Age          714 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(2)\n",
      "memory usage: 62.8+ KB\n"
     ]
    }
   ],
   "source": [
    "# 选取需要的列\n",
    "df_train.drop(columns=['Name','Ticket','Cabin'],inplace=True) # 删掉不需要的数据\n",
    "df_train\n",
    "df_train.info() # 有空值需要处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "id": "132738de-84f5-47a1-be97-f37169ae04b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 数据分类\n",
    "# 数值特征：Fare\n",
    "# 分类有序特征：Age\n",
    "# 分类普通特征：PassedgerId,Pclass,Sex,SibSp,Parch,Embarked\n",
    "# 预测值：Survived"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "id": "4a977284-8b26-4bc5-aa44-798f35b0250d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 9 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Sex          891 non-null    object \n",
      " 4   Age          891 non-null    float64\n",
      " 5   SibSp        891 non-null    int64  \n",
      " 6   Parch        891 non-null    int64  \n",
      " 7   Fare         891 non-null    float64\n",
      " 8   Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(2)\n",
      "memory usage: 62.8+ KB\n"
     ]
    }
   ],
   "source": [
    "# 分类有序特征用数字的方法处理\n",
    "# 填充年龄平均值给空值\n",
    "df_train['Age']=df_train['Age'].fillna(df['Age'].mean())\n",
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "id": "29bcde17-596a-4a83-8696-4d63a3da9d62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>female</th>\n",
       "      <th>male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     female   male\n",
       "0     False   True\n",
       "1      True  False\n",
       "2      True  False\n",
       "3      True  False\n",
       "4     False   True\n",
       "..      ...    ...\n",
       "886   False   True\n",
       "887    True  False\n",
       "888    True  False\n",
       "889   False   True\n",
       "890   False   True\n",
       "\n",
       "[891 rows x 2 columns]"
      ]
     },
     "execution_count": 730,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 普通无序特征用get_dummies编码\n",
    "pd.get_dummies(df_train['Sex'])\n",
    "# one-hot-encoding一般去掉一行，不然会dummy varible trap，因为一个人不是男就是女，具有推导关系，这也就对应stata虚拟变量设置时必须要少一个，以防止多重共线性\n",
    "# 用在社会科学研究中，即用此功能实现虚拟变量设定\n",
    "# 网址https://www.geeksforgeeks.org/ml-dummy-varible-trap-in-regression-models/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "id": "a8dc1310-fccf-4eff-8015-02f460ab655d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Pclass_2.0</th>\n",
       "      <th>Pclass_3.0</th>\n",
       "      <th>Pclass_nan</th>\n",
       "      <th>Sex_male</th>\n",
       "      <th>Sex_nan</th>\n",
       "      <th>SibSp_1.0</th>\n",
       "      <th>...</th>\n",
       "      <th>Parch_1.0</th>\n",
       "      <th>Parch_2.0</th>\n",
       "      <th>Parch_3.0</th>\n",
       "      <th>Parch_4.0</th>\n",
       "      <th>Parch_5.0</th>\n",
       "      <th>Parch_6.0</th>\n",
       "      <th>Parch_nan</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>Embarked_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>38</td>\n",
       "      <td>71</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>32</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Age  Fare  Pclass_2.0  Pclass_3.0  Pclass_nan  \\\n",
       "0              1         0   22     7           0           1           0   \n",
       "1              2         1   38    71           0           0           0   \n",
       "2              3         1   26     7           0           1           0   \n",
       "3              4         1   35    53           0           0           0   \n",
       "4              5         0   35     8           0           1           0   \n",
       "..           ...       ...  ...   ...         ...         ...         ...   \n",
       "886          887         0   27    13           1           0           0   \n",
       "887          888         1   19    30           0           0           0   \n",
       "888          889         0   30    23           0           1           0   \n",
       "889          890         1   26    30           0           0           0   \n",
       "890          891         0   32     7           0           1           0   \n",
       "\n",
       "     Sex_male  Sex_nan  SibSp_1.0  ...  Parch_1.0  Parch_2.0  Parch_3.0  \\\n",
       "0           1        0          1  ...          0          0          0   \n",
       "1           0        0          1  ...          0          0          0   \n",
       "2           0        0          0  ...          0          0          0   \n",
       "3           0        0          1  ...          0          0          0   \n",
       "4           1        0          0  ...          0          0          0   \n",
       "..        ...      ...        ...  ...        ...        ...        ...   \n",
       "886         1        0          0  ...          0          0          0   \n",
       "887         0        0          0  ...          0          0          0   \n",
       "888         0        0          1  ...          0          1          0   \n",
       "889         1        0          0  ...          0          0          0   \n",
       "890         1        0          0  ...          0          0          0   \n",
       "\n",
       "     Parch_4.0  Parch_5.0  Parch_6.0  Parch_nan  Embarked_Q  Embarked_S  \\\n",
       "0            0          0          0          0           0           1   \n",
       "1            0          0          0          0           0           0   \n",
       "2            0          0          0          0           0           1   \n",
       "3            0          0          0          0           0           1   \n",
       "4            0          0          0          0           0           1   \n",
       "..         ...        ...        ...        ...         ...         ...   \n",
       "886          0          0          0          0           0           1   \n",
       "887          0          0          0          0           0           1   \n",
       "888          0          0          0          0           0           1   \n",
       "889          0          0          0          0           0           0   \n",
       "890          0          0          0          0           1           0   \n",
       "\n",
       "     Embarked_nan  \n",
       "0               0  \n",
       "1               0  \n",
       "2               0  \n",
       "3               0  \n",
       "4               0  \n",
       "..            ...  \n",
       "886             0  \n",
       "887             0  \n",
       "888             0  \n",
       "889             0  \n",
       "890             0  \n",
       "\n",
       "[891 rows x 26 columns]"
      ]
     },
     "execution_count": 732,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 便捷方法，用df全部替换\n",
    "needcode_cat_columns=['Pclass','Sex','SibSp','Parch','Embarked']\n",
    "df_code=pd.get_dummies(\n",
    "    df_train,\n",
    "    # 要转码的列\n",
    "    columns=needcode_cat_columns,\n",
    "    # 即使是空值也要做转码\n",
    "    dummy_na=True,\n",
    "    # 移除列中的一列,谨防dummy varible trap\n",
    "    drop_first=True\n",
    ") # 输出布尔值\n",
    "# 转换布尔值\n",
    "df_code = df_code.astype(int)\n",
    "df_code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "764343d3-3d1c-4dc3-a5eb-17ef524c92a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41351a23-a6bc-46c1-a20e-9bdfaa0ebafb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 机器学习训练"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "id": "b36ea900-8f4e-4ff0-967d-c981112fd911",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      0\n",
       "      ..\n",
       "886    0\n",
       "887    1\n",
       "888    0\n",
       "889    1\n",
       "890    0\n",
       "Name: Survived, Length: 891, dtype: int32"
      ]
     },
     "execution_count": 733,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y=df_code.pop('Survived')\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "id": "edecd74d-9677-40a7-b09c-be34af297794",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Pclass_2.0</th>\n",
       "      <th>Pclass_3.0</th>\n",
       "      <th>Pclass_nan</th>\n",
       "      <th>Sex_male</th>\n",
       "      <th>Sex_nan</th>\n",
       "      <th>SibSp_1.0</th>\n",
       "      <th>SibSp_2.0</th>\n",
       "      <th>...</th>\n",
       "      <th>Parch_1.0</th>\n",
       "      <th>Parch_2.0</th>\n",
       "      <th>Parch_3.0</th>\n",
       "      <th>Parch_4.0</th>\n",
       "      <th>Parch_5.0</th>\n",
       "      <th>Parch_6.0</th>\n",
       "      <th>Parch_nan</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>Embarked_nan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>38</td>\n",
       "      <td>71</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>26</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>35</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>27</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>19</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>30</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>26</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>32</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Age  Fare  Pclass_2.0  Pclass_3.0  Pclass_nan  Sex_male  \\\n",
       "0              1   22     7           0           1           0         1   \n",
       "1              2   38    71           0           0           0         0   \n",
       "2              3   26     7           0           1           0         0   \n",
       "3              4   35    53           0           0           0         0   \n",
       "4              5   35     8           0           1           0         1   \n",
       "..           ...  ...   ...         ...         ...         ...       ...   \n",
       "886          887   27    13           1           0           0         1   \n",
       "887          888   19    30           0           0           0         0   \n",
       "888          889   30    23           0           1           0         0   \n",
       "889          890   26    30           0           0           0         1   \n",
       "890          891   32     7           0           1           0         1   \n",
       "\n",
       "     Sex_nan  SibSp_1.0  SibSp_2.0  ...  Parch_1.0  Parch_2.0  Parch_3.0  \\\n",
       "0          0          1          0  ...          0          0          0   \n",
       "1          0          1          0  ...          0          0          0   \n",
       "2          0          0          0  ...          0          0          0   \n",
       "3          0          1          0  ...          0          0          0   \n",
       "4          0          0          0  ...          0          0          0   \n",
       "..       ...        ...        ...  ...        ...        ...        ...   \n",
       "886        0          0          0  ...          0          0          0   \n",
       "887        0          0          0  ...          0          0          0   \n",
       "888        0          1          0  ...          0          1          0   \n",
       "889        0          0          0  ...          0          0          0   \n",
       "890        0          0          0  ...          0          0          0   \n",
       "\n",
       "     Parch_4.0  Parch_5.0  Parch_6.0  Parch_nan  Embarked_Q  Embarked_S  \\\n",
       "0            0          0          0          0           0           1   \n",
       "1            0          0          0          0           0           0   \n",
       "2            0          0          0          0           0           1   \n",
       "3            0          0          0          0           0           1   \n",
       "4            0          0          0          0           0           1   \n",
       "..         ...        ...        ...        ...         ...         ...   \n",
       "886          0          0          0          0           0           1   \n",
       "887          0          0          0          0           0           1   \n",
       "888          0          0          0          0           0           1   \n",
       "889          0          0          0          0           0           0   \n",
       "890          0          0          0          0           1           0   \n",
       "\n",
       "     Embarked_nan  \n",
       "0               0  \n",
       "1               0  \n",
       "2               0  \n",
       "3               0  \n",
       "4               0  \n",
       "..            ...  \n",
       "886             0  \n",
       "887             0  \n",
       "888             0  \n",
       "889             0  \n",
       "890             0  \n",
       "\n",
       "[891 rows x 25 columns]"
      ]
     },
     "execution_count": 734,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X=df_code\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "id": "a366622e-8c47-4b06-8b15-a39fff4ae106",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-13 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-13 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-13 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-13 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-13 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-13 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-13 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-13 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-13 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-13 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-13 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-13 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-13 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-13 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-13 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-13 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" checked><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(solver='liblinear')"
      ]
     },
     "execution_count": 736,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "# 创建模型\n",
    "logreg=LogisticRegression(solver='liblinear') # 线性模型\n",
    "# 模型训练\n",
    "logreg.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "id": "e6fa785b-354a-4036-9099-40b27cf9c30c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8125701459034792"
      ]
     },
     "execution_count": 737,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.score(X,y) # 准确率81%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0e94571-baa9-4ac9-b480-cc9c33717921",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
