{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "af8c58ca-c293-4819-8703-79cb4f6eae5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 图表可视化\n",
    "# 类库pyecharts,matplotlib,seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2acab65a-faae-4f3f-8303-1de3ccec84c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实战一、柱状图，直方图，漏斗图，折线图，饼图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "687036b8-00e1-4625-99a4-a316149d86ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 柱状图：组距无意义"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "70861d5d-588d-41b6-9bf8-be368e647919",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>公司</th>\n",
       "      <th>日期</th>\n",
       "      <th>收盘价</th>\n",
       "      <th>开盘价</th>\n",
       "      <th>高位价</th>\n",
       "      <th>低</th>\n",
       "      <th>交易量</th>\n",
       "      <th>涨跌幅</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BIDU</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>102.00</td>\n",
       "      <td>102.80</td>\n",
       "      <td>103.26</td>\n",
       "      <td>101.00</td>\n",
       "      <td>1.78</td>\n",
       "      <td>-0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BABA</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>165.15</td>\n",
       "      <td>168.01</td>\n",
       "      <td>168.23</td>\n",
       "      <td>163.64</td>\n",
       "      <td>14.19</td>\n",
       "      <td>-0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IQ</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>15.92</td>\n",
       "      <td>16.14</td>\n",
       "      <td>16.22</td>\n",
       "      <td>15.50</td>\n",
       "      <td>11.65</td>\n",
       "      <td>-0.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>JD</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>28.19</td>\n",
       "      <td>28.22</td>\n",
       "      <td>28.57</td>\n",
       "      <td>27.97</td>\n",
       "      <td>10.64</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     公司          日期     收盘价     开盘价     高位价       低    交易量   涨跌幅\n",
       "0  BIDU  2019-10-01  102.00  102.80  103.26  101.00   1.78 -0.01\n",
       "1  BABA  2019-10-01  165.15  168.01  168.23  163.64  14.19 -0.01\n",
       "2    IQ  2019-10-01   15.92   16.14   16.22   15.50  11.65 -0.01\n",
       "3    JD  2019-10-01   28.19   28.22   28.57   27.97  10.64  0.00"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 引入数据\n",
    "import pandas as pd\n",
    "df=pd.read_excel('./datas/stocks/柱状图：股票数据对比.xlsx')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dc2e9943-9a71-471b-911b-c892e50b63fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 柱状图\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Bar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aab3877e-327e-4d59-abc1-f3f49d82107d",
   "metadata": {},
   "outputs": [],
   "source": [
    "bar=(\n",
    "    Bar()\n",
    "    .add_xaxis(df['公司'].to_list())\n",
    "    .add_yaxis('收盘价',df['收盘价'].to_list())\n",
    "    .add_yaxis('开盘价',df['开盘价'].to_list())\n",
    "    .add_yaxis('高位价',df['高位价'].to_list())\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='股票数据对比图'))\n",
    "    \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8db66fd3-ea57-4e4c-a265-d02c323713de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Python312\\\\ant-learn-pandas-master\\\\ant-learn-pandas-master\\\\bar_chart.html'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bar.render('bar_chart.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8978bfc3-5f68-4d27-824b-9bf8f1f9898a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a8e8d09-8d29-464d-9fc1-7999beb3f335",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8aee33fb-79af-44c7-bdd8-58bd9ef2766d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 直方图：组距有意义"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ec47b3f3-b32b-48fe-9a62-615589ca086e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>MEDV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501</th>\n",
       "      <td>0.06263</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.593</td>\n",
       "      <td>69.1</td>\n",
       "      <td>2.4786</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>391.99</td>\n",
       "      <td>9.67</td>\n",
       "      <td>22.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>0.04527</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.120</td>\n",
       "      <td>76.7</td>\n",
       "      <td>2.2875</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.08</td>\n",
       "      <td>20.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>0.06076</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.976</td>\n",
       "      <td>91.0</td>\n",
       "      <td>2.1675</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.64</td>\n",
       "      <td>23.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>0.10959</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.794</td>\n",
       "      <td>89.3</td>\n",
       "      <td>2.3889</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>393.45</td>\n",
       "      <td>6.48</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>0.04741</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0</td>\n",
       "      <td>0.573</td>\n",
       "      <td>6.030</td>\n",
       "      <td>80.8</td>\n",
       "      <td>2.5050</td>\n",
       "      <td>1</td>\n",
       "      <td>273</td>\n",
       "      <td>21.0</td>\n",
       "      <td>396.90</td>\n",
       "      <td>7.88</td>\n",
       "      <td>11.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>506 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD  TAX  \\\n",
       "0    0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296   \n",
       "1    0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242   \n",
       "2    0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242   \n",
       "3    0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222   \n",
       "4    0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222   \n",
       "..       ...   ...    ...   ...    ...    ...   ...     ...  ...  ...   \n",
       "501  0.06263   0.0  11.93     0  0.573  6.593  69.1  2.4786    1  273   \n",
       "502  0.04527   0.0  11.93     0  0.573  6.120  76.7  2.2875    1  273   \n",
       "503  0.06076   0.0  11.93     0  0.573  6.976  91.0  2.1675    1  273   \n",
       "504  0.10959   0.0  11.93     0  0.573  6.794  89.3  2.3889    1  273   \n",
       "505  0.04741   0.0  11.93     0  0.573  6.030  80.8  2.5050    1  273   \n",
       "\n",
       "     PTRATIO       B  LSTAT  MEDV  \n",
       "0       15.3  396.90   4.98  24.0  \n",
       "1       17.8  396.90   9.14  21.6  \n",
       "2       17.8  392.83   4.03  34.7  \n",
       "3       18.7  394.63   2.94  33.4  \n",
       "4       18.7  396.90   5.33  36.2  \n",
       "..       ...     ...    ...   ...  \n",
       "501     21.0  391.99   9.67  22.4  \n",
       "502     21.0  396.90   9.08  20.6  \n",
       "503     21.0  396.90   5.64  23.9  \n",
       "504     21.0  393.45   6.48  22.0  \n",
       "505     21.0  396.90   7.88  11.9  \n",
       "\n",
       "[506 rows x 14 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "df=pd.read_excel('./datas/boston-house-prices/housing.xlsx')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "83fabfc6-2835-466d-8386-f45a35aa24d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 506 entries, 0 to 505\n",
      "Data columns (total 14 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   CRIM     506 non-null    float64\n",
      " 1   ZN       506 non-null    float64\n",
      " 2   INDUS    506 non-null    float64\n",
      " 3   CHAS     506 non-null    int64  \n",
      " 4   NOX      506 non-null    float64\n",
      " 5   RM       506 non-null    float64\n",
      " 6   AGE      506 non-null    float64\n",
      " 7   DIS      506 non-null    float64\n",
      " 8   RAD      506 non-null    int64  \n",
      " 9   TAX      506 non-null    int64  \n",
      " 10  PTRATIO  506 non-null    float64\n",
      " 11  B        506 non-null    float64\n",
      " 12  LSTAT    506 non-null    float64\n",
      " 13  MEDV     506 non-null    float64\n",
      "dtypes: float64(11), int64(3)\n",
      "memory usage: 55.5 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cf893952-93ff-4cd8-a45e-c9a8ab3e85fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      24.0\n",
       "1      21.6\n",
       "2      34.7\n",
       "3      33.4\n",
       "4      36.2\n",
       "       ... \n",
       "501    22.4\n",
       "502    20.6\n",
       "503    23.9\n",
       "504    22.0\n",
       "505    11.9\n",
       "Name: MEDV, Length: 506, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MEDV']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c3d8262b-545f-4fff-977f-a690693bca32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# matplotlib直方图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7f1048dd-834b-4682-b505-20d923638e7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "UsageError: unrecognized arguments: # 魔法命令\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline # 魔法命令"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32b7e5a8-7766-4142-9574-88f4a3731f8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,5))  # 宽度和高度\n",
    "plt.hist(df['MEDV'],bins=100) # 房价数据分为100份\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a1a325b-fa5d-46e6-9b9c-06b80e39166b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pyecharts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ded44a4f-ff13-491b-b628-eb24f72d00ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Bar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05fa5d4f-5b26-473e-b337-e2e6e1c580bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 计算间隔以及间隔里面有多少个值\n",
    "hist,bin_edges=np.histogram(df['MEDV'],bins=100) # 拆分为100个间隔数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c47fe8ce-24af-450f-b71a-590079f3ae39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 每个间隔的分割点\n",
    "bin_edges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0184516a-6bb5-4564-b39d-5a584748398b",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(bin_edges) # 为101个而非100个，bin_edges为间隔分割点，分割点划分为例如三个区间就需要四个点，故划分为100份，需要101点"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "998e1f9c-95cd-4809-aff9-d14625d21ec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 间隔计数\n",
    "hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d40fdfc0-2875-4288-ac37-adae1113783e",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(hist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b0f2df9-179b-45c3-bed3-16fb7b367195",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 查看bins每一个值和前一个值的差值\n",
    "np.diff(bin_edges)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15b71af9-0b6d-45f3-8f32-4d3056b44ed0",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(np.diff(bin_edges))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2b8c1df-2d56-4b2b-ac7f-bedfbec88ebb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 作图\n",
    "bar=(\n",
    "    Bar()\n",
    "    .add_xaxis([str(x) for x in bin_edges[:-1]]) # 舍弃101位值\n",
    "    .add_yaxis('价格分布',[float(x) for x in hist],category_gap=0)\n",
    "    .set_global_opts(\n",
    "        title_opts=opts.TitleOpts(title='波士顿房价价格分布直方图',pos_left='center'),\n",
    "        legend_opts=opts.LegendOpts(is_show=False)\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "914ae364-83a3-471b-b1e9-f2dcf5bf7bcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "bar.render('house_price.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5a1df8f-841e-4373-ace5-d0e4e57fc93e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f79316c0-9a46-4863-88bd-753265e2acd5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24ae74be-4505-4ad5-abbd-90570618af73",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 漏斗图：业务流程环节多的流程分析，各个环节人数统计反映实际问题\n",
    "# 电商网站：优化页面体验，提升购买次数\n",
    "# 数据来源：https://www.kaggle.com/aerodinamicc/ecommerce-website-funnel-analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e93de30-d2e2-4f47-9a5a-be9d05b1201d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "# 五个数据表\n",
    "df_homepage=pd.read_csv('datas/ecommerce-website-funnel-analysis/home_page_table.csv')\n",
    "df_confirmationpage=pd.read_csv('datas/ecommerce-website-funnel-analysis/payment_confirmation_table.csv')\n",
    "df_paymentpage=pd.read_csv('datas/ecommerce-website-funnel-analysis/payment_page_table.csv')\n",
    "df_searchpage=pd.read_csv('datas/ecommerce-website-funnel-analysis/search_page_table.csv')\n",
    "df_userpage=pd.read_csv('datas/ecommerce-website-funnel-analysis/user_table.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f89bdae6-fec7-4e3f-b02d-8e9bf0beb793",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_homepage.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4fdeec2-a7b6-4afe-bf1a-a32dab494e56",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_searchpage.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea8103e6-e34f-4db9-afb3-ce4a31312d30",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_paymentpage.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a3002c7-5637-4ae0-aa9a-60fafeb1b0ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_confirmationpage.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bff4dfb-7a80-4559-a1f1-4e4b64230ee6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_userpage.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98213d90-60fe-416f-b824-65332a990db3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 设备类型\n",
    "df_userpage['device'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f223cafb-1bc6-45bc-8e16-226e09f76155",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 性别类型\n",
    "df_userpage['sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40b03391-c602-43a0-b1d8-91702e6c30ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 初始化合并的表\n",
    "df_merge = df_userpage\n",
    "\n",
    "# 循环合并多个表\n",
    "for idx, df_inter in enumerate([df_homepage, df_searchpage, df_paymentpage, df_confirmationpage]):\n",
    "    # 每次合并时为重复的列添加后缀\n",
    "    df_merge = pd.merge(\n",
    "        left=df_merge,\n",
    "        right=df_inter,\n",
    "        on='user_id',  # 使用相同的合并键\n",
    "        how='left',\n",
    "        suffixes=('', f'_table{idx+1}')  # 添加后缀避免重复\n",
    "    )\n",
    "\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af046627-4e52-4c44-89a2-6b6c8733883e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_merge.columns=[\n",
    "    'user_id','date','device','sex','homepage','searchpage','paymentpage','confirmationpage'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfbf01fe-8bae-4881-87d9-73bbf3dae94f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8f39bc4-405b-4054-ba21-0038ae660b31",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 计算每个页面的用户数目\n",
    "datas=[]\n",
    "for column in ['homepage','searchpage','paymentpage','confirmationpage']:\n",
    "    user_count=df_merge[column].dropna().size\n",
    "    datas.append((column,user_count)) # 漏斗名称为键，数值为值\n",
    "print(datas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc19e82b-ad5a-4894-9c2f-a1470f2c9dd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方便对比，归一化处理\n",
    "max_count=datas[0][1] # 第零个元素是第一个页面，第二个元素是人数值\n",
    "datas_norm=[\n",
    "    (x,round(y*100/max_count,2))\n",
    "    for x,y in datas\n",
    "]\n",
    "datas_norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bc916b9-c9f4-4a09-9ccf-a7529f2a12c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 绘制漏斗图\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Funnel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e1f15ce-74ab-436a-bc13-d38dccb14a0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 初始化\n",
    "funnel=Funnel()\n",
    "funnel.add('用户比例',datas_norm)\n",
    "funnel.render('用户比例.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44232419-e4b4-400b-8572-a4291925cb59",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6359d3b-6eef-4c58-889a-06753c51b187",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e1c28e9-89fa-4dc0-a2e3-10a6b9454418",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 折线图——数据同上"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccbaa1ef-ed80-4455-afc7-b2811ad6243c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 数据引入\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pyecharts.options as opts\n",
    "from pyecharts.charts import Line\n",
    "df_homepage=pd.read_csv('datas/ecommerce-website-funnel-analysis/home_page_table.csv')\n",
    "df_searchpage=pd.read_csv('datas/ecommerce-website-funnel-analysis/search_page_table.csv')\n",
    "df_paymentpage=pd.read_csv('datas/ecommerce-website-funnel-analysis/payment_page_table.csv')\n",
    "df_confirmationpage=pd.read_csv('datas/ecommerce-website-funnel-analysis/payment_confirmation_table.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93a1a3f0-3e97-457c-82e6-260ebe7b5457",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将五个表格合并\n",
    "# 初始化合并的表\n",
    "df_merge = df_userpage\n",
    "\n",
    "# 循环合并多个表\n",
    "for idx, df_inter in enumerate([df_homepage, df_searchpage, df_paymentpage, df_confirmationpage]):\n",
    "    # 每次合并时为重复的列添加后缀\n",
    "    df_merge = pd.merge(\n",
    "        left=df_merge,\n",
    "        right=df_inter,\n",
    "        on='user_id',  # 使用相同的合并键\n",
    "        how='left',\n",
    "        suffixes=('', f'_table{idx+1}')  # 添加后缀避免重复\n",
    "    )\n",
    "\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61f41efa-ae65-4354-8fd7-01d01b751292",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 改名字\n",
    "df_merge.columns=[\n",
    "    'user_id','date','device','sex','homepage','searchpage','paymentpage','confirmationpage'\n",
    "]\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2eb009d3-0a97-4e98-bea8-ef8c5ef5514d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 处理时间日期数据\n",
    "df_merge['date']=pd.to_datetime(df_merge['date'])\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88dcb265-3970-4681-a7d8-38a722a9c864",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 展现每个页面整体的按照日期进行分类的PV曲线\n",
    "df_data=(\n",
    "    df_merge\n",
    "    .groupby('date')\n",
    "    .agg(\n",
    "        homepage=('homepage',lambda x:x.dropna().size),\n",
    "        searchpage=('searchpage',lambda x:x.dropna().size),\n",
    "        paymentpage=('paymentpage',lambda x:x.dropna().size),\n",
    "        confirmationpage=('confirmationpage',lambda x:x.dropna().size)\n",
    "        \n",
    "    )\n",
    ")\n",
    "df_data\n",
    "# 每一天每个页面有多少人"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de733251-1cc2-4cfa-a439-9ba7a9b54506",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 绘制折线图\n",
    "c=(\n",
    "    Line()\n",
    "    .add_xaxis(df_data.index.to_list())\n",
    "    .add_yaxis('homepage',df_data['homepage'].to_list())\n",
    "    .add_yaxis('searchpage',df_data['searchpage'].to_list())\n",
    "    .add_yaxis('paymentpage',df_data['paymentpage'].to_list())\n",
    "    .add_yaxis('confirmationpage',df_data['confirmationpage'].to_list())\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='按照日期绘制的折线图'))\n",
    ")\n",
    "c.render('按照日期绘制折线图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af9cc74e-a391-4db2-916d-5610f1aac52f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 按照设备与时间绘制折线图，经过粗略的折线图可知搜索页有问题，通过日期与设备两个分组元素查看搜索页的用户折线图\n",
    "df_data=(\n",
    "    df_merge\n",
    "    .groupby(['date','device'])['searchpage']\n",
    "    .agg(searchpage=lambda x:x.dropna().size) # 人流量\n",
    "    .unstack() # 将设备变为列名\n",
    ")\n",
    "df_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c05fd09-c731-4cc8-a242-35437806b533",
   "metadata": {},
   "outputs": [],
   "source": [
    "c=(\n",
    "    Line()\n",
    "    .add_xaxis(df_data.index.to_list())\n",
    "    .add_yaxis('Desktop',df_data[('searchpage','Desktop')].to_list()) # 二层索引取值\n",
    "    .add_yaxis('Mobile',df_data[('searchpage','Mobile')].to_list())\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='按照日期与设备观察搜索页的折线图'))\n",
    "    \n",
    ")\n",
    "c.render('按照日期与设备观察搜索页的折线图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5af943ca-f26e-4ac3-b43c-45e7632b4360",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "215eaa35-a769-4504-8a40-93456233b2d1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58aa8b36-1d3a-45f7-b10c-28ce6159c43f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 饼图\n",
    "# 对比天气，风向，空气质量，写函数重复调用"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ffa0fad-7663-4143-8a30-c91e70770220",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Pie"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b772d481-67a7-4e10-a25d-c38739b6e121",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts.charts import Pie\n",
    "from pyecharts import options as opts\n",
    "\n",
    "def create_pie(datas, title):\n",
    "    \"\"\"\n",
    "    创建饼图对象，文档：https://pyecharts.org/#/zh-cn/basic_charts?id=pie%ef%bc%9a%e9%a5%bc%e5%9b%be\n",
    "    所传参数\n",
    "    @param datas: 数据，形式为[('a', 'b'), ('c', 'd')] 列表里面放元组\n",
    "    @param title: 图表标题\n",
    "    \"\"\"\n",
    "    pie = Pie()\n",
    "    pie.add('', datas)\n",
    "    \n",
    "    # 正确的设置全局选项\n",
    "    pie.set_global_opts(\n",
    "        title_opts=opts.TitleOpts(title=title),\n",
    "        legend_opts=opts.LegendOpts(pos_right='right')  # 标签放右侧\n",
    "    )\n",
    "    \n",
    "    # 正确的设置系列选项\n",
    "    pie.set_series_opts(label_opts=opts.LabelOpts(formatter='{b}:{c}:{d}%'))  # 扇区展示数据百分比\n",
    "    \n",
    "    return pie\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58afa20c-6f7c-497f-9fd0-a22995eea73d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "df=pd.read_csv('datas/beijing_tianqi/beijing_tianqi_2018.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fc01116-0999-40a0-a307-d94a6bd9ef2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 天气类型饼图\n",
    "df_tianqi=df.groupby('tianqi').size().sort_values(ascending=False)\n",
    "df_tianqi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4e46838-54e6-42b9-8c8d-3cddb2ce141b",
   "metadata": {},
   "outputs": [],
   "source": [
    "datas=list(zip(df_tianqi.index.to_list(),df_tianqi.to_list())) # 函数所需数据处理\n",
    "datas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74a51bfc-50a6-4b67-8bc4-27a121e1c696",
   "metadata": {},
   "outputs": [],
   "source": [
    "pie=create_pie(datas,'天气对比饼图')\n",
    "pie.render('天气对比饼图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11b95e5d-d64d-4422-8bb1-fa8a5bc9e088",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 风向饼图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cb354a1-1b9d-49ae-8e50-8781c8b7aaac",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fengxiang=df.groupby('fengxiang').size().sort_values(ascending=False)\n",
    "datas=list(zip(df_fengxiang.index.to_list(),df_fengxiang.to_list()))\n",
    "pie=create_pie(datas,'风向对比饼图')\n",
    "pie.render('风向对比饼图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b81af7b-1977-4cae-b483-d6b669e94e05",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 空气质量饼图\n",
    "df_aqiInfo=df.groupby('aqiInfo').size().sort_values(ascending=False)\n",
    "datas=list(zip(df_aqiInfo.index.to_list(),df_aqiInfo.to_list()))\n",
    "pie=create_pie(datas,'空气质量饼图')\n",
    "pie.render('空气质量饼图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40ccc8da-3222-43fe-b251-1f56f22086f9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee0f1779-ba8c-4e62-885c-8e2251abd7b4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "246d8605-597b-43b7-8991-e63a2c691a2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 散点图——判断变量关系\n",
    "# BMI与保险费用关系\n",
    "# 数据集地址 https://www.kaggle.com/mirichoi2018/insurance/home"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc90ac10-3389-46e9-aeb6-9dda86827a3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "df=pd.read_csv('./datas/archive/insurance.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f1c9339-d10b-42ae-9851-f63e1eb200bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 散点图绘制\n",
    "# 排序BMI\n",
    "df.sort_values(by='bmi',inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94cc8435-9b3f-4334-9092-f15f1fa738bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "bmi=df['bmi'].to_list()\n",
    "charges=df['charges'].to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2614537b-e565-4ecb-9c1d-e93316dd17e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyecharts.options as opts\n",
    "from pyecharts.charts import Scatter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97e1bce2-623b-484e-bc07-db733f2b1035",
   "metadata": {},
   "outputs": [],
   "source": [
    "scatter=(\n",
    "    Scatter() #初始化图表\n",
    "    .add_xaxis(\n",
    "        xaxis_data=bmi # x轴即bmi\n",
    "    )\n",
    "    .add_yaxis( \n",
    "        series_name='',\n",
    "        y_axis=charges,\n",
    "        symbol_size=4, # 散点图点大小\n",
    "        label_opts=opts.LabelOpts(is_show=False) # 不让点展示数字，只展示点\n",
    "    )\n",
    "    .set_global_opts( # 设置type参数使xy轴将数据全部当成数字值处理\n",
    "        xaxis_opts=opts.AxisOpts(type_='value'),\n",
    "        yaxis_opts=opts.AxisOpts(type_='value'),\n",
    "        title_opts=opts.TitleOpts(title='bmi与保险关系图',pos_left='center') # 标题设置与居中展示\n",
    "        \n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c86abf60-eb80-47b6-a8e2-c6f1bcc7b842",
   "metadata": {},
   "outputs": [],
   "source": [
    "scatter.render('bmi与保险散点图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efec3e49-a463-46d2-abc5-1987dd4d153c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e06007fe-dcd8-4b34-8b61-8831b8f42365",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6b89956-ad28-460b-85a1-af5a6efb0652",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 箱形图：特征具备边缘（上下边缘，在边缘之中的值为正常值，超出范围为异常值），盒须，四分之三75%分位数，四分之一25%分位数，中位数，异常值\n",
    "# 讲解图见python补充知识点\n",
    "# 别称为盒须图，盒式图，箱线图\n",
    "# 分析天气数据的温度分布"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29179c0c-342c-4f00-bc45-9dbc9167f990",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 引入数据\n",
    "import pandas as pd\n",
    "df=pd.read_csv('./datas/beijing_tianqi/beijing_tianqi_2018.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74b1ff1c-4306-4f55-a7b9-cd5a96a2b886",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "sns.set(style='whitegrid') # 样式\n",
    "sns.set(rc={'figure.figsize':(11.7,8.27)}) # 图的尺寸"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47ea28db-2d78-4638-a62a-4732c956be68",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['bWendu']=df['bWendu'].astype('str').str.replace('℃','').astype(float)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f8b8c8e-fcba-4787-b6ce-d16ee2f236d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 添加季度数字列\n",
    "df['quarter']=pd.to_datetime(df['ymd']).dt.quarter\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbcf859b-bf27-44f5-82a2-ff62d80c1c37",
   "metadata": {},
   "outputs": [],
   "source": [
    "ax=sns.boxplot(x='quarter',y='bWendu',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1a0c839-900c-4c04-8a5e-7bbd56820404",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d337720c-5bde-4019-b9f5-493b7aa4338c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4971884-9f81-4844-9874-e232fd5e978d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 热力图：两个分类变量的强度分布：红色正相关，蓝色负相关，实为相关图\n",
    "# "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8df8b4d4-448b-43ad-89e6-5a20c9bd9acb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "sns.set() # 默认样式\n",
    "sns.set_style('whitegrid',{'font.sans-serif':['simhei','Arial']}) # 白色单元格，字体设置展示中文"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cfea22d-5162-41e9-ab1b-0aa933314b8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实例数据：模拟绘制景区热度数据热力图\n",
    "df=pd.DataFrame(\n",
    "    np.random.rand(4,5),\n",
    "    index=['故宫','天安门','森林公园','长城'],\n",
    "    columns=['周一','周二','周三','周四','周五']\n",
    "    \n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d007796-896c-4816-afcf-facb08967169",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(10,4))\n",
    "sns.heatmap(df,annot=True,fmt='.3f',cmap='coolwarm') # annot可以展示数字，后面跟着数字格式2f表示保留两位小数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd40689f-e8fd-42e8-bd99-0cf84c199795",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 泰坦尼克数据分析\n",
    "df=pd.concat(\n",
    "    [\n",
    "        pd.read_csv('./datas/titanic/titanic_test.csv'),\n",
    "        pd.read_csv('./datas/titanic/titanic_train.csv')\n",
    "        \n",
    "    ]\n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fde1a788-9994-43cd-90b8-973ec74e8927",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()\n",
    "# 将性别，票价，仓位转换成数字来探究关系"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a4bdc58-4300-4332-aa6f-479b6cdf6478",
   "metadata": {},
   "outputs": [],
   "source": [
    "for field in ['Sex','Ticket','Cabin']:\n",
    "    df[field]=df[field].astype('category').cat.codes # 经过编码之后把字符串转换成为分类的数字编码"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "036fb540-9d3e-4076-8f94-a6a837f1fb9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93987157-1a99-49ca-9c49-b4e0d005be81",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new=df.drop(['Name','Embarked'],axis=1)\n",
    "df_new.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6553f345-b92a-42ef-8eba-7d4ab6dff21b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5339dfa9-bf4c-4dc7-ab45-3d2617bceadc",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "sns.heatmap(df_new.corr(),annot=True,fmt='.3f',cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "040a2bb6-6220-4aa2-b74b-3e7738788002",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a7a9390-f01e-4005-8808-fdb8953e1f76",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d566125-3f64-4484-b195-1f39adf7c0b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 仪表盘图：展示目标完成进度"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a750f798-091a-45a6-bcb4-208d21a284c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyecharts\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Gauge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "271682cd-1974-46bf-9473-156d245befad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 单指针仪表盘\n",
    "gauge=(\n",
    "    Gauge()\n",
    "    .add('业务指标',[('收入完成率',87.8)]) # 只有一个指标\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='收入完成率'))\n",
    ")\n",
    "gauge.render('收入完成率仪表盘图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef775bf0-7411-43c7-8b93-0101040bfd89",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 多指针仪表盘图\n",
    "gauge=(\n",
    "    Gauge()\n",
    "    .add('业务指标',[('上衣营业额',90.5),('裤子营业额',87.8),('鞋子营业额',15.8)]) # 只有一个指标\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='售货完成率'))\n",
    ")\n",
    "gauge.render('售货完成率仪表盘图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0edc91c6-bf33-40ee-8703-2b2fbaf3ef88",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24de5798-c887-40ac-b2da-9981d3ead721",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11c2472b-fdbf-4167-9ba1-077ee485bd9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 网格图——关系图\n",
    "# 传球网络图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74c2600a-5e08-4b3b-bd1f-2739fb929613",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Graph,Page\n",
    "import pandas as pd\n",
    "df=pd.read_csv('./datas/datas/passingevents.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ba869a3-1c06-4800-add9-15c6b22d81fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 选取一个场次一个队伍的数据\n",
    "df=df[(df['MatchID']==1)&(df['TeamID']=='Huskies')]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4bfdbc8-af62-4e21-8cd0-99cf8458f149",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 汇总每个球员给其他球员传了多少次球\n",
    "df=df.groupby(['OriginPlayerID','DestinationPlayerID']).size().reset_index(name='count')\n",
    "df\n",
    "# 构造数据：两个节点，一个传球权重"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef1fc775-aeed-4554-aabf-82ca3aa34d5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 构造Graph所需nodes,links数据，对数据进行封装\n",
    "# 所有去重后的队员ID\n",
    "players=pd.concat([df['OriginPlayerID'],df['DestinationPlayerID']]).unique()\n",
    "players\n",
    "# 计算所有的队员数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7f76554-819b-4563-a068-c27bc275cb5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 绘制图形所需节点列表。封装格式\n",
    "nodes=[]\n",
    "for player in players:\n",
    "    nodes.append({'name':player,'symbolSize':10})\n",
    "# 调整格式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81a6c43d-a387-49b6-acfd-73333d814783",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 绘制图形所需要的连线，即边，封装格式\n",
    "links=[]\n",
    "for index,row in df.iterrows():\n",
    "    links.append({'source':row['OriginPlayerID'], # 一个节点是传球员\n",
    "                 'target':row['DestinationPlayerID'], # 另一个节点是接球员\n",
    "                  'value':row['count'] # 传递次数为count\n",
    "                 })\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3519bec-3853-41b9-99a3-1d9e99e81177",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 绘图\n",
    "graph=(\n",
    "    Graph() # 初始化\n",
    "    .add(\n",
    "        '',\n",
    "        nodes,\n",
    "        links,\n",
    "        repulsion=5000,  # 设置图像的斥力因子，斥力因子数值越大，斥力越大，图表越分散\n",
    "        edge_label=opts.LabelOpts(is_show=True,position='middle',formatter='{c}'), # 在边缘展示数据\n",
    "        \n",
    "    )\n",
    "    .set_global_opts(opts.TitleOpts(title='传球网络图'))\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1fec144-0016-41a8-aad0-bfdf7f2626db",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph.render('传球网络图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "949cb3e5-266b-4021-a08f-45d7b4a1483f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87e973b1-787d-4da0-be9f-2a778f9d1bf6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcc27605-a900-4b4b-8c14-01ea59c9211d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 小提琴图\n",
    "# 显示数据分布与概率密度，图形中间相当于箱线图，黑色粗条为四分位范围，展示中位数，四分之一分位数，四分之三分位数，两侧曲线代表核密度图，图形越宽代表该位置数据数量越多"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c4bc725-2c41-4685-89d5-b6c22d19a722",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set(style='whitegrid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48ac17a9-d4ec-41bf-a383-dda4596c012a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('./datas/insurance.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98a849b9-be84-45f4-aab7-60c9053e849c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 全部保险费用数据分布\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.violinplot(x=df['charges'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adc226c2-3af2-4580-b667-f9f750f305de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 不同性别的保险费用分布图\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.violinplot(x='sex',y='charges',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d667572-3539-458e-b87e-45758d096fa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 是否抽烟对保险费用的分布影响\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.violinplot(x='smoker',y='charges',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df363450-ae28-4c35-8c4b-a50b6e092e37",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 孩子个数与保险费用关系\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.violinplot(x='children',y='charges',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "792ef388-81ad-4faf-bc09-e7e789141809",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 年龄与保险费用关系\n",
    "# 年龄进行分段\n",
    "df['age']=(df['age']/10).astype(int)\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.violinplot(x='age',y='charges',data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f656f13e-8237-4c3c-a32e-47f317c1de7a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b49cdac-db3c-4353-b988-1815c93b692c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31352d8e-c592-48b6-a268-d4bd813e3f6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  地图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab7bb23d-3cfc-463c-9e78-6c1b3135161e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "285b5836-c719-4e85-9fc3-3c396039b314",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 各城市地图\n",
    "# 城市人口数据\n",
    "# 名称一一对应\n",
    "province_population=[\n",
    "    ('广东省',11169),\n",
    "    ('山东省',10005.83),\n",
    "    ('河南省',9559.13),\n",
    "    ('四川省',8302),\n",
    "    ('江苏省',8029.3),\n",
    "    ('河北省',7519.52),\n",
    "    ('湖南省',6860.2),\n",
    "    ('安徽省',6254.8),\n",
    "    ('湖北省',5902),\n",
    "    ('浙江省',5657)\n",
    "\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7f97bcd-1f7c-4b92-b26e-51dfd2e27e42",
   "metadata": {},
   "outputs": [],
   "source": [
    "map=(\n",
    "    Map()\n",
    "    .add('各省人口数量',province_population,'china')\n",
    "    .set_global_opts(\n",
    "        title_opts=opts.TitleOpts(title='2019全国各省人口数量分布'),\n",
    "        visualmap_opts=opts.VisualMapOpts(max_=12000), # 数字展示\n",
    "    )\n",
    ")\n",
    "map.render('2019全国各省人口数量分布.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a472b44f-6182-43ad-8815-5f9536d179f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 各区地图\n",
    "# 2019年北京各区人口数量前五"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "678f1f1a-fd8b-4cdd-9b8f-a67297dd730f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2ca806c-f91b-44fc-a182-bde44932725d",
   "metadata": {},
   "outputs": [],
   "source": [
    "distinct_population=[\n",
    "    ['朝阳区',395.5],\n",
    "    ['海淀区',369.4],\n",
    "    ['丰台区',232.4],\n",
    "    ['昌平区',196.3],\n",
    "    ['大兴区',156.2],\n",
    "    ['通州区',137.8],\n",
    "    ['西城区',129.8]\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1f35b68-60d0-4fb4-9c92-03db28c67395",
   "metadata": {},
   "outputs": [],
   "source": [
    "map=(\n",
    "    Map()\n",
    "    .add('北京各区人口数量',distinct_population,'北京') # 还可以选择不同城市\n",
    "    .set_global_opts(\n",
    "        title_opts=opts.TitleOpts(title='2019北京各区人口数量分布'),\n",
    "        visualmap_opts=opts.VisualMapOpts(max_=400), # 数字展示\n",
    "    )\n",
    ")\n",
    "map.render('2019北京各区人口数量分布.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31fee0f2-7457-4d3d-a6c6-1c68f20dd2d7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c20a2e7b-b25c-4c6e-bdc3-9b02fb97c9ed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a0ecccc-a87b-4085-a446-f38405035cf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 雷达图——蜘蛛图，极地图，星图\n",
    "# 部门预算与实际开销"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3320a1bf-dd1d-4ba7-9eb8-2f8b0118fc5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Radar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1f900b5-9b1b-4716-b795-6f82ba3d2dd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 构造部门数据\n",
    "departments=['销售部','管理部','信息技术部','客服部','研发部','市场部']\n",
    "# 构造最大支出数\n",
    "max_cost=[6500,16000,30000,38000,52000,25000]\n",
    "# 预算分配\n",
    "budget=[4300,10000,28000,35000,50000,19000]\n",
    "# 实际支出\n",
    "actual_cost=[5000,14000,28000,31000,42000,21000]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e0bb21f-0177-48d4-9f0f-d15c2a17e8cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 雷达图\n",
    "# 设置雷达图的边缘最大值\n",
    "schema=[]\n",
    "for dep,max_c in zip(departments,max_cost):\n",
    "    schema.append(opts.RadarIndicatorItem(name=dep,max_=max_c)) # 雷达的每个角，名字是部门，最大值就是最大支出数\n",
    "schema"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe188579-a346-4aef-8b29-7c71a8659a70",
   "metadata": {},
   "outputs": [],
   "source": [
    "radar=(\n",
    "    Radar()\n",
    "    .add_schema(schema)\n",
    "    .add('预算分配',[budget],linestyle_opts=opts.LineStyleOpts(color='#FF0000')) # \n",
    "    .add('实际开销',[actual_cost],linestyle_opts=opts.LineStyleOpts(color='#0000FF'))\n",
    "    .set_series_opts(label_opts=opts.LabelOpts(is_show=False)) # 不展示标签\n",
    "    .set_global_opts(\n",
    "        # 如果需要只展示单个变量，如预算分配\n",
    "        # legend_opts=opts.LegendOpts(selected_mode='single')\n",
    "        title_opts=opts.TitleOpts(title='各部门预算与开支')\n",
    "    )\n",
    ")\n",
    "radar.render('预算与开支.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9705098-4a53-4943-8eba-88fc8b41554f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "723c6a00-eec3-4720-aad1-47534ac1edce",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "825b5d3c-b11b-4d69-96dc-cec5378b716d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 桑基图\n",
    "# 整体资源分为多个主体，多个主体下分为不同的受众主体，受众主体的特征之下又分配了一定的资源\n",
    "# 起始流量与结束流量相同，内部不同线条代表不同的流量分流，宽度即展示分支占有流量的比例"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdbc0770-924f-4ce1-bc95-6bd820b39cc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_csv('./datas/datas/KAG_conversion_data.csv')\n",
    "# 数据源：https://www.kaggle.com/loveall/clicks-conversion-tracking/data\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fcd68b0-8448-452d-b915-ca6547511087",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 构造桑基图数据集\n",
    "df['total']='全量' # 构造全量列\n",
    "df['xyz_campaign_id']=df['xyz_campaign_id'].map(lambda x:f'campaign_{x}') # 给活动加前缀\n",
    "df['gender']=df['gender'].map(lambda x:f'gender_{x}') # 性别加前缀\n",
    "df['age']=df['age'].map(lambda x:f'age_{x}') # 年龄前缀\n",
    "df\n",
    "# 给所需数据加前缀"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9543c30-5315-47ae-9487-6d541165f59b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 桑基图数据节点列表\n",
    "nodes=pd.concat([df['total'],df['xyz_campaign_id'],df['gender'],df['age']]).unique() # 将多列合在一起对各列中的元素去重获取数据的各个节点\n",
    "nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9da12ea1-5d73-42a1-a396-d352eb233716",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 桑基图数据——节点到达关系的列表\n",
    "# 此步骤为设定不同的资源划分墙\n",
    "type_list = ['total', 'xyz_campaign_id', 'gender', 'age'] # 一共有四个划分区块，四个资源渗透墙\n",
    "from_to_list = [] # 即每一个划分墙的组成，从一端到另一端的数据列表\n",
    "for idx in range(len(type_list) - 1): # 遍历每一个划分区块\n",
    "    from_type = type_list[idx] # 起始墙是遍历的前一个元素\n",
    "    to_type = type_list[idx + 1] # 结束墙是前一个元素加一\n",
    "    # 起始墙与结束墙是依次遍历的\n",
    "    df_agg = df.groupby([from_type, to_type]).size().reset_index() # 经过遍历之后，按照起始墙与结束墙进行分组聚合，例如全量到1178活动的人数值有多少， \n",
    "    df_agg.columns = ['from', 'to', 'value'] # 并且把df_agg的列名更改为起，始，值\n",
    "# df_agg 实为三列数据的列表\n",
    "    \n",
    "    for _,row in df_agg.iterrows(): # 遍历df_agg的每一列\n",
    "        from_to_list.append([row['from'],row['to'],row['value']]) # 按照列顺序添加每一行的数据\n",
    "from_to_list # 构造出每一墙数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c032c4c2-8f70-4b72-96d0-97679c6dbdf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 绘制桑基图\n",
    "# 转换节点列表为桑基图形式\n",
    "pyecharts_nodes=[{'name':node} for node in nodes]\n",
    "pyecharts_nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4472906e-b5dc-4ce8-94ed-a92ccc13de0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 转换跳转列表为桑基图形式\n",
    "pyecharts_links=[\n",
    "    {'source':source,'target':target,'value':value}\n",
    "    for source,target,value in from_to_list\n",
    "    \n",
    "]\n",
    "pyecharts_links"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "894e9db7-dc2c-4d47-b92f-56eed9a2828d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Sankey\n",
    "sankey=(\n",
    "    Sankey()\n",
    "    .add(\n",
    "        '',\n",
    "        pyecharts_nodes,\n",
    "        pyecharts_links,\n",
    "        linestyle_opt=opts.LineStyleOpts(opacity=0.2,curve=0.5,color='source'),\n",
    "        label_opts=opts.LabelOpts(position='right')\n",
    "    )\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='广告转化数据桑基图'))\n",
    ")\n",
    "sankey.render('广告转化数据桑基图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "921d3ad6-564e-49c0-91dd-6aa12205b5a1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e66ae6ee-7685-440c-b241-d04efb5a5adb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "465db4d1-f7c2-4a6c-a4de-e2ba690661b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 词云图\n",
    "# 展示射雕英雄传的高频词语图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70c2aebc-efd5-445a-aea0-870217d55d3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# python中文词库jieba  https://github.com/fxsjy/jieba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85e70122-9761-43d9-9c85-44925304b31b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import jieba\n",
    "import jieba.analyse\n",
    "import pandas as pd\n",
    "import pyecharts.options as opts\n",
    "from pyecharts.charts import WordCloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93171377-8a7f-415c-a65b-89b2e3d32d46",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将小说的文字分词\n",
    "fin=open('datas/datas/原始数据与资料/ant-learn-visualization/射雕英雄传.txt',encoding='utf8')\n",
    "txt=fin.read() # 读取全部文字内容\n",
    "# 使用TF,IDF提取关键词\n",
    "word_weights=jieba.analyse.extract_tags(txt,topK=1000,withWeight=True) # 抽取topK个词，抽取前1000个，withweight需要返回每个词的权重"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a31d021-6dd4-440d-9c6f-df18e9279c8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 查看分词结果\n",
    "word_weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "488b523e-5c6d-424e-94db-71c6b343c408",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 绘制词云图\n",
    "word_cloud=(\n",
    "    WordCloud()\n",
    "    .add(series_name='高频词语',data_pair=word_weights,word_size_range=[10,100])\n",
    "    .set_global_opts(\n",
    "        title_opts=opts.TitleOpts(\n",
    "            title='射雕英雄传---高频词汇图',\n",
    "            title_textstyle_opts=opts.TextStyleOpts(font_size=23),\n",
    "            pos_left='center' # 标题居中\n",
    "        )\n",
    "    )\n",
    ")\n",
    "word_cloud.render('射雕英雄传高频词汇.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01bf1cd0-c308-4e4f-9530-9caade33024b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce2858fa-c888-410e-8e85-2b91aa398b6a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a16bd06-b63b-43d3-89f5-5a10922d924d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 时间线轮播多图\n",
    "# 北京不同月份的天气展示"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cec6edf1-31c8-4c36-be30-cf159c62ca5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Pie,Bar,Timeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c22ee151-8bd5-4d93-b7c7-90527dd88159",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('datas/datas/beijing_tianqi/beijing_tianqi_2019.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0c044c7-73a2-4bb0-8f3b-1e2e319d741d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['month']=pd.to_datetime(df['ymd']).dt.month\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff5bd6a2-7338-4e13-a775-fc4a87fb07ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 统计每个月的每种天气的出现次数\n",
    "df_weather=df.groupby(['month','tianqi']).size().reset_index()  # 注意此用法：通过某种聚合方式如月份统计这种聚合方式下的个体出现次数\n",
    "df_weather.columns=['month','tianqi','count']\n",
    "df_weather"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4a13b28-dde6-434e-8fb1-19cdc37748a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 计算一月份出现的天气次数排名\n",
    "df_weather[df_weather['month']==1][['tianqi','count']].sort_values(by='count',ascending=False).values.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5196a6c1-7056-4855-841a-b0a7c16a23f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 按月变化的天气频率的饼图，动态饼子图\n",
    "# 下方时间轴\n",
    "timeline=Timeline()\n",
    "# 轮播的时间间隔(单位：ms)\n",
    "timeline.add_schema(play_interval=1000) # 1000毫秒即一秒钟\n",
    "# 遍历每个月的天气数据，画出每个月的饼图，添加到时间轴对象\n",
    "for month in df_weather['month'].unique():\n",
    "    # 取出这个月的天气与出现次数数据\n",
    "    data=(\n",
    "         df_weather[df_weather['month']==month][['tianqi','count']]\n",
    "        .sort_values(by='count',ascending=False)\n",
    "        .values.tolist()[:5] # 取前五个数据\n",
    "\n",
    "    )\n",
    "    pie=Pie().add('天气',data)\n",
    "    timeline.add(pie,f'{month}月')\n",
    "timeline.render('天气数据动态饼图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "504dcc3a-4e08-4312-8ee8-7f45dd438f9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "timeline=Timeline()\n",
    "timeline.add_schema(play_interval=1000)\n",
    "for month in df_weather['month'].unique():\n",
    "    data=(\n",
    "        df_weather[df_weather['month']==month][['tianqi','count']]\n",
    "        .sort_values(by='count',ascending=True)\n",
    "        .values.tolist()\n",
    "        \n",
    "    )\n",
    "    bar=(\n",
    "        Bar()\n",
    "        # x轴天气名称\n",
    "        .add_xaxis([x[0] for x in data])\n",
    "        # y轴天气出现次数\n",
    "        .add_yaxis('',[x[1] for x in data])\n",
    "        # 柱状图横放\n",
    "        .reversal_axis()\n",
    "        .set_series_opts(label_opts=opts.LabelOpts(position='right'))\n",
    "        .set_global_opts(title_opts=opts.TitleOpts(title='北京各月份天气动态图'))\n",
    "    )\n",
    "    timeline.add(bar,f'{month}月')\n",
    "timeline.render('北京每月天气动态变化柱状图.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6a47633-9f39-4606-84ae-f688b5c1a683",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc09fb72-d7e5-4782-8666-43afbb21bac7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e051fed8-5a2a-4281-bf25-27bef57b6f81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 树状图（类似桑基图）\n",
    "# 广告流量分配"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3163816f-f7ee-4bb6-8bf9-2feaffdc4b79",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "from pyecharts import options as opts\n",
    "from pyecharts.charts import Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3048f3d9-ce19-4aa4-b843-f2300941edba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ad_id</th>\n",
       "      <th>xyz_campaign_id</th>\n",
       "      <th>fb_campaign_id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>interest</th>\n",
       "      <th>Impressions</th>\n",
       "      <th>Clicks</th>\n",
       "      <th>Spent</th>\n",
       "      <th>Total_Conversion</th>\n",
       "      <th>Approved_Conversion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>708746</td>\n",
       "      <td>916</td>\n",
       "      <td>103916</td>\n",
       "      <td>30-34</td>\n",
       "      <td>M</td>\n",
       "      <td>15</td>\n",
       "      <td>7350</td>\n",
       "      <td>1</td>\n",
       "      <td>1.430000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>708749</td>\n",
       "      <td>916</td>\n",
       "      <td>103917</td>\n",
       "      <td>30-34</td>\n",
       "      <td>M</td>\n",
       "      <td>16</td>\n",
       "      <td>17861</td>\n",
       "      <td>2</td>\n",
       "      <td>1.820000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>708771</td>\n",
       "      <td>916</td>\n",
       "      <td>103920</td>\n",
       "      <td>30-34</td>\n",
       "      <td>M</td>\n",
       "      <td>20</td>\n",
       "      <td>693</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>708815</td>\n",
       "      <td>916</td>\n",
       "      <td>103928</td>\n",
       "      <td>30-34</td>\n",
       "      <td>M</td>\n",
       "      <td>28</td>\n",
       "      <td>4259</td>\n",
       "      <td>1</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>708818</td>\n",
       "      <td>916</td>\n",
       "      <td>103928</td>\n",
       "      <td>30-34</td>\n",
       "      <td>M</td>\n",
       "      <td>28</td>\n",
       "      <td>4133</td>\n",
       "      <td>1</td>\n",
       "      <td>1.290000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1138</th>\n",
       "      <td>1314410</td>\n",
       "      <td>1178</td>\n",
       "      <td>179977</td>\n",
       "      <td>45-49</td>\n",
       "      <td>F</td>\n",
       "      <td>109</td>\n",
       "      <td>1129773</td>\n",
       "      <td>252</td>\n",
       "      <td>358.189997</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1139</th>\n",
       "      <td>1314411</td>\n",
       "      <td>1178</td>\n",
       "      <td>179978</td>\n",
       "      <td>45-49</td>\n",
       "      <td>F</td>\n",
       "      <td>110</td>\n",
       "      <td>637549</td>\n",
       "      <td>120</td>\n",
       "      <td>173.880003</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1140</th>\n",
       "      <td>1314412</td>\n",
       "      <td>1178</td>\n",
       "      <td>179979</td>\n",
       "      <td>45-49</td>\n",
       "      <td>F</td>\n",
       "      <td>111</td>\n",
       "      <td>151531</td>\n",
       "      <td>28</td>\n",
       "      <td>40.289999</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1141</th>\n",
       "      <td>1314414</td>\n",
       "      <td>1178</td>\n",
       "      <td>179981</td>\n",
       "      <td>45-49</td>\n",
       "      <td>F</td>\n",
       "      <td>113</td>\n",
       "      <td>790253</td>\n",
       "      <td>135</td>\n",
       "      <td>198.710001</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1142</th>\n",
       "      <td>1314415</td>\n",
       "      <td>1178</td>\n",
       "      <td>179982</td>\n",
       "      <td>45-49</td>\n",
       "      <td>F</td>\n",
       "      <td>114</td>\n",
       "      <td>513161</td>\n",
       "      <td>114</td>\n",
       "      <td>165.609999</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1143 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ad_id  xyz_campaign_id  fb_campaign_id    age gender  interest  \\\n",
       "0      708746              916          103916  30-34      M        15   \n",
       "1      708749              916          103917  30-34      M        16   \n",
       "2      708771              916          103920  30-34      M        20   \n",
       "3      708815              916          103928  30-34      M        28   \n",
       "4      708818              916          103928  30-34      M        28   \n",
       "...       ...              ...             ...    ...    ...       ...   \n",
       "1138  1314410             1178          179977  45-49      F       109   \n",
       "1139  1314411             1178          179978  45-49      F       110   \n",
       "1140  1314412             1178          179979  45-49      F       111   \n",
       "1141  1314414             1178          179981  45-49      F       113   \n",
       "1142  1314415             1178          179982  45-49      F       114   \n",
       "\n",
       "      Impressions  Clicks       Spent  Total_Conversion  Approved_Conversion  \n",
       "0            7350       1    1.430000                 2                    1  \n",
       "1           17861       2    1.820000                 2                    0  \n",
       "2             693       0    0.000000                 1                    0  \n",
       "3            4259       1    1.250000                 1                    0  \n",
       "4            4133       1    1.290000                 1                    1  \n",
       "...           ...     ...         ...               ...                  ...  \n",
       "1138      1129773     252  358.189997                13                    2  \n",
       "1139       637549     120  173.880003                 3                    0  \n",
       "1140       151531      28   40.289999                 2                    0  \n",
       "1141       790253     135  198.710001                 8                    2  \n",
       "1142       513161     114  165.609999                 5                    2  \n",
       "\n",
       "[1143 rows x 11 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv('datas/datas/KAG_conversion_data.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "89b4cbc1-d334-4196-bda6-cf7eb347c353",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ad_id</th>\n",
       "      <th>xyz_campaign_id</th>\n",
       "      <th>fb_campaign_id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>interest</th>\n",
       "      <th>Impressions</th>\n",
       "      <th>Clicks</th>\n",
       "      <th>Spent</th>\n",
       "      <th>Total_Conversion</th>\n",
       "      <th>Approved_Conversion</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>708746</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>103916</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>15</td>\n",
       "      <td>7350</td>\n",
       "      <td>1</td>\n",
       "      <td>1.430000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>708749</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>103917</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>16</td>\n",
       "      <td>17861</td>\n",
       "      <td>2</td>\n",
       "      <td>1.820000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>708771</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>103920</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>20</td>\n",
       "      <td>693</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>708815</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>103928</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>28</td>\n",
       "      <td>4259</td>\n",
       "      <td>1</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>708818</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>103928</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>28</td>\n",
       "      <td>4133</td>\n",
       "      <td>1</td>\n",
       "      <td>1.290000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1138</th>\n",
       "      <td>1314410</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>179977</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>109</td>\n",
       "      <td>1129773</td>\n",
       "      <td>252</td>\n",
       "      <td>358.189997</td>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1139</th>\n",
       "      <td>1314411</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>179978</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>110</td>\n",
       "      <td>637549</td>\n",
       "      <td>120</td>\n",
       "      <td>173.880003</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1140</th>\n",
       "      <td>1314412</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>179979</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>111</td>\n",
       "      <td>151531</td>\n",
       "      <td>28</td>\n",
       "      <td>40.289999</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1141</th>\n",
       "      <td>1314414</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>179981</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>113</td>\n",
       "      <td>790253</td>\n",
       "      <td>135</td>\n",
       "      <td>198.710001</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1142</th>\n",
       "      <td>1314415</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>179982</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>114</td>\n",
       "      <td>513161</td>\n",
       "      <td>114</td>\n",
       "      <td>165.609999</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>全量</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1143 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ad_id xyz_campaign_id  fb_campaign_id        age    gender  interest  \\\n",
       "0      708746    campaign_916          103916  age_30-34  gender_M        15   \n",
       "1      708749    campaign_916          103917  age_30-34  gender_M        16   \n",
       "2      708771    campaign_916          103920  age_30-34  gender_M        20   \n",
       "3      708815    campaign_916          103928  age_30-34  gender_M        28   \n",
       "4      708818    campaign_916          103928  age_30-34  gender_M        28   \n",
       "...       ...             ...             ...        ...       ...       ...   \n",
       "1138  1314410   campaign_1178          179977  age_45-49  gender_F       109   \n",
       "1139  1314411   campaign_1178          179978  age_45-49  gender_F       110   \n",
       "1140  1314412   campaign_1178          179979  age_45-49  gender_F       111   \n",
       "1141  1314414   campaign_1178          179981  age_45-49  gender_F       113   \n",
       "1142  1314415   campaign_1178          179982  age_45-49  gender_F       114   \n",
       "\n",
       "      Impressions  Clicks       Spent  Total_Conversion  Approved_Conversion  \\\n",
       "0            7350       1    1.430000                 2                    1   \n",
       "1           17861       2    1.820000                 2                    0   \n",
       "2             693       0    0.000000                 1                    0   \n",
       "3            4259       1    1.250000                 1                    0   \n",
       "4            4133       1    1.290000                 1                    1   \n",
       "...           ...     ...         ...               ...                  ...   \n",
       "1138      1129773     252  358.189997                13                    2   \n",
       "1139       637549     120  173.880003                 3                    0   \n",
       "1140       151531      28   40.289999                 2                    0   \n",
       "1141       790253     135  198.710001                 8                    2   \n",
       "1142       513161     114  165.609999                 5                    2   \n",
       "\n",
       "     total  \n",
       "0       全量  \n",
       "1       全量  \n",
       "2       全量  \n",
       "3       全量  \n",
       "4       全量  \n",
       "...    ...  \n",
       "1138    全量  \n",
       "1139    全量  \n",
       "1140    全量  \n",
       "1141    全量  \n",
       "1142    全量  \n",
       "\n",
       "[1143 rows x 12 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['total']='全量'\n",
    "df['xyz_campaign_id']=df['xyz_campaign_id'].map(lambda x:f'campaign_{x}')\n",
    "df['gender']=df['gender'].map(lambda x:f'gender_{x}')\n",
    "df['age']=df['age'].map(lambda x:f'age_{x}')\n",
    "df\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1f00ee14-d45d-47c9-b4c2-a73de2fd43ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total</th>\n",
       "      <th>xyz_campaign_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_35-39</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_40-44</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_35-39</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_40-44</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_1178</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_35-39</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_40-44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_35-39</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_40-44</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_916</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_35-39</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_40-44</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_F</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_30-34</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_35-39</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_40-44</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>全量</td>\n",
       "      <td>campaign_936</td>\n",
       "      <td>gender_M</td>\n",
       "      <td>age_45-49</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total xyz_campaign_id    gender        age  size\n",
       "0     全量   campaign_1178  gender_F  age_30-34    89\n",
       "1     全量   campaign_1178  gender_F  age_35-39    57\n",
       "2     全量   campaign_1178  gender_F  age_40-44    60\n",
       "3     全量   campaign_1178  gender_F  age_45-49    70\n",
       "4     全量   campaign_1178  gender_M  age_30-34   112\n",
       "5     全量   campaign_1178  gender_M  age_35-39    90\n",
       "6     全量   campaign_1178  gender_M  age_40-44    69\n",
       "7     全量   campaign_1178  gender_M  age_45-49    78\n",
       "8     全量    campaign_916  gender_F  age_30-34    11\n",
       "9     全量    campaign_916  gender_F  age_35-39     3\n",
       "10    全量    campaign_916  gender_F  age_40-44     1\n",
       "11    全量    campaign_916  gender_F  age_45-49     4\n",
       "12    全量    campaign_916  gender_M  age_30-34    18\n",
       "13    全量    campaign_916  gender_M  age_35-39     9\n",
       "14    全量    campaign_916  gender_M  age_40-44     5\n",
       "15    全量    campaign_916  gender_M  age_45-49     3\n",
       "16    全量    campaign_936  gender_F  age_30-34    97\n",
       "17    全量    campaign_936  gender_F  age_35-39    49\n",
       "18    全量    campaign_936  gender_F  age_40-44    46\n",
       "19    全量    campaign_936  gender_F  age_45-49    64\n",
       "20    全量    campaign_936  gender_M  age_30-34    99\n",
       "21    全量    campaign_936  gender_M  age_35-39    40\n",
       "22    全量    campaign_936  gender_M  age_40-44    29\n",
       "23    全量    campaign_936  gender_M  age_45-49    40"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data=df.groupby(['total','xyz_campaign_id','gender','age']).size().rename('size').reset_index()\n",
    "df_data\n",
    "# 注意此处分组聚合即为每一个门类对应下的层层分类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "936c578b-6cba-445b-b757-fd5677a17a9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"name\": \"全量\",\n",
      "    \"children\": [\n",
      "        {\n",
      "            \"name\": \"campaign_1178\",\n",
      "            \"children\": [\n",
      "                {\n",
      "                    \"name\": \"gender_F\",\n",
      "                    \"children\": [\n",
      "                        {\n",
      "                            \"name\": \"age_30-34\",\n",
      "                            \"value\": 89\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_35-39\",\n",
      "                            \"value\": 57\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_40-44\",\n",
      "                            \"value\": 60\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_45-49\",\n",
      "                            \"value\": 70\n",
      "                        }\n",
      "                    ]\n",
      "                },\n",
      "                {\n",
      "                    \"name\": \"gender_M\",\n",
      "                    \"children\": [\n",
      "                        {\n",
      "                            \"name\": \"age_30-34\",\n",
      "                            \"value\": 112\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_35-39\",\n",
      "                            \"value\": 90\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_40-44\",\n",
      "                            \"value\": 69\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_45-49\",\n",
      "                            \"value\": 78\n",
      "                        }\n",
      "                    ]\n",
      "                }\n",
      "            ]\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"campaign_916\",\n",
      "            \"children\": [\n",
      "                {\n",
      "                    \"name\": \"gender_F\",\n",
      "                    \"children\": [\n",
      "                        {\n",
      "                            \"name\": \"age_30-34\",\n",
      "                            \"value\": 11\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_35-39\",\n",
      "                            \"value\": 3\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_40-44\",\n",
      "                            \"value\": 1\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_45-49\",\n",
      "                            \"value\": 4\n",
      "                        }\n",
      "                    ]\n",
      "                },\n",
      "                {\n",
      "                    \"name\": \"gender_M\",\n",
      "                    \"children\": [\n",
      "                        {\n",
      "                            \"name\": \"age_30-34\",\n",
      "                            \"value\": 18\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_35-39\",\n",
      "                            \"value\": 9\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_40-44\",\n",
      "                            \"value\": 5\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_45-49\",\n",
      "                            \"value\": 3\n",
      "                        }\n",
      "                    ]\n",
      "                }\n",
      "            ]\n",
      "        },\n",
      "        {\n",
      "            \"name\": \"campaign_936\",\n",
      "            \"children\": [\n",
      "                {\n",
      "                    \"name\": \"gender_F\",\n",
      "                    \"children\": [\n",
      "                        {\n",
      "                            \"name\": \"age_30-34\",\n",
      "                            \"value\": 97\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_35-39\",\n",
      "                            \"value\": 49\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_40-44\",\n",
      "                            \"value\": 46\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_45-49\",\n",
      "                            \"value\": 64\n",
      "                        }\n",
      "                    ]\n",
      "                },\n",
      "                {\n",
      "                    \"name\": \"gender_M\",\n",
      "                    \"children\": [\n",
      "                        {\n",
      "                            \"name\": \"age_30-34\",\n",
      "                            \"value\": 99\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_35-39\",\n",
      "                            \"value\": 40\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_40-44\",\n",
      "                            \"value\": 29\n",
      "                        },\n",
      "                        {\n",
      "                            \"name\": \"age_45-49\",\n",
      "                            \"value\": 40\n",
      "                        }\n",
      "                    ]\n",
      "                }\n",
      "            ]\n",
      "        }\n",
      "    ]\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# 数据的准备形式\n",
    "\n",
    "\n",
    "data={}\n",
    "data['name']='全量'\n",
    "data['children']=[]\n",
    "\n",
    "\n",
    "# 遍历活动\n",
    "for campaign in df_data['xyz_campaign_id'].unique():\n",
    "    campaign_node={}\n",
    "    campaign_node['name']=campaign\n",
    "    campaign_node['children']=[]\n",
    "    # 首先为空，方便遍历所有数据之后的添加\n",
    "    \n",
    "    for gender in df_data[df_data['xyz_campaign_id']==campaign]['gender'].unique(): # 对应活动下的遍历再取性别\n",
    "        # 同样的数据形式\n",
    "        gender_node={}\n",
    "        gender_node['name']=gender\n",
    "        gender_node['children']=[]\n",
    "        \n",
    "        # 在活动与性别的双层嵌套下取不同年龄段的人数\n",
    "        age_list=(\n",
    "            df_data[\n",
    "            (df_data['xyz_campaign_id']==campaign)&(df_data['gender']==gender)][['age','size']]\n",
    "            \n",
    "        )\n",
    "        # 将年龄与人数遍历成图所需数据类型\n",
    "        for age,size in age_list.values:\n",
    "            # 再次使用数据形式进行格式化\n",
    "            age_node={}\n",
    "            age_node['name']=age\n",
    "            # 不同年龄段最终对应着不同的人数\n",
    "            age_node['value']=size\n",
    "            # 最后一层设置完了之后，再向上推，将最后一层的孩子不断向祖辈推\n",
    "            gender_node['children'].append(age_node)\n",
    "        campaign_node['children'].append(gender_node)\n",
    "    data['children'].append(campaign_node)\n",
    "\n",
    "# 有格式的json\n",
    "print(json.dumps(data, ensure_ascii=False, indent=4))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c9d49e1b-c838-4e7f-b53a-bce3abda5ac2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Python312\\\\ant-learn-pandas-master\\\\ant-learn-pandas-master\\\\广告流量图.html'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 作图\n",
    "tree=(\n",
    "    Tree()\n",
    "    .add(\n",
    "        '',\n",
    "        [data],\n",
    "        # orient='LR/RL/TB/BT'\n",
    "        layout='radial', # 圆环发散状\n",
    "        label_opts=opts.LabelOpts( # 标签\n",
    "            position='top', # 置顶\n",
    "            horizontal_align='right', # 靠右\n",
    "            vertical_align='middle' # 居中显示\n",
    "        ),\n",
    "        \n",
    "    )\n",
    "    .set_global_opts(title_opts=opts.TitleOpts(title='广告流量图',pos_left='center'))\n",
    ")\n",
    "tree.render('广告流量图.html')\n",
    "# 树状图调整\n",
    "# layout默认上下左右平行图，当加上参数 orient='TB'即top bottom上下图，LR左右图，RL右左图，BT下上图\n",
    "# layout:orthogonal,radial 第一个为默认方向图，可以调整上下左右，第二个为圆环发散图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5850b59-83f1-4e6b-a92b-ddba5aac3721",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f5ebe7b-0700-4731-a4d1-4d0c1b010d67",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d842872-a26a-4b86-9c99-7baaaf515bf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 网页展示图表\n",
    "# 见pycharm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb8a1d11-08e7-48cc-b4de-e76c5b1f1cde",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33bfff3b-d3e9-4bea-97a4-97bdbeb9f697",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a70bd96a-9afa-43de-9c19-52b773e8b996",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54130751-e0da-4b89-bc25-52486a2c181f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a99b826b-ecb1-4303-9b8b-8ddbc70ddeb8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fa87d59-80ff-4fb9-8eb7-d4ae89e8dde0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01374a42-1afa-4bb5-a9b9-5f9ed2adb7a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb521e12-4426-4f37-a0c6-68a123b8665f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ea23c5b-b0ee-47cb-ba06-a737718ffd53",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b88d83e6-ef27-46fa-821d-689af2f8b967",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f7f15cd-eb19-4974-b3bd-d8f9d757a016",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9939beb9-9a78-4d3e-b5a2-bab77fddd35a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
