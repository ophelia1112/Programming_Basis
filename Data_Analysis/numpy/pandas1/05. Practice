{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a36a285-77d3-4bf9-bdbd-d0bebbf77cd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实战二\n",
    "# 包含知识点：explode一行变多行，读取网页并存储，同比环比计算，数据库，分组聚合队列数据进行统计或者合并，读取文件网页展示（可更改信息共享系统）\n",
    "# 读取数据存入数据库，批量翻译英语词典，excel多列到多行转换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11301600-1b2c-413f-8227-4c55e500d709",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点一、pandas使用explode实现一行变多行\n",
    "# excel表格里面包含多分类字段，需要将此行变为多行实现分类统计\n",
    "# 解决实际问题：一个字段包含多个值，将这个值拆分成多行，实现统计，比如一个电影有多个分类，一个人有多个喜好，按照分类，喜好做统计"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bd6e921-5e47-4dc5-9d18-f9585f80a13e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_csv(\n",
    "    './datas/movielens-1m/movies.dat',\n",
    "    header=None,\n",
    "    names='MovieID::Title::Genres'.split('::'),\n",
    "    sep='::',\n",
    "    engine='python'\n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "956d2d7b-937e-474d-833d-061e7e7e26ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 统计每个题材下有多少部电影，但是有的电影有多个题材，就需要将题材分成多行，再按照题材统计\n",
    "# 思路：将genres按照分隔符进行拆分，变为多行（一个电影会重复多次，但是是不同题材），统计每个题材下的电影个数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4c10ed9-33f7-49e6-adfa-948f79c73c21",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将genres字段拆分成列表\n",
    "df.info()\n",
    "# 当前的genres是字符串类型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4f37647-192f-48b4-a2aa-bb324f255442",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 转换字符串为列表，新增一列\n",
    "df['Genre']=df['Genres'].map(lambda x:x.split('|'))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e6904f0-75b0-4209-b94f-3199c46c75b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()\n",
    "# 新生变量genre为元素都是列表，综合来看还是字符串，但是元素可以是列表，元组，字典等"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a51a9fb-7307-4720-a1f3-3836c2488a38",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 使用explode将一行拆分成多行\n",
    "# 语法：pandas.DataFrame.explode(column)\n",
    "# 将dataframe的一个list_like的元素进行复制，index索引也会随之复制"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a398af5b-9984-413e-9788-a77150c5cbf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new=df.explode('Genre')\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffb925ad-3ac2-41b9-8d6f-d27598fa4c51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 实现拆分后题材的统计"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcf9b897-1dec-458f-8d9a-908aca0bd98e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "df_new['Genre'].value_counts().plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba5a14d9-b520-4654-9e02-a69cf0d9c3c6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e3550e0-76d4-4f0d-a7b6-aeb6dc1994b5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f287ba64-bc42-4448-a6bf-1522eb399bb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点二、Pandas借助Python爬虫读取HTML网页表格存储到Excel文件\n",
    "# 不运行代码因网站迁移而无法运行，后期利用爬虫改善\n",
    "'''\n",
    "import requests\n",
    "import requests.cookies\n",
    "import json\n",
    "import time\n",
    "import pandas as pd\n",
    "'''\n",
    "# 登录网易有道词典的PC版，微信扫码登录，复制cookies到文件，PC版地址：http://dict.youdao.com/，Chrome插件可以复制Cookies为Json格式：http://www.editthiscookie.com/\n",
    "'''\n",
    "cookie_jar = requests.cookies.RequestsCookieJar()\n",
    "\n",
    "with open(\"./course_datas/c32_read_html/cookie.txt\") as fin:\n",
    "    cookiejson = json.loads(fin.read())\n",
    "    for cookie in cookiejson:\n",
    "        cookie_jar.set(\n",
    "            name=cookie[\"name\"],\n",
    "            value=cookie[\"value\"],\n",
    "            domain=cookie[\"domain\"],\n",
    "            path=cookie[\"path\"]\n",
    "        )\n",
    "cookie_jar\n",
    "'''\n",
    "#  将html都下载下来存入列表\n",
    "'''\n",
    "htmls = []\n",
    "url = \"http://dict.youdao.com/wordbook/wordlist?p={idx}&tags=\"\n",
    "for idx in range(6):\n",
    "    time.sleep(1) # 防止被禁\n",
    "    print(\"**爬数据：第%d页\" % idx)\n",
    "    r = requests.get(url.format(idx=idx), cookies=cookie_jar)\n",
    "    htmls.append(r.text)\n",
    "htmls[0]\n",
    "'''\n",
    "# 使用Pandas解析网页中的表格\n",
    "'''\n",
    "df = pd.read_html(htmls[0]) # 单个页面字符串解析\n",
    "print(len(df))  # 看列表长度\n",
    "print(type(df))\n",
    "df[0].head(3) # 表头\n",
    "df[1].head(3) # 数据\n",
    "df_cont = df[1] # 合并表头\n",
    "df_cont.columns = df[0].columns\n",
    "df_cont.head(3)\n",
    "'''\n",
    "# 收集6个网页的表格，对六个页面分别进行解析\n",
    "'''\n",
    "df_list = [] # 空列表初始化列表\n",
    "for html in htmls:\n",
    "    df = pd.read_html(html)\n",
    "    # 更新表头\n",
    "    df_cont = df[1]\n",
    "    df_cont.columns = df[0].columns\n",
    "    df_list.append(df_cont) # 此时初始化列表内有六个df\n",
    "'''\n",
    "# 合并多个表格\n",
    "'''\n",
    "df_all=pd.concat(df_list)\n",
    "df_all.head(3)\n",
    "df_all.shape\n",
    "'''\n",
    "# 取需要的列输出到excel\n",
    "# df_all[[\"单词\", \"音标\", \"解释\"]].to_excel(\"./course_datas/c32_read_html/网易有道单词本列表.xlsx\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e59d5a1-c8ad-44be-bef0-2078ae414bdd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6755cad-9c36-4df6-8f2b-144affde0011",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c9fcf04-4f0d-4d6f-9adc-d75cc488f655",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点三、pandas计算同比环比\n",
    "# 同比与环比用于描述统计数据的变化情况\n",
    "# 环比：表示本次统计段与相连的上次统计段之间的比较，例如中国2010年第一个季度GDP为G2010Q1亿元，第二季度GDP为G2010Q2亿元，则第二季度GDP环比增长（G2010Q2-G2010Q1）/G2010Q1\n",
    "# 同比：同期相比，某个特定统计段今年与去年的比较，例如2009年中国第一个季度的GDP为G2009Q1亿元，则2010年第一个季度GDP同比增长为（G2010Q1-G2009Q1）/G2009Q1\n",
    "# 计算方法：pandas.Series.pct_change;pandas.Series.shift;pandas.Series.diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3f502f8-43c7-4db8-bd4b-a4d3105a39c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "df=pd.read_csv('./datas/beijing_tianqi/beijing_tianqi_2017-2019.csv',index_col='ymd',parse_dates=True) # 年月日变为索引，同时转换为日期列\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba246a27-34fc-4548-909e-66f28d60960d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 替换温度后缀\n",
    "df['bWendu']=df['bWendu'].astype('str').str.replace('℃','').astype('int32')\n",
    "df['yWendu']=df['yWendu'].astype('str').str.replace('℃','').astype('int32')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7943a285-13d7-4a63-bc47-1d3f5d7b2f27",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 定义新的df为每个月的平均最高温"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30e593ee-b8f4-4283-b2d7-be14a0e0b2cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df[['bWendu']].resample('M').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bb08e01-3565-4818-b7e4-dc6fd5002821",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 索引按照日期升序排列，排列后的数据处理更有效率\n",
    "df.sort_index(ascending=True,inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51baa825-e33d-41c9-a23a-1bce3a95160e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7aa94f58-839e-4635-893e-1ac4bed18078",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7e2ccce-bf35-4ad6-b9dd-e16956550118",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法一、pandas.Series.pct_change（可以直接利用，已经算好了）\n",
    "# 官方 https://pandas.pydata.org/pandas-docs/stable/reference/pandas.Series.pct_change.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60a3881a-2401-41de-a053-4477f1da1e35",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['bWendu1_huanbi']=df['bWendu'].pct_change(periods=1)\n",
    "df['bWendu1_tongbi']=df['bWendu'].pct_change(periods=12)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc61dcac-4632-4e5e-ba8e-e185957db888",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法二、pandas.Series.shift移动数据进行相减\n",
    "# shift用于移动数据，索引不变\n",
    "# 官方https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.shift.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6fe8ede-1962-485a-ac33-c40e4935bc25",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 合并多个series为一个dataframe,按照列合并\n",
    "pd.concat(\n",
    "    [df['bWendu'],\n",
    "    df['bWendu'].shift(periods=1),\n",
    "    df['bWendu'].shift(periods=12)],\n",
    "    axis=1\n",
    ")\n",
    "# 第二列数据将第一列数据向下移动一个单位，第三列是将第一列数据向下移动12个单位，主要是对其索引方便进行做差处理，数据变为同一行，直接在行上处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f68795d1-a43c-493f-ab10-ab4c45012bb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 数据移动到同一行，直接做差除处理\n",
    "# 环比\n",
    "series_shift1=df['bWendu'].shift(periods=1)\n",
    "df['bWendu2_huanbi']=(df['bWendu']-series_shift1)/series_shift1\n",
    "# 同比\n",
    "series_shift2=df['bWendu'].shift(periods=12)\n",
    "df['bWendu2_tongbi']=(df['bWendu']-series_shift2)/series_shift2\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebd32dd8-bd45-49ad-bb34-f46ad1b5bca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法3、pandas.Series.diff  新值减去旧值\n",
    "# 官方 https://pandas.pydata.org/pandas-docs/stable/reference/api/pamdas.Series.diff.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01eea41a-a1cd-49cb-8ee0-44139952b110",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.concat(\n",
    "    [df['bWendu'],\n",
    "    df['bWendu'].diff(periods=1),\n",
    "    df['bWendu'].diff(periods=12)],\n",
    "    axis=1\n",
    ")\n",
    "# 第二列的值就等于同行的第一列的值减去前面的值，相当于分子已经被算好，同年同理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8073e426-280d-46bb-ab63-28d6d38e5565",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 计算时用差值除以同行原始第一列的前一行数据，但是前一行数据错位，所以直接用diff处理出来的分子除以（本行的第一列的数据减去本行的第二列数据得出的是第一列的前一行数据）\n",
    "# 环比\n",
    "series_diff1=df['bWendu'].diff(periods=1)\n",
    "df['bWendu3_huanbi']=series_diff1/(df['bWendu']-series_diff1)\n",
    "# 同比\n",
    "series_diff2=df['bWendu'].diff(periods=12)\n",
    "df['bWendu3_tongbi']=series_diff2/(df['bWendu']-series_diff2)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "920881a0-08aa-4191-ba73-41d8468851d1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1ebf254-63a2-4498-bbf7-73b3f11f7ec0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a06b8c64-edd5-4e33-b156-c9e9abdd4f1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点四、pandas与SQL对比\n",
    "# 对比：SELECT数据查询；WHERE按照条件查询；in，not in条件查询；groupby分组统计；JOIN数据关联；UNION数据合并；Order Limit先排序后分页；取每个分组group的top n；UPDATE数据更新；DELETE删除数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65069374-e15a-4dad-9068-5a6aebf9ee26",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df=pd.read_csv('./datas/titanic/titanic_train.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46f7a5e2-eb54-42d8-8a47-0b0221f3eee6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SELECT数据查询比较（查询一样）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4ba2038-e496-4940-bd6c-b36bcdb8f8b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SQL\n",
    "sql='''\n",
    "    SELECT PassengerId,Sex,Age,Survived\n",
    "    FROM titanic\n",
    "    LIMIT 5;\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2a5a46a-3b6c-4c98-81cb-3042a72c5324",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pandas\n",
    "df[['PassengerId','Sex','Age','Survived']].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c6173d6-7746-45e5-aff4-b4f98f073c43",
   "metadata": {},
   "outputs": [],
   "source": [
    "# WHERE按照条件查询\n",
    "# SQL\n",
    "sql='''\n",
    "    SELECT *\n",
    "    FROM titanic\n",
    "    where Sex='male' and Age >=20.0 and Age <=40.0\n",
    "    LIMIT 5;\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "608a4892-ecb8-457a-9b8c-a1a0501003e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pandas括号联立多个条件\n",
    "condition=(df['Sex']=='male')&(df['Age']>=20)&(df['Age']<=40)\n",
    "df[condition].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fab22bd4-748d-4672-a4ed-96cb615f988f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# in,not in查询\n",
    "df['Pclass'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3efe897-cc96-4fc5-aeb5-f9d32c4c8f01",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SQL\n",
    "sql='''\n",
    "    SELECT *\n",
    "    FROM titanic\n",
    "    where Pclass in (1,2)\n",
    "    LIMIT5;\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16a5b89a-0608-421f-8d28-befc881ce8a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# in\n",
    "df[df['Pclass'].isin((1,2))].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c73813b2-accf-4f45-b928-b22fa88fe213",
   "metadata": {},
   "outputs": [],
   "source": [
    "# not in \n",
    "df[~df['Pclass'].isin((1,2))].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4593176-03ed-45c7-8dfa-6931b6b8fc1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# groupby分组统计"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44a26f51-c737-4aee-94fa-a4d01b44c29f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 单个列的聚合\n",
    "# SQL\n",
    "sql='''\n",
    "    SELECT\n",
    "        --分性别的存活人数\n",
    "        sum(Survived),\n",
    "        --分性别的平均年龄\n",
    "        mean(Age)\n",
    "        --分性别的平均票价\n",
    "        mean(Fare)\n",
    "        FROM titanic\n",
    "        group by Sex\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39470b9b-7eaf-4912-8bd4-04bccf8ba550",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.groupby('Sex').agg({'Survived':np.sum,'Age':np.mean,'Fare':np.mean})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a312155a-a22c-42cc-9119-65c92429396f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 多个列的聚合\n",
    "# SQL\n",
    "sql='''\n",
    "    SELECT\n",
    "        --按照不同存活和性别分组的平均年龄\n",
    "        mean(Age)\n",
    "        --按照不同存活和性别分组的平均票价\n",
    "        mean(Fare)\n",
    "        FROM titanic\n",
    "        group by Survived,Sex\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a64dcc7-7e45-43b8-8f1f-db6503180d3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.groupby(['Survived','Sex']).agg({'Age':np.mean,'Fare':np.mean})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17f0d98d-f8e0-46c0-8123-7db7c54910e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# JOIN数据关联"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dec3032b-a350-409b-a495-b1100c7874c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 电影评分数据集，评分表\n",
    "df_rating=pd.read_csv('./datas/ml-latest-small/ratings.csv')\n",
    "df_rating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d758117-808e-44e0-9fbd-81fa15cb1c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 电影评分数据集，电影信息表\n",
    "df_movies=pd.read_csv('./datas/ml-latest-small/movies.csv')\n",
    "df_movies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83385614-3c3a-4268-944a-ffd471ca09ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SQL\n",
    "sql='''\n",
    "    SELECT *\n",
    "    FROM\n",
    "        rating join movies\n",
    "        on(rating.movieId=movies.movieId)\n",
    "    limit 5\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c5fcd6f-3864-4e93-afbf-93589ecba837",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_merge=pd.merge(left=df_rating,right=df_movies,on='movieId')\n",
    "df_merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbfdf53a-09d8-4001-943a-2dd911056220",
   "metadata": {},
   "outputs": [],
   "source": [
    "# UNION数据合并"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0759834-11e4-4646-beaa-a20fa6c9e282",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1=pd.DataFrame({'city':['Chicago','San Francisco','New York City'],\n",
    "                 'rank':range(1,4)})\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d146e352-bd55-4d5c-8e42-d6295719ad5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=pd.DataFrame({'city':['Chicago','San Francisco','New York City'],\n",
    "                 'rank':[1,4,5]})\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd7e183f-5797-4577-b137-99a555caed82",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SQL\n",
    "sql='''\n",
    "    SELECT city,rank\n",
    "    FROM df1\n",
    "    UNION ALL\n",
    "    SELECT city,rank\n",
    "    FROM df2\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ddbac690-43c6-441f-90d8-1fea71e49830",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.concat([df1,df2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68c4cba2-ca07-4a4e-80fc-61d34fbeb065",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Order Limit先排序后分页"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4ceb667-a990-41de-99e8-979eb51aeb00",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SQL\n",
    "sql='''\n",
    "    SELECT *\n",
    "    from titanic\n",
    "    order by Fare\n",
    "    limit 5\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca22aad7-dd3e-446e-a929-b2c705fd7430",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.sort_values('Fare',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b65cd8c7-06f1-44ea-82bb-d7b55f340e3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 取每个分组group的top n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9031872-4f75-4696-92e8-576ecfdb34bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# MYSQL不支持\n",
    "# Oracle有ROW_NUMBER语法"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d5d42b1-5d9b-48d7-9671-f10482f009da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pandas按照Survived,Sex分组，取Age的top n\n",
    "df.groupby(['Survived','Sex']).apply(lambda df:df.sort_values('Age',ascending=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b953874-6a55-4a03-9dc2-075b40d7c37d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# UPDATE数据更新"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6221c127-530f-4af2-aa59-f129a5953229",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87bd4bbd-a0d9-4384-9c60-3fe04cd08613",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SQL\n",
    "sql='''\n",
    "    UPDATE titanic\n",
    "    set Age=0\n",
    "    where Age is null\n",
    "'''\n",
    "# 填充"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29fef223-ac9a-4501-80d8-17132bbfd6f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "condition=df['Age'].isna()\n",
    "condition.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf381c6b-cd26-42fb-8dc6-6332628a25cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DELETE删除"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "afe0a785-a7ea-40ae-8a4a-b3ccb67100aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# SQL\n",
    "sql='''\n",
    "    DELETE FROM titanic\n",
    "    where Age=0\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b89dda39-eeff-492a-ac4c-e2c71861ad89",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new=df[df['Age']!=0] # 把不为零的数据取出来赋给新的df\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2ae3e94-54d7-43c5-b54f-a4b68e7fe561",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new[df_new['Age']==0] # 没有年龄为0的数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "639c8396-8ae2-4bc0-a6d6-2f098ae17a9f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57a0826f-5f67-4033-a1c4-0ab5ec15e59c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db00e0f8-71a5-46b3-ae15-d1e298abc818",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点五、pandas实现groupby分组聚合之后对不同列数据进行统计\n",
    "# 电影评分数据集信息（UserID,MovieID,Rating,Timestamp）\n",
    "# 聚合后对单列的单指标做统计：统计每个MovieID的平均评分 df.groupby('MovieID')['Rating'].mean()以MovieID为分组变量，取出单个列进行计算\n",
    "# 聚合后单列多指标统计：统计每个MovieID的最高评分，最低评分，平均评分 df.groupby('MovieID')['Rating'].agg(mean='mean',max='max',min=np.min) mean等对象是列名 df.groupby('MovieID').agg({'Rating':['mean','max',np.min]})\n",
    "# 聚合后对多列多指标进行统计：统计每个MovieID的评分人数，最高评分，最低评分，平均评分 ⬇统计人数和评分\n",
    "# df.groupby('MovieID‘).agg(rating_mean=('Rating','mean'),user_count=('UserID',lambda x:x.nunique())) rating_mean新列名，等于元组，元组是对rating数据应用mean函数，即（数据，函数）\n",
    "# df.groupby('MovieID').agg({'Rating':['mean','min','max'],'UserID':lambda x:x.nunique()})\n",
    "# df.gruopby('MovieID').apply(lambda x:pd.Series({'min':x['Rating'].min(),'mean':x['Rating'].mean()})) apply传一个自定义的函数，其中x是聚合后的子df，x['Rating']取出评分列，再使用最小或者平均函数，最后返回pd.Series字典，key值即新的列名\n",
    "# 记忆方式：agg(新列名=函数)，agg(新列名=（原列名，函数）)，agg({'原列名':函数/列表})\n",
    "# agg函数的等号表示把结果赋值给新列，字典元组代表对这个列运用这个函数\n",
    "# 官方 https://pandas.pydata.org/pandas-docs/version/0.23.4/generate/pandas.core.groupby.DataFrameGroupBy.agg.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dda08ef6-c707-4dbe-aafd-d70dd22a03de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取数据\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "df=pd.read_csv(\n",
    "    './datas/movielens-1m/ratings.dat',\n",
    "    sep='::',\n",
    "    engine='python',\n",
    "    names='UserID::MovieID::Rating::Timestamp'.split('::')\n",
    ")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a1f6967-b93f-4279-9c7c-299dffbb5c94",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 聚合数据后进行单列单指标的统计\n",
    "result=df.groupby('MovieID')['Rating'].mean()\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea406335-f43b-4a2d-8d1d-94530126b888",
   "metadata": {},
   "outputs": [],
   "source": [
    "type(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00a18068-f1dd-49c9-ab1a-7088b9c0437e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 聚合后单列-多指标统计\n",
    "# 统计每个MovieID的最高评分，最低评分，平均评分"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "946b1f3b-c145-46a9-893a-c57df6e245b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法1 agg函数传入多个结果列名=函数名形式\n",
    "result=df.groupby('MovieID')['Rating'].agg(\n",
    "    mean='mean',max='max',min=np.min\n",
    ")\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9995e72-8796-46f0-b605-b16281d87822",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法2 agg函数传入字典，key是column名，value是函数列表\n",
    "result=df.groupby('MovieID').agg(\n",
    "    {'Rating':['mean','max',np.min]}\n",
    ")\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa955c0b-e24b-46af-b3a7-36bace47a1dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 更改上述结果\n",
    "result.columns=['age_mean','age_min','age_max']\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f7676f5-d4d7-4653-b924-9e366549a26b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 聚合后多列-多指标统计\n",
    "# 每个movieID的评分人数，最高评分，最低评分，平均评分"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98a93391-dd16-455e-afd5-d361f9480ed1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法1 agg函数传入字典，key是原列名，value是原列名或者函数元组\n",
    "result=df.groupby('MovieID').agg(\n",
    "    rating_mean=('Rating','mean'),\n",
    "    rating_min=('Rating','min'),\n",
    "    rating_max=('Rating','max'),\n",
    "    user_count=('UserID',lambda x:x.nunique())\n",
    "    \n",
    ")\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4ab3fd3-aaaf-4d50-96ae-3aaf95842802",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法2 agg函数传入字典，key是原列名，value是函数或函数列表\n",
    "# 统计后为二级索引，可以做处理\n",
    "result=df.groupby('MovieID').agg(\n",
    "    {\n",
    "        'Rating':['mean','min','max'],\n",
    "        'UserID':lambda x:len(x.unique())\n",
    "    }\n",
    ")\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90ec373c-673b-471f-ade0-c8fc479fd6c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 更改二级索引\n",
    "result.columns=['rating_mean','rating_min','rating_max','user_count']\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0becc49-814c-417b-8623-3802b1a5ffed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法3 使用groupby之后使用apply函数对每个子df进行单独统计\n",
    "def agg_func(x): # 定义一个函数，一会apply用\n",
    "    # x为子df\n",
    "    # series成为一行，字典key是列名\n",
    "    return pd.Series({\n",
    "        'rating_mean':x['Rating'].mean(),\n",
    "        'rating_min':x['Rating'].min(),\n",
    "        'rating_max':x['Rating'].max(),\n",
    "        'user_count':x['UserID'].nunique()\n",
    "    })\n",
    "result=df.groupby('MovieID').apply(agg_func)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b3dc895-d6d8-4865-b614-dce1e3a45395",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d5e8e5d-3512-4dcb-870c-0af9cdd23be7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea216e51-23de-43eb-b548-27289616f450",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点六、pandas读取excel展示在网页并且随数据更改更新\n",
    "# 科研助理：杂乱数据预处理（正则表达式），进而导入数据用pandas处理，输出为excel，多个数据多次展示在网页上，方便建立共享系统，还可以随时更新"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d98dd8d-3b34-43eb-8802-f0b0d15cd330",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 操作步骤：首先创建代码文件和表格数据（表格数据为处理完毕的数据），打开代码进行文件更改，（代码文件：引入库，初始化对象，初始化函数，读取数据，将其变成HTML格式，通过网页格式把大字符串放入）\n",
    "# host为四个零即代表他人可访问\n",
    "# 运行：首先复制代码与数据文件路径（绝对路径），在cmd中实现进入数据存储的硬盘（输入c:或者d:），dir查看文件名称与数量，进而python+.py后缀的网页文件进行运行，运行之后会出现 http://127.0.0.1:5000进行访问\n",
    "# 如果路径为http://0.0.0.0:5000/可以替换为上述路径\n",
    "# 向对方提供url名称，ip需要替换为内网ip,即ctrl+c退出程序后，输入ipconfig，有一个IPv4地址，复制192.168.101.3，将127.0.0.1换成IPv4地址再次进行访问，访问失败是程序关闭，再次在cmd中运行程序即可"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b854c196-7f79-49de-9801-a05704b91b9c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a7b8eae-d319-45aa-a7f2-947d620017fb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1a1c233-2a86-4bd5-9e85-5b8c15d57c49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点七、python使用pandas读取excel存入mySQL\n",
    "# 使用pandas从各个数据源读取数据，例如excel,csv,其他mysql，爬虫等，pandas对数据做处理分析整理统计，最后将数据存储至mysql，用于web展示，后续进一步进行sql分析等\n",
    "# 官方：https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9852fc59-a1d6-41ae-9b96-bb20b846b97d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 数据准备：学生数据信息\n",
    "import pandas as pd\n",
    "df=pd.read_excel('./course_datas/c23_excel_vlookup/学生信息表.xlsx')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1556b469-b283-4ec9-9777-a148137a08e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.index.name # 为空\n",
    "df.index.name='id'\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25a0bccc-42f5-4adb-ba65-c317bfa5bc3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 创建sqlalchemy对象连接MySQL\n",
    "# SQLAlchemy为python的ORM（Object-Relational-Mapping）框架，将关系数据库的表结构映射到对象上\n",
    "# 官方：https://www.sqlalchemy.org/\n",
    "# 安装sqlalchemy:pip install sqlalchemy\n",
    "# 安装python依赖库：pip install mysql-connector-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "845ec5d6-98f3-4c97-980e-fa38b4a7bb29",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import create_engine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cceaba20-1f75-496b-8419-6c6e6dbce2e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "engine=create_engine('mysql+mysqlconnector://root:lwm20011027@127.0.0.1:3306/test',echo=False)\n",
    "# 调用函数，传入一个url,传入库名，root用户名，后面跟密码，@后面主机"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27eb17ec-91f2-4f1e-a507-f3bc9e1d76e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法1 数据表不存在，每次覆盖整个表\n",
    "# 每次运行都要drop table，新建表"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42f8605d-e5da-4902-863b-065d58fb9469",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_sql(name='student',con=engine,if_exists='replace')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3509e5ac-6c13-4bd1-b8f1-8af218158f06",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 程序验证\n",
    "# 使用 SQLAlchemy 的连接（新功能）执行查询\n",
    "from sqlalchemy import text\n",
    "\n",
    "# 使用 SQLAlchemy 的连接执行查询\n",
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('SHOW CREATE TABLE student')).first()[1]  # 获取数据第二列，即创建表的 SQL 语句\n",
    "    print(result)  # 格式化打印创建表的 SQL 语句"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0fe6b3a-f571-49db-81b5-46fead24f770",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 查询表中行数\n",
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('select count(1) from student')).first()\n",
    "    print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0ab1d66-6867-45b2-966c-491a25017830",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 前几行数据\n",
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('select * from student limit 5')).fetchall()\n",
    "    print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8eecafa1-5d1e-4128-847f-ddf91d93bcb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 方法2 数据表存在，每次对数据进行新增\n",
    "# 场景：每天都会新增一部分数据，添加到数据库"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ec012fb-161a-4225-b13b-fdbda6c84c3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new=df.loc[:4,:] # 取前四行所有列数据\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd1424c3-75e5-41c2-ba8a-4f1d7ec2694f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new.to_sql(name='student',con=engine,if_exists='append') # 如果文件存在则为添加，不删除"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b77506a-55ba-42f9-80e3-44314fa54587",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 取前面的数据\n",
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('select * from student where id<5')).fetchall()\n",
    "    print(result)\n",
    "    # 返回了10条重复索引数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a1ea11a-12a0-4340-bd1b-8afa2569c388",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 重复问题解决\n",
    "df_new.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b84c3433-4117-473b-a392-2da3423428e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import text\n",
    "\n",
    "for id in df_new.index:\n",
    "    # 先删除要新增的数据\n",
    "    delete_sql = f'delete from student where id={id}'\n",
    "    print(delete_sql)\n",
    "    \n",
    "    with engine.connect() as connection:\n",
    "        # 执行删除语句\n",
    "        connection.execute(text(delete_sql))\n",
    "        connection.commit()  # 提交事务\n",
    "# 删除0-5id数据，此时为空数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "428669fb-4119-4559-be90-63043e09ed61",
   "metadata": {},
   "outputs": [],
   "source": [
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('select * from student where id<5')).fetchall()\n",
    "    print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47d8ab60-f3e6-48fd-b01e-6769738ce2a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 再查行数\n",
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('select count(1) from student')).first()\n",
    "    print(result)\n",
    "# 原24现在19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2218214-b41a-47dd-8c3a-1fb833440599",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 再次新增数据到里面\n",
    "df_new.to_sql(name='student',con=engine,if_exists='append')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d79b993-423d-4762-a4cb-ea790a2f770b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 再取id小于5数据\n",
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('select * from student where id<5')).fetchall()\n",
    "    print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9690823-2aab-410d-8cda-3aa41e127083",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 再看行数\n",
    "with engine.connect() as connection:\n",
    "    result = connection.execute(text('select count(1) from student')).first()\n",
    "    print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8800bfd3-98aa-4628-9457-92f87f7e74bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 两种方式：一种是直接覆盖数据，另一种是先删除对应数据再对数据进行添加（或者更改索引）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "641e9d87-ab36-4e4a-85f9-0ad5064c037a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "394b1fab-aa3a-48a1-b24e-901f00fccb37",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ba7b817-2aae-4a62-a7d6-e3036eae77c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点八、批量翻译英语单词（实例）\n",
    "# 用途：批量的英文单词翻译生成英汉翻译词典，提供excel下载\n",
    "# 代码实现：提供一个英文文章URL，自动下载网页，实现网页中所有英文单词的翻译，存储翻译结果到excel\n",
    "# 涉及技术：pandas（读取文件，数据合并，输出excel），requests（下载网页），BeautifulSoup（解析网页），正则表达式处理英文单词格式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "018f966e-d729-4612-837a-8156b259889e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 读取英汉翻译词典文件\n",
    "# 词典文件：https://github.com/skywind3000/ECDICT，下载字典，解压文件"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "4f304331-a42b-433c-bf7d-dce58b460b2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\wenme\\AppData\\Local\\Temp\\ipykernel_9860\\540332671.py:2: DtypeWarning: Columns (11) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  df_dict=pd.read_csv(r'C:\\Python312\\ant-learn-pandas-master\\ant-learn-pandas-master\\datas\\ECDICT-master\\ECDICT-master\\stardict.csv')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(3402564, 13)"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as ps\n",
    "df_dict=pd.read_csv(r'C:\\Python312\\ant-learn-pandas-master\\ant-learn-pandas-master\\datas\\ECDICT-master\\ECDICT-master\\stardict.csv')\n",
    "df_dict.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7117e094-045b-466e-9c17-9479faa407d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dict.sample(10).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7055c7b-8667-4fdd-8ebf-2ca47a6c7dcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 将除了word,translation之外的列扔掉\n",
    "df_dict=df_dict[['word','translation']]\n",
    "df_dict.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de2b9bfe-1bc3-4dac-b8f7-1afbe929e273",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 下载网页得到网页内容\n",
    "import requests\n",
    "# pandas官方文档中的一个URL\n",
    "url='https://pandas.pydata.org/docs/user_guide/indexing.html'\n",
    "html_cont=requests.get(url).text\n",
    "html_cont[:100]\n",
    "# 访问前一百个字符"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b31b1c9-2cb4-4664-aab1-c4ea5f9cf159",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 提取网页正文内容\n",
    "from bs4 import BeautifulSoup\n",
    "soup=BeautifulSoup(html_cont)\n",
    "html_text=soup.get_text()\n",
    "html_text[:500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2eed70e3-e441-4839-820a-a5046a3f14b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 英文分词和数据清洗\n",
    "import re\n",
    "word_list=re.split('''[ ,.\\(\\)/\\n|\\-:=\\$\\[\"']''',html_text)\n",
    "# 中括号之间放一些文本分割的字符，空格逗号句号小括号（转义），斜线换行符，竖线等\n",
    "word_list[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a86b919c-5626-43c6-acea-0e90f451b8f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 分割结果有些空值\n",
    "# 读取停用词表，处理方便判断\n",
    "with open('./datas/stop_words/stop_words.txt') as fin:\n",
    "    stop_words=set(fin.read().split('\\n'))\n",
    "list(stop_words)[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5ddfb8f-6ff5-48e2-ad26-86b2ae0e8562",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 数据清洗\n",
    "word_list_clean=[]\n",
    "for word in word_list:\n",
    "    # 过滤掉空词，数字，单个字符的词，停用词\n",
    "    if not word or word.isnumeric() or len(word)<=1 or word in stop_words:\n",
    "        continue\n",
    "    word_list_clean.append(word)\n",
    "word_list_clean[:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "323edaa5-5e76-458a-b88e-e944787af0e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 分词结果构造一个DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8480047-429b-44a8-886e-5f77d61c7183",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_words=pd.DataFrame({\n",
    "    'word':word_list_clean\n",
    "})\n",
    "df_words.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0afe48b5-6539-4b33-8a83-96e4189f1e51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 统计词频\n",
    "df_words=(\n",
    "    df_words\n",
    "    .groupby('word')['word'] # 按照单词分类统计词频\n",
    "    .agg(count='size') # 主要是数数函数\n",
    "    .reset_index() # 重新设定索引为单词\n",
    "    .sort_values(by='count',ascending=False) # 再对数据进行排序，方便统计\n",
    ")\n",
    "df_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cad1af1f-11c7-4dff-8138-647b5025f175",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 和单词词典实现结合"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "371e369e-999d-4e44-900c-f43865f4898d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_merge=pd.merge(\n",
    "    left=df_dict,\n",
    "    right=df_words,\n",
    "    left_on='word',\n",
    "    right_on='word'\n",
    ")\n",
    "df_merge.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82b7835e-654b-44ce-97da-039002161f7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 存入excel\n",
    "df_merge.to_excel('./38.batch_chinese_english.xlsx',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd746b38-79ef-4df6-bdc3-487b97085db9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 优化升级：提供多种输入方式，txt/excel/word/pdf，可以做成网页微信小程序进行在线访问，用户可以标记学过单词进行过滤"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc7da5b7-f00b-4a33-b3d4-d5357f883d61",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "954bd201-a7cd-4738-8a70-a14ad5b58716",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "224e60d0-98f7-4f42-b47f-540c19ab5851",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点九、pandas处理excel多列到多行转换（难点）\n",
    "# 数据多列变成多行，一行变为多行，本身可以用explode，使用explode需要将多列变成一列，有的列为空，需要做空值筛选"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "1634226b-3680-41de-aaf4-6e45f5fbc676",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P/N</th>\n",
       "      <th>Description</th>\n",
       "      <th>Supplier</th>\n",
       "      <th>Supplier PN</th>\n",
       "      <th>Supplier.1</th>\n",
       "      <th>Supplier PN.1</th>\n",
       "      <th>Supplier.2</th>\n",
       "      <th>Supplier PN.2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>MURATA</td>\n",
       "      <td>GRM1555C1H101JA01D</td>\n",
       "      <td>YAGEO</td>\n",
       "      <td>CC0402JRNPO9BN101</td>\n",
       "      <td>GRM1555C1H101JA01J</td>\n",
       "      <td>Murata Electronics North America</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation</td>\n",
       "      <td>04025A6R8CAT2A</td>\n",
       "      <td>KEMET</td>\n",
       "      <td>C0402C689C5GACTU</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302-462-009</td>\n",
       "      <td>CAP CER 0402 3.9pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation</td>\n",
       "      <td>04025A3R9CAT2A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           P/N                    Description         Supplier  \\\n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V           MURATA   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V  AVX Corporation   \n",
       "2  302-462-009  CAP CER 0402 3.9pF 0.25pF 50V  AVX Corporation   \n",
       "\n",
       "          Supplier PN Supplier.1      Supplier PN.1          Supplier.2  \\\n",
       "0  GRM1555C1H101JA01D      YAGEO  CC0402JRNPO9BN101  GRM1555C1H101JA01J   \n",
       "1      04025A6R8CAT2A      KEMET   C0402C689C5GACTU                 NaN   \n",
       "2      04025A3R9CAT2A        NaN                NaN                 NaN   \n",
       "\n",
       "                      Supplier PN.2  \n",
       "0  Murata Electronics North America  \n",
       "1                               NaN  \n",
       "2                               NaN  "
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_excel('./course_datas/c39_explode_to_manyrows/读者提供的数据-输入.xlsx')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "baca2de3-66c8-41c7-a08e-eae53c0db01a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Supplier',\n",
       " 'Supplier PN',\n",
       " 'Supplier.1',\n",
       " 'Supplier PN.1',\n",
       " 'Supplier.2',\n",
       " 'Supplier PN.2']"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 多列合并成一列\n",
    "# 提取待合并的所有列名，后续可以drop\n",
    "merge_name=list(df.loc[:,'Supplier':].columns.values)\n",
    "merge_name\n",
    "# 得到的是所有列的名字的值并形成一个列表"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "566b9127-2249-4410-97c7-b5b37d330460",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P/N</th>\n",
       "      <th>Description</th>\n",
       "      <th>Supplier</th>\n",
       "      <th>Supplier PN</th>\n",
       "      <th>Supplier.1</th>\n",
       "      <th>Supplier PN.1</th>\n",
       "      <th>Supplier.2</th>\n",
       "      <th>Supplier PN.2</th>\n",
       "      <th>merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>MURATA</td>\n",
       "      <td>GRM1555C1H101JA01D</td>\n",
       "      <td>YAGEO</td>\n",
       "      <td>CC0402JRNPO9BN101</td>\n",
       "      <td>GRM1555C1H101JA01J</td>\n",
       "      <td>Murata Electronics North America</td>\n",
       "      <td>MURATA|GRM1555C1H101JA01D#YAGEO|CC0402JRNPO9BN...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation</td>\n",
       "      <td>04025A6R8CAT2A</td>\n",
       "      <td>KEMET</td>\n",
       "      <td>C0402C689C5GACTU</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AVX Corporation|04025A6R8CAT2A#KEMET|C0402C689...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302-462-009</td>\n",
       "      <td>CAP CER 0402 3.9pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation</td>\n",
       "      <td>04025A3R9CAT2A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AVX Corporation|04025A3R9CAT2A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           P/N                    Description         Supplier  \\\n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V           MURATA   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V  AVX Corporation   \n",
       "2  302-462-009  CAP CER 0402 3.9pF 0.25pF 50V  AVX Corporation   \n",
       "\n",
       "          Supplier PN Supplier.1      Supplier PN.1          Supplier.2  \\\n",
       "0  GRM1555C1H101JA01D      YAGEO  CC0402JRNPO9BN101  GRM1555C1H101JA01J   \n",
       "1      04025A6R8CAT2A      KEMET   C0402C689C5GACTU                 NaN   \n",
       "2      04025A3R9CAT2A        NaN                NaN                 NaN   \n",
       "\n",
       "                      Supplier PN.2  \\\n",
       "0  Murata Electronics North America   \n",
       "1                               NaN   \n",
       "2                               NaN   \n",
       "\n",
       "                                               merge  \n",
       "0  MURATA|GRM1555C1H101JA01D#YAGEO|CC0402JRNPO9BN...  \n",
       "1  AVX Corporation|04025A6R8CAT2A#KEMET|C0402C689...  \n",
       "2                     AVX Corporation|04025A3R9CAT2A  "
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def merge_cols(x):\n",
    "    # x是每一行Series，将他们按照分隔符分开\n",
    "    # 删除空列\n",
    "    x=x[x.notna()] # 筛选x为空的单元格的值\n",
    "    #使用x.values用于合并\n",
    "    y=x.values # 将不为空的x值赋值给y\n",
    "    # 合并后的列表，每个元素是‘Supplier+Supplier PN’对\n",
    "    result=[] # 初始化列表，列表值为成对的\n",
    "    # range的步长为2，目的是每两列做合并\n",
    "    for idx in range(0,len(y),2):\n",
    "        if idx + 1 < len(y): # 边界检查，防止索引越界\n",
    "        # 使用竖线|作为‘Supplier+Supplier PN’之间的分隔符\n",
    "            result.append(f'{y[idx]}|{y[idx+1]}') # 格式化\n",
    "    # 将所有两两一对，用#分割，返回一个大字符串\n",
    "    return \"#\".join(result)\n",
    "# 添加新列，把待合并的所有列变成一个大字符串\n",
    "df['merge']=df.loc[:,'Supplier':].apply(merge_cols,axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "63278354-89c1-4599-9aeb-35625c05d77d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P/N</th>\n",
       "      <th>Description</th>\n",
       "      <th>merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>MURATA|GRM1555C1H101JA01D#YAGEO|CC0402JRNPO9BN...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation|04025A6R8CAT2A#KEMET|C0402C689...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302-462-009</td>\n",
       "      <td>CAP CER 0402 3.9pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation|04025A3R9CAT2A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           P/N                    Description  \\\n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V   \n",
       "2  302-462-009  CAP CER 0402 3.9pF 0.25pF 50V   \n",
       "\n",
       "                                               merge  \n",
       "0  MURATA|GRM1555C1H101JA01D#YAGEO|CC0402JRNPO9BN...  \n",
       "1  AVX Corporation|04025A6R8CAT2A#KEMET|C0402C689...  \n",
       "2                     AVX Corporation|04025A3R9CAT2A  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 将最初提取的列中的不用的列删掉\n",
    "df.drop(merge_name,axis=1,inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "e8cb4f0a-02a3-4fda-93c6-b45b193b4cbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P/N</th>\n",
       "      <th>Description</th>\n",
       "      <th>merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>[MURATA|GRM1555C1H101JA01D, YAGEO|CC0402JRNPO9...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>[AVX Corporation|04025A6R8CAT2A, KEMET|C0402C6...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302-462-009</td>\n",
       "      <td>CAP CER 0402 3.9pF 0.25pF 50V</td>\n",
       "      <td>[AVX Corporation|04025A3R9CAT2A]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           P/N                    Description  \\\n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V   \n",
       "2  302-462-009  CAP CER 0402 3.9pF 0.25pF 50V   \n",
       "\n",
       "                                               merge  \n",
       "0  [MURATA|GRM1555C1H101JA01D, YAGEO|CC0402JRNPO9...  \n",
       "1  [AVX Corporation|04025A6R8CAT2A, KEMET|C0402C6...  \n",
       "2                   [AVX Corporation|04025A3R9CAT2A]  "
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 进而使用explode把一列变为多列\n",
    "# merge列首先变为list\n",
    "df['merge']=df['merge'].astype('str').str.split('#')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "6ed47b54-b492-4eec-a416-b0770abb78d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P/N</th>\n",
       "      <th>Description</th>\n",
       "      <th>merge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>MURATA|GRM1555C1H101JA01D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>YAGEO|CC0402JRNPO9BN101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>GRM1555C1H101JA01J|Murata Electronics North Am...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation|04025A6R8CAT2A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>KEMET|C0402C689C5GACTU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302-462-009</td>\n",
       "      <td>CAP CER 0402 3.9pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation|04025A3R9CAT2A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           P/N                    Description  \\\n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V   \n",
       "2  302-462-009  CAP CER 0402 3.9pF 0.25pF 50V   \n",
       "\n",
       "                                               merge  \n",
       "0                          MURATA|GRM1555C1H101JA01D  \n",
       "0                            YAGEO|CC0402JRNPO9BN101  \n",
       "0  GRM1555C1H101JA01J|Murata Electronics North Am...  \n",
       "1                     AVX Corporation|04025A6R8CAT2A  \n",
       "1                             KEMET|C0402C689C5GACTU  \n",
       "2                     AVX Corporation|04025A3R9CAT2A  "
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 执行explode变成多行，每一个皆有索引\n",
    "df_explode=df.explode('merge')\n",
    "df_explode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "21d688d2-3c03-497f-be0a-2c3c6394d092",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P/N</th>\n",
       "      <th>Description</th>\n",
       "      <th>merge</th>\n",
       "      <th>Supplier</th>\n",
       "      <th>Supplier PN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>MURATA|GRM1555C1H101JA01D</td>\n",
       "      <td>MURATA</td>\n",
       "      <td>GRM1555C1H101JA01D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>YAGEO|CC0402JRNPO9BN101</td>\n",
       "      <td>YAGEO</td>\n",
       "      <td>CC0402JRNPO9BN101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>302-462-326</td>\n",
       "      <td>CAP CER 0402 100pF 5% 50V</td>\n",
       "      <td>GRM1555C1H101JA01J|Murata Electronics North Am...</td>\n",
       "      <td>GRM1555C1H101JA01J</td>\n",
       "      <td>Murata Electronics North America</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation|04025A6R8CAT2A</td>\n",
       "      <td>AVX Corporation</td>\n",
       "      <td>04025A6R8CAT2A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>302-462-012</td>\n",
       "      <td>CAP CER 0402 6.8pF 0.25pF 50V</td>\n",
       "      <td>KEMET|C0402C689C5GACTU</td>\n",
       "      <td>KEMET</td>\n",
       "      <td>C0402C689C5GACTU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>302-462-009</td>\n",
       "      <td>CAP CER 0402 3.9pF 0.25pF 50V</td>\n",
       "      <td>AVX Corporation|04025A3R9CAT2A</td>\n",
       "      <td>AVX Corporation</td>\n",
       "      <td>04025A3R9CAT2A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           P/N                    Description  \\\n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "0  302-462-326      CAP CER 0402 100pF 5% 50V   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V   \n",
       "1  302-462-012  CAP CER 0402 6.8pF 0.25pF 50V   \n",
       "2  302-462-009  CAP CER 0402 3.9pF 0.25pF 50V   \n",
       "\n",
       "                                               merge            Supplier  \\\n",
       "0                          MURATA|GRM1555C1H101JA01D              MURATA   \n",
       "0                            YAGEO|CC0402JRNPO9BN101               YAGEO   \n",
       "0  GRM1555C1H101JA01J|Murata Electronics North Am...  GRM1555C1H101JA01J   \n",
       "1                     AVX Corporation|04025A6R8CAT2A     AVX Corporation   \n",
       "1                             KEMET|C0402C689C5GACTU               KEMET   \n",
       "2                     AVX Corporation|04025A3R9CAT2A     AVX Corporation   \n",
       "\n",
       "                        Supplier PN  \n",
       "0                GRM1555C1H101JA01D  \n",
       "0                 CC0402JRNPO9BN101  \n",
       "0  Murata Electronics North America  \n",
       "1                    04025A6R8CAT2A  \n",
       "1                  C0402C689C5GACTU  \n",
       "2                    04025A3R9CAT2A  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 将一列还原成结果的多列\n",
    "# 即从merge中提取两列\n",
    "df_explode['Supplier']=df_explode['merge'].str.split('|').str[0] # 数据拆分进行取出\n",
    "df_explode['Supplier PN']=df_explode['merge'].str.split('|').str[1]\n",
    "df_explode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fca507f-71e8-40a4-972b-56c5739bb3e3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84e0acf8-f139-4663-8cc1-690789bd0fb1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad76e053-cf05-4649-a939-bb51774a6abd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 知识点十、pandas实现groupby聚合后字符串序列的合并\n",
    "# 需求：计算每个月最高温，最低温，出现的风向列表，空气质量列表，按照月份进行聚合"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "0389a861-9ea0-4e44-85ca-970e644c9f67",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df=pd.read_csv('./datas/beijing_tianqi/beijing_tianqi_2018.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "ec217764-edbc-4931-9d79-cd3765434b48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ymd</th>\n",
       "      <th>bWendu</th>\n",
       "      <th>yWendu</th>\n",
       "      <th>tianqi</th>\n",
       "      <th>fengxiang</th>\n",
       "      <th>fengli</th>\n",
       "      <th>aqi</th>\n",
       "      <th>aqiInfo</th>\n",
       "      <th>aqiLevel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>59</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-01-02</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>阴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>49</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-01-03</td>\n",
       "      <td>2</td>\n",
       "      <td>-5</td>\n",
       "      <td>多云</td>\n",
       "      <td>北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-01-04</td>\n",
       "      <td>0</td>\n",
       "      <td>-8</td>\n",
       "      <td>阴</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>28</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-01-05</td>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>1-2级</td>\n",
       "      <td>50</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>-5</td>\n",
       "      <td>-12</td>\n",
       "      <td>多云~晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>48</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>-3</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>3级</td>\n",
       "      <td>40</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>-3</td>\n",
       "      <td>-12</td>\n",
       "      <td>晴</td>\n",
       "      <td>西北风</td>\n",
       "      <td>2级</td>\n",
       "      <td>29</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>-2</td>\n",
       "      <td>-11</td>\n",
       "      <td>晴~多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>31</td>\n",
       "      <td>优</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>-2</td>\n",
       "      <td>-10</td>\n",
       "      <td>多云</td>\n",
       "      <td>东北风</td>\n",
       "      <td>1级</td>\n",
       "      <td>56</td>\n",
       "      <td>良</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>365 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            ymd  bWendu  yWendu tianqi fengxiang fengli  aqi aqiInfo  aqiLevel\n",
       "0    2018-01-01       3      -6   晴~多云       东北风   1-2级   59       良         2\n",
       "1    2018-01-02       2      -5   阴~多云       东北风   1-2级   49       优         1\n",
       "2    2018-01-03       2      -5     多云        北风   1-2级   28       优         1\n",
       "3    2018-01-04       0      -8      阴       东北风   1-2级   28       优         1\n",
       "4    2018-01-05       3      -6   多云~晴       西北风   1-2级   50       优         1\n",
       "..          ...     ...     ...    ...       ...    ...  ...     ...       ...\n",
       "360  2018-12-27      -5     -12   多云~晴       西北风     3级   48       优         1\n",
       "361  2018-12-28      -3     -11      晴       西北风     3级   40       优         1\n",
       "362  2018-12-29      -3     -12      晴       西北风     2级   29       优         1\n",
       "363  2018-12-30      -2     -11   晴~多云       东北风     1级   31       优         1\n",
       "364  2018-12-31      -2     -10     多云       东北风     1级   56       良         2\n",
       "\n",
       "[365 rows x 9 columns]"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['bWendu']=df['bWendu'].astype('str').str.replace('℃','').astype('int32')\n",
    "df['yWendu']=df['yWendu'].astype('str').str.replace('℃','').astype('int32')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "e3e0760a-75db-4f76-b39a-dd33274c4007",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1\n",
       "1       1\n",
       "2       1\n",
       "3       1\n",
       "4       1\n",
       "       ..\n",
       "360    12\n",
       "361    12\n",
       "362    12\n",
       "363    12\n",
       "364    12\n",
       "Name: ymd, Length: 365, dtype: int32"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 转换日期类型\n",
    "df['ymd']=pd.to_datetime(df['ymd'])\n",
    "df['ymd'].dt.month\n",
    "# 按照月份进行划分"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "72b5dcdb-11c0-400f-81d9-a078bb00d761",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['东北风', '北风', '西北风', '西南风', '南风', '东南风', '东风', '西风'], dtype=object)"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Series可以用Series.unique去重\n",
    "df['fengxiang'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "6347ab09-1677-473f-84ae-3cf5c79d8d16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'东北风,北风,西北风,西南风,南风,东南风,东风,西风'"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 使用','.join(series)实现数组合并成大字符串\n",
    "','.join(df['fengxiang'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "1781fde0-f8b0-47a9-a821-a8525bbaa84d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>月份</th>\n",
       "      <th>最高温度</th>\n",
       "      <th>最低温度</th>\n",
       "      <th>风向列表</th>\n",
       "      <th>空气质量列表</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>-12</td>\n",
       "      <td>东北风,北风,西北风,西南风,南风,东南风,东风</td>\n",
       "      <td>良,优,轻度污染,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>-10</td>\n",
       "      <td>北风,西南风,南风,西北风,西风,东北风,东风</td>\n",
       "      <td>良,优,轻度污染,中度污染,重度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>27</td>\n",
       "      <td>-4</td>\n",
       "      <td>西南风,北风,东南风,南风,东北风,东风</td>\n",
       "      <td>优,良,重度污染,轻度污染,中度污染,严重污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>南风,北风,东北风,西南风,西北风,东南风</td>\n",
       "      <td>重度污染,良,优,轻度污染,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>35</td>\n",
       "      <td>10</td>\n",
       "      <td>东北风,北风,西南风,南风,东南风,东风,西风,西北风</td>\n",
       "      <td>轻度污染,优,良,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>38</td>\n",
       "      <td>17</td>\n",
       "      <td>西南风,南风,北风,东风,东南风,东北风</td>\n",
       "      <td>良,轻度污染,优,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>37</td>\n",
       "      <td>22</td>\n",
       "      <td>东南风,西南风,南风,东北风,东风,西风,北风</td>\n",
       "      <td>良,轻度污染,优</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>36</td>\n",
       "      <td>20</td>\n",
       "      <td>东南风,南风,东风,东北风,北风,西南风</td>\n",
       "      <td>良,轻度污染,优</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>南风,北风,西南风,西北风</td>\n",
       "      <td>优,良,轻度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>北风,西北风,南风,西风,东北风,西南风</td>\n",
       "      <td>优,良,轻度污染,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>18</td>\n",
       "      <td>-4</td>\n",
       "      <td>南风,北风,西南风,东南风,西北风,东北风</td>\n",
       "      <td>良,轻度污染,重度污染,优,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>-12</td>\n",
       "      <td>东南风,东北风,西北风,西南风</td>\n",
       "      <td>中度污染,重度污染,良,优,轻度污染</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    月份  最高温度  最低温度                         风向列表                   空气质量列表\n",
       "0    1     7   -12     东北风,北风,西北风,西南风,南风,东南风,东风            良,优,轻度污染,中度污染\n",
       "1    2    12   -10      北风,西南风,南风,西北风,西风,东北风,东风       良,优,轻度污染,中度污染,重度污染\n",
       "2    3    27    -4         西南风,北风,东南风,南风,东北风,东风  优,良,重度污染,轻度污染,中度污染,严重污染\n",
       "3    4    30     1        南风,北风,东北风,西南风,西北风,东南风       重度污染,良,优,轻度污染,中度污染\n",
       "4    5    35    10  东北风,北风,西南风,南风,东南风,东风,西风,西北风            轻度污染,优,良,中度污染\n",
       "5    6    38    17         西南风,南风,北风,东风,东南风,东北风            良,轻度污染,优,中度污染\n",
       "6    7    37    22      东南风,西南风,南风,东北风,东风,西风,北风                 良,轻度污染,优\n",
       "7    8    36    20         东南风,南风,东风,东北风,北风,西南风                 良,轻度污染,优\n",
       "8    9    31    11                南风,北风,西南风,西北风                 优,良,轻度污染\n",
       "9   10    25     1         北风,西北风,南风,西风,东北风,西南风            优,良,轻度污染,中度污染\n",
       "10  11    18    -4        南风,北风,西南风,东南风,西北风,东北风       良,轻度污染,重度污染,优,中度污染\n",
       "11  12    10   -12              东南风,东北风,西北风,西南风       中度污染,重度污染,良,优,轻度污染"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 方法一\n",
    "result=(\n",
    "    df.groupby(df['ymd'].dt.month)\n",
    "    .agg(# 新列名=（原列名，函数）\n",
    "        最高温度=('bWendu','max'),\n",
    "        最低温度=('yWendu','min'),\n",
    "        风向列表=('fengxiang',lambda x:','.join(x.unique())),\n",
    "        空气质量列表=('aqiInfo',lambda x:','.join(x.unique()))\n",
    "    )\n",
    "    .reset_index()\n",
    "    .rename(columns={'ymd':'月份'})\n",
    ")\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "e5884fe3-3321-40f8-aa72-46750ac1212c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>月份</th>\n",
       "      <th>最高温度</th>\n",
       "      <th>最低温度</th>\n",
       "      <th>风向列表</th>\n",
       "      <th>空气质量列表</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>-12</td>\n",
       "      <td>东北风,北风,西北风,西南风,南风,东南风,东风</td>\n",
       "      <td>良,优,轻度污染,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>-10</td>\n",
       "      <td>北风,西南风,南风,西北风,西风,东北风,东风</td>\n",
       "      <td>良,优,轻度污染,中度污染,重度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>27</td>\n",
       "      <td>-4</td>\n",
       "      <td>西南风,北风,东南风,南风,东北风,东风</td>\n",
       "      <td>优,良,重度污染,轻度污染,中度污染,严重污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>南风,北风,东北风,西南风,西北风,东南风</td>\n",
       "      <td>重度污染,良,优,轻度污染,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>35</td>\n",
       "      <td>10</td>\n",
       "      <td>东北风,北风,西南风,南风,东南风,东风,西风,西北风</td>\n",
       "      <td>轻度污染,优,良,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>38</td>\n",
       "      <td>17</td>\n",
       "      <td>西南风,南风,北风,东风,东南风,东北风</td>\n",
       "      <td>良,轻度污染,优,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>37</td>\n",
       "      <td>22</td>\n",
       "      <td>东南风,西南风,南风,东北风,东风,西风,北风</td>\n",
       "      <td>良,轻度污染,优</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>36</td>\n",
       "      <td>20</td>\n",
       "      <td>东南风,南风,东风,东北风,北风,西南风</td>\n",
       "      <td>良,轻度污染,优</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>31</td>\n",
       "      <td>11</td>\n",
       "      <td>南风,北风,西南风,西北风</td>\n",
       "      <td>优,良,轻度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>北风,西北风,南风,西风,东北风,西南风</td>\n",
       "      <td>优,良,轻度污染,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>18</td>\n",
       "      <td>-4</td>\n",
       "      <td>南风,北风,西南风,东南风,西北风,东北风</td>\n",
       "      <td>良,轻度污染,重度污染,优,中度污染</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>-12</td>\n",
       "      <td>东南风,东北风,西北风,西南风</td>\n",
       "      <td>中度污染,重度污染,良,优,轻度污染</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    月份  最高温度  最低温度                         风向列表                   空气质量列表\n",
       "0    1     7   -12     东北风,北风,西北风,西南风,南风,东南风,东风            良,优,轻度污染,中度污染\n",
       "1    2    12   -10      北风,西南风,南风,西北风,西风,东北风,东风       良,优,轻度污染,中度污染,重度污染\n",
       "2    3    27    -4         西南风,北风,东南风,南风,东北风,东风  优,良,重度污染,轻度污染,中度污染,严重污染\n",
       "3    4    30     1        南风,北风,东北风,西南风,西北风,东南风       重度污染,良,优,轻度污染,中度污染\n",
       "4    5    35    10  东北风,北风,西南风,南风,东南风,东风,西风,西北风            轻度污染,优,良,中度污染\n",
       "5    6    38    17         西南风,南风,北风,东风,东南风,东北风            良,轻度污染,优,中度污染\n",
       "6    7    37    22      东南风,西南风,南风,东北风,东风,西风,北风                 良,轻度污染,优\n",
       "7    8    36    20         东南风,南风,东风,东北风,北风,西南风                 良,轻度污染,优\n",
       "8    9    31    11                南风,北风,西南风,西北风                 优,良,轻度污染\n",
       "9   10    25     1         北风,西北风,南风,西风,东北风,西南风            优,良,轻度污染,中度污染\n",
       "10  11    18    -4        南风,北风,西南风,东南风,西北风,东北风       良,轻度污染,重度污染,优,中度污染\n",
       "11  12    10   -12              东南风,东北风,西北风,西南风       中度污染,重度污染,良,优,轻度污染"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 方法二: Apply函数\n",
    "def agg_func(x):\n",
    "    # x is the dataframe for each grouping\n",
    "    return pd. Series({\n",
    "        '最高温度':x['bWendu'].max(),\n",
    "        '最低温度':x['yWendu'].min(),\n",
    "        '风向列表':','.join(x['fengxiang'].unique()),\n",
    "        '空气质量列表':','.join(x['aqiInfo'].unique())\n",
    "    })\n",
    "result=df \\\n",
    "       .groupby(df['ymd'].dt.month) \\\n",
    "       .apply(agg_func) \\\n",
    "       .reset_index() \\\n",
    "       .rename(columns={'ymd':'月份'})\n",
    "result      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a4afb7a-1a01-4120-add2-18db1af0d525",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
